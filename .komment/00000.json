[
  {
    "name": "Cinema.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/cinemas/Cinema.java",
    "content": {
      "structured": {
        "description": "A `Cinema` class that represents a cinema. It has various attributes and methods for manipulating those attributes, such as ID, name, address, responsible person, logo, and status. The class also provides toString() method for easy conversion into a string representation of the object.",
        "items": []
      }
    }
  },
  {
    "name": "CommentaireCinema.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/cinemas/CommentaireCinema.java",
    "content": {
      "structured": {
        "description": "A `CommentaireCinema` class that represents a comment on a cinema. The class has several constructors, getters and setters for idcommentaire, cinema, client, commentaire, and sentiment properties. Additionally, the class implements the `ToString` interface to provide a string representation of the object.",
        "items": []
      }
    }
  },
  {
    "name": "RatingCinema.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/cinemas/RatingCinema.java",
    "content": {
      "structured": {
        "description": "A class \"RatingCinema\" that represents a cinema rating given by a user. The class has several fields and methods for storing and manipulating the cinema ID, user ID, and rating. The toString() method provides a string representation of the object.",
        "items": []
      }
    }
  },
  {
    "name": "Salle.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/cinemas/Salle.java",
    "content": {
      "structured": {
        "description": "A `Salle` class that represents a movie theater. The class has several constructors that allow for different ways of creating a new instance of the class, including specifying the id of the salle, id of the cinema, number of places, and name of the salle. The class also provides methods for returning the id of the salle, id of the cinema, number of places, and name of the salle. Additionally, the code defines an `toString()` method that allows for a string representation of the `Salle` object.",
        "items": [
          {
            "id": "6e755d96-5e99-19be-d643-aaf6960ca761",
            "ancestors": [],
            "type": "function",
            "description": "Is used to represent a salle within a cinema. It has several fields and methods that allow for the manipulation of these values. The class has four fields: id_salle, id_cinema, nb_places, and nom_salle. Additionally, it has several methods for accessing and modifying these fields, such as getId_salle(), setId_salle(), getId_cinema(), setId_cinema(), getNb_places(), and setNb_places().",
            "name": "Salle",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 122,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Seance.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/cinemas/Seance.java",
    "content": {
      "structured": {
        "description": "A class called Seance that represents a movie session in a cinema. The class has several constructors that take different parameters, such as id_seance, salle, HD, HF, date, and prix. The class also has getter and setter methods for the properties of the seance, such as the filmcinema associated with it. Additionally, the code includes a toString() method for debugging purposes.",
        "items": []
      }
    }
  },
  {
    "name": "Actor.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/films/Actor.java",
    "content": {
      "structured": {
        "description": "A `Actor` class that represents an actor in a film. The class has several constructors to create instances of the class with varying arguments, such as id, name, image, and biography. Additionally, the class provides methods for getting and setting various properties of the actor, such as the number of appearances, id, name, image, and biography.",
        "items": []
      }
    }
  },
  {
    "name": "Actorfilm.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/films/Actorfilm.java",
    "content": {
      "structured": {
        "description": "A class called Actorfilm that represents the association between an actor and a film. The class has several constructors, getters, and setters for idactor and idfilm properties. It also provides a toString() method for generating a string representation of the object.",
        "items": []
      }
    }
  },
  {
    "name": "Category.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/films/Category.java",
    "content": {
      "structured": {
        "description": "A `Category` class that represents a category of films. The class has several constructors for creating instances of the category with different parameters. It also provides getters and setters for the name, id, and description of the category. Additionally, the code includes an override for the `toString()` method to provide a string representation of the category object.",
        "items": []
      }
    }
  },
  {
    "name": "Film.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/films/Film.java",
    "content": {
      "structured": {
        "description": "A class called `Film` that represents a film. The class has several fields and methods for setting and retrieving attributes such as the film's name, ID, image URL, duration, description, and year of release. The class also provides methods for constructing new Film objects and for returning string representations of the objects.",
        "items": []
      }
    }
  },
  {
    "name": "Filmcategory.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/films/Filmcategory.java",
    "content": {
      "structured": {
        "description": "A `Filmcategory` class that represents a film category and its associated film. The class has several constructors for creating new instances and provides getters and setters for the category and film IDs. Additionally, it includes an override of the `toString()` method for easy serialization.",
        "items": []
      }
    }
  },
  {
    "name": "Filmcinema.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/films/Filmcinema.java",
    "content": {
      "structured": {
        "description": "A class `FilmCinema` that represents a combination of a film and a cinema. The class has several fields and methods for associating and manipulating the film and cinema, including constructors, getters, and setters. The class also implements the `ToString` interface to provide a string representation of the object.",
        "items": []
      }
    }
  },
  {
    "name": "Filmcoment.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/films/Filmcoment.java",
    "content": {
      "structured": {
        "description": "A `Filmcoment` class that represents a film comment. The class has several fields and methods for accessing and manipulating the comment's attributes, such as the id, comment, user_id, and film_id. The ` Filmcoment` class also provides a constructor for creating new instances of the class and an `toString()` method for converting the object to a string representation.",
        "items": []
      }
    }
  },
  {
    "name": "RatingFilm.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/films/RatingFilm.java",
    "content": {
      "structured": {
        "description": "A `RatingFilm` class that represents a rating given by a user to a film. The class has fields for the film being rated and the user who gave the rating, as well as a field for the rating itself. The class also has constructors, getters, and setters for each of these fields. Additionally, the code includes an override of the `toString()` method.",
        "items": []
      }
    }
  },
  {
    "name": "Ticket.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/films/Ticket.java",
    "content": {
      "structured": {
        "description": "A `Ticket` class that represents a movie session ticket. The class has several fields and methods for accessing and modifying the ticket's attributes, such as the number of seats, the client associated with the ticket, and the movie session associated with the ticket. The class also provides toString() method for generating a string representation of the ticket object.",
        "items": []
      }
    }
  },
  {
    "name": "Avis.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/produits/Avis.java",
    "content": {
      "structured": {
        "description": "A class called `Avis` that represents a user's review of a product. The class has several fields and methods for storing and manipulating information about the user, note, and produit associated with the avis. The `toString()` method returns a string representation of the object, including its fields.",
        "items": []
      }
    }
  },
  {
    "name": "Categorie_Produit.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/produits/Categorie_Produit.java",
    "content": {
      "structured": {
        "description": "A `Categorie_Produit` class that represents a category of products. The class has several constructors for creating instances of the class with different parameter combinations, and also provides methods for getting and setting the ID of the category, its name, and its description. The `toString()` method allows for easy string representation of the category.",
        "items": []
      }
    }
  },
  {
    "name": "Commande.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/produits/Commande.java",
    "content": {
      "structured": {
        "description": "A `Commande` class that represents a command made by a client. The class has various attributes and methods for manipulating those attributes, such as an ID, date, status, client, list of items, telephone number, and address. The `toString()` method provides a string representation of the object.",
        "items": []
      }
    }
  },
  {
    "name": "CommandeItem.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/produits/CommandeItem.java",
    "content": {
      "structured": {
        "description": "A class `CommandeItem` representing an item in a command. The class has various fields and methods for storing and manipulating the item's ID, quantity, product, and command. The `toString()` method provides a string representation of the object.",
        "items": []
      }
    }
  },
  {
    "name": "Commentaire.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/produits/Commentaire.java",
    "content": {
      "structured": {
        "description": "A `Commentaire` class that represents a comment made by a client on a product. The class has several attributes and methods for accessing and manipulating these attributes, including an ID, client, commentary, and product.",
        "items": []
      }
    }
  },
  {
    "name": "Panier.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/produits/Panier.java",
    "content": {
      "structured": {
        "description": "A class `Panier` that represents a shopping cart. It has several constructors for creating a panier with various parameters, such as ID, produit, quantity, and user. The class also provides methods for getting and setting the panier's ID, quantity, produit, and user. Additionally, it includes an override of the `toString()` method to provide a string representation of the panier object.",
        "items": [
          {
            "id": "7457f502-0b92-4196-5b46-6e07c4d39f89",
            "ancestors": [],
            "type": "function",
            "description": "Is used to represent a shopping cart containing various products and users. It has several fields such as idpanier, quantity, produit, and users, which can be accessed through getters and setters methods. The class also provides a toString() method for creating a string representation of the panier object.",
            "name": "Panier",
            "location": {
              "start": 7,
              "insert": 7,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 128,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Produit.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/produits/Produit.java",
    "content": {
      "structured": {
        "description": "A `Produit` class representing a product with attributes such as ID, name, price, image, description, category, and quantity. It also includes methods for constructing and retrieving the product's attributes, as well as methods for setting and getting the product's ID, name, price, image, description, category, and quantity.",
        "items": []
      }
    }
  },
  {
    "name": "SharedData.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/models/produits/SharedData.java",
    "content": {
      "structured": {
        "description": "A `SharedData` class that follows the Singleton pattern to ensure only one instance of the class exists. It provides methods for returning and setting the total price stored in the shared data object. The class also includes a private constructor to prevent direct instantiation and a static method for retrieving the instance of the class.",
        "items": []
      }
    }
  },
  {
    "name": "Main.java",
    "path": "rakcha-desktop/Main.java",
    "content": {
      "structured": {
        "description": "A `MyClass` class that contains a single instance method `doSomething()` which takes no arguments and returns nothing. It also contains a private field `myField` of type `int`.",
        "items": []
      }
    }
  },
  {
    "name": "AdminSideBarController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/AdminSideBarController.java",
    "content": {
      "structured": {
        "description": "An AdminSideBarController class that implements Initializable and handles various user actions such as switching between different sections of the application, logging out, and viewing the profile. The controller uses FXML to load user interface elements from XML files and interacts with them through method calls. The code also references various packages including com.esprit, javafx, and resource bundles.",
        "items": [
          {
            "id": "b828d62d-2f8d-6987-6342-d42794304a3f",
            "ancestors": [],
            "type": "function",
            "description": "Manages the navigation between different views in an application for an administrator. It provides buttons to switch between views such as users, events, movies, products, series, cinema, and profile. The controller also includes a web view and handles the login and logout functionality.",
            "name": "AdminSideBarController",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 261,
            "docLength": null
          },
          {
            "id": "7077352f-6c9c-3bb0-0f46-ebb2eefe56f9",
            "ancestors": [
              "b828d62d-2f8d-6987-6342-d42794304a3f"
            ],
            "type": "function",
            "description": "Is called when an action event occurs, indicating a change in the state of the application. It performs no additional actions and does not modify any variables.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "occurrence of an action that triggered the `switchToEvent` method to be called.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid switchToEvent(ActionEvent event) {\n    // do something\n}\n\n// in another class or controller\nButton button = new Button();\nbutton.setOnAction((event) -> switchToEvent(event));\n",
              "description": ""
            },
            "name": "switchToEvent",
            "location": {
              "start": 87,
              "insert": 81,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 80,
                "end": 85
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 5
          },
          {
            "id": "52bbbdc8-3978-d58f-a047-c918825ead31",
            "ancestors": [
              "b828d62d-2f8d-6987-6342-d42794304a3f"
            ],
            "type": "function",
            "description": "Loads an fxml file named `ListeCommande.fxml` and sets the stage scene to display its root element.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "triggered action that initiated the code execution in the `switchToMovies()` method.\n\n* Event type: `ActionEvent`\n* Target: `movieButton` (a button object)",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void switchToMovies(ActionEvent event) {\n        try {\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/ListeCommande.fxml\"));\n            // FilmController seanceController = loader.getController();\n            // seanceController.setData(admin);\n            Parent root = loader.load();\n            Stage stage = (Stage) movieButton.getScene().getWindow();\n            stage.setScene(new Scene(root));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n",
              "description": ""
            },
            "name": "switchToMovies",
            "location": {
              "start": 105,
              "insert": 99,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 98,
                "end": 103
              }
            },
            "item_type": "method",
            "length": 25,
            "docLength": 5
          },
          {
            "id": "4f8ceb05-3d63-d9bb-0c48-b9305a6557c1",
            "ancestors": [
              "b828d62d-2f8d-6987-6342-d42794304a3f"
            ],
            "type": "function",
            "description": "Loads an FXML file and sets the stage scene to display the contents of the file.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "click event of a button, which triggers the execution of the `switchToProducts()` method.\n\nEvent: An event object representing a button press.\n\nProperties:\n\n* `getSource()`: Returns the source of the event (in this case, the `ProductButton`).\n* `getButton()`: Returns the button that was pressed (e.g., \"Product\").",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void switchToProducts(ActionEvent event) {\n    try {\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/DesignProduitAdmin.fxml\"));\n        Parent root = loader.load();\n        Stage stage = (Stage) productButton.getScene().getWindow();\n        stage.setScene(new Scene(root));\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n",
              "description": ""
            },
            "name": "switchToProducts",
            "location": {
              "start": 133,
              "insert": 133,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "57e426ba-5067-6990-6b4e-5f0062b2359d",
            "ancestors": [
              "b828d62d-2f8d-6987-6342-d42794304a3f"
            ],
            "type": "function",
            "description": "Loads a FXML file named \"Categorie-view.fxml\" into a Stage using the `FXMLLoader`. It sets the data for the controller and then sets the scene of the Stage to the loaded root node.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "click event of the `switchToSeries` button, triggering the execution of the code inside the function.\n\n* `event`: An `ActionEvent` object representing a user-initiated action.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\npublic void switchToSeries(ActionEvent event) {\n    try {\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/Categorie-view.fxml\"));\n        // SerieClientController seanceController = loader.getController();\n        // seanceController.setData(admin);\n        Parent root = loader.load();\n        Stage stage = (Stage) serieButton.getScene().getWindow();\n        stage.setScene(new Scene(root));\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n",
              "description": "\nHere, the method switchToSeries is called when the user clicks on the \"series\" button in the sidebar. The method first loads a FXML file using the getClass().getResource(\"/Categorie-view.fxml\") method and creates an FXMLLoader object to load the file. It then sets the controller for the loaded file to the current instance of AdminSideBarController, which is done by calling the setData(admin) method on the seanceController object. The method then loads the FXML file using the load() method of the FXMLLoader object and creates a new scene from the root node of the FXML file. Finally, the method sets this scene as the current scene for the window associated with the button that was clicked."
            },
            "name": "switchToSeries",
            "location": {
              "start": 161,
              "insert": 161,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "0b3697a9-6127-6c8f-7841-54f64ef2c4d0",
            "ancestors": [
              "b828d62d-2f8d-6987-6342-d42794304a3f"
            ],
            "type": "function",
            "description": "Loads a new FXML file `DashboardAdminCinema.fxml` when the `cinemaButton` is clicked. It creates a new stage and sets its scene to the loaded root element.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "click event on the cinema button that triggered the function execution.\n\n* `event`: An `ActionEvent` object representing the user's action of switching to the cinema view.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid switchtcinema(ActionEvent event) {\n    try {\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/DashboardAdminCinema.fxml\"));\n        Parent root = loader.load();\n        Stage stage = (Stage) cinemaButton.getScene().getWindow();\n        stage.setScene(new Scene(root));\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n",
              "description": ""
            },
            "name": "switchtcinema",
            "location": {
              "start": 189,
              "insert": 189,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "5b9c0527-fc95-448c-8a45-3a438082ad8b",
            "ancestors": [
              "b828d62d-2f8d-6987-6342-d42794304a3f"
            ],
            "type": "function",
            "description": "Loads a new user interface using the FXMLLoader and replaces the existing stage with the new scene.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "user action that triggered the call to the `switchToUsers()` method.\n\n* Event type: ActionEvent",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    public void initialize() {\n        // This method is called by the FXMLLoader when initialization is complete\n        System.out.println(\"Initialized\");\n    }\n\n    @FXML\n    private void handleButtonAction(ActionEvent event) {\n        // This method is called by the FXMLLoader when a button is clicked\n        System.out.println(\"Button was clicked!\");\n    }\n\n    @FXML\n    public void switchToUsers(ActionEvent event) {\n        try {\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/AdminDashboard.fxml\"));\n            Parent root = loader.load();\n            Stage stage = (Stage) usersButton.getScene().getWindow();\n            stage.setScene(new Scene(root));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
              "description": "\nIn the above code, the method switchToUsers is called when a button is clicked in the AdminSideBarController. This method creates an FXMLLoader instance and loads the AdminDashboard.fxml file which contains the AdminDashboard UI. Then it gets the window of the current stage and sets it to the new scene containing the AdminDashboard UI."
            },
            "name": "switchToUsers",
            "location": {
              "start": 213,
              "insert": 213,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "c0379a78-a705-eebd-6846-d62b2de61fca",
            "ancestors": [
              "b828d62d-2f8d-6987-6342-d42794304a3f"
            ],
            "type": "function",
            "description": "Is called when an instance of a class is created and initializes some resources.",
            "params": [
              {
                "name": "location",
                "type_name": "URL",
                "description": "URL of the application's resource bundle, which is used to load the appropriate resources for the application.",
                "complex_type": false
              },
              {
                "name": "resources",
                "type_name": "ResourceBundle",
                "description": "resource bundle for the current application.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\n    public void initialize(URL location, ResourceBundle resources) {\n        super.initialize(location, resources);\n    }\n",
              "description": ""
            },
            "name": "initialize",
            "location": {
              "start": 237,
              "insert": 237,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "0c5dbf45-7c8e-109a-3443-e3e130025d80",
            "ancestors": [
              "b828d62d-2f8d-6987-6342-d42794304a3f"
            ],
            "type": "function",
            "description": "Loads a new scene with a FXML file when the logout button is clicked, replacing the current stage's scene with the new one.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "click event on the logout button that triggers the function execution.\n\n* Event type: `ActionEvent`, indicating that the event was triggered by a user action.\n* Target object: `logoutButton`, indicating the button that was clicked to trigger the event.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "// Create the button for logging out\nButton logoutButton = new Button(\"Logout\");\nlogoutButton.setOnAction(new EventHandler<ActionEvent>() {\n    @Override\n    public void handle(ActionEvent event) {\n        switchToLogout(event);\n    }\n});\n",
              "description": "\nThis example creates a button with the text \"Logout\" and sets an action handler to the method `switchToLogout`. When the user clicks on the button, the `handle` method of the event handler will be called and it will call the method `switchToLogout` by passing in the `ActionEvent` object."
            },
            "name": "switchToLogout",
            "location": {
              "start": 245,
              "insert": 245,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "24feba16-6804-e9b8-aa4e-313bda79c8d5",
            "ancestors": [
              "b828d62d-2f8d-6987-6342-d42794304a3f"
            ],
            "type": "function",
            "description": "Loads and displays the `Profile.fxml` stage when the `profileButton` is clicked.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "mouse click event that triggered the function execution.\n\n* `event`: An `ActionEvent` object representing the user's action of clicking on the \"Switch to Profile\" button.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    void switchToProfile(ActionEvent event) {\n\n        try {\n\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/Profile.fxml\"));\n\n            Parent root = loader.load();\n\n            Stage stage = (Stage) profileButton.getScene().getWindow();\n\n            stage.setScene(new Scene(root));\n\n        } catch (Exception e) {\n\n            e.printStackTrace();\n\n        }\n\n    }\n",
              "description": ""
            },
            "name": "switchToProfile",
            "location": {
              "start": 271,
              "insert": 271,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "ClientSideBarController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/ClientSideBarController.java",
    "content": {
      "structured": {
        "description": "A controller class called ClientSideBarController that handles user actions on a JavaFX application's client-side bar. The class includes buttons for different features like cinema, events, movies, products, and series, each of which triggers a different FXML file load when clicked. The controller also includes a logout and profile button, which respectively navigate to the login page and the user profile page when clicked.",
        "items": [
          {
            "id": "931f92dc-3f37-15aa-0943-8267343364e4",
            "ancestors": [],
            "type": "function",
            "description": "Is responsible for handling button clicks and navigating between different views in a client-side application. It provides methods for switching to various sections such as events, movies, products, series, cinema, logout, and profile. The class also initializes the application's user data.",
            "name": "ClientSideBarController",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 223,
            "docLength": null
          },
          {
            "id": "a462ac21-5c3e-86b7-a44b-af11c271d359",
            "ancestors": [
              "931f92dc-3f37-15aa-0943-8267343364e4"
            ],
            "type": "function",
            "description": "Handles an `ActionEvent` and performs a specific action based on the event type.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the function execution, providing the necessary information for the function to perform its intended action.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class ExampleClass {\n    public static void main(String[] args) {\n        // create a new instance of the ClientSideBarController class\n        ClientSideBarController clientSideBarController = new ClientSideBarController();\n        \n        // create an ActionEvent object to pass into the method\n        ActionEvent event = new ActionEvent();\n        \n        // call the switchToEvent method with the created ActionEvent as a parameter\n        clientSideBarController.switchToEvent(event);\n    }\n}\n",
              "description": ""
            },
            "name": "switchToEvent",
            "location": {
              "start": 71,
              "insert": 65,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 64,
                "end": 69
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 5
          },
          {
            "id": "9ee56118-7c8c-4ba4-604b-2ce99a976db9",
            "ancestors": [
              "931f92dc-3f37-15aa-0943-8267343364e4"
            ],
            "type": "function",
            "description": "Loads a new FXML file \"filmuser.fxml\" into the stage using the `FXMLLoader` class, replacing the current scene with the newly loaded one.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "user's action that triggered the function, and it is of type `ActionEvent`.\n\n* It is an `ActionEvent`, indicating that the event occurred due to user action.\n* The event target is the `movieButton`, indicating the button that was clicked.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid switchToMovies(ActionEvent event) {\n    // Create a new FXMLLoader instance\n    FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/filmuser.fxml\"));\n    \n    // Load the FXML file and create a new scene with it\n    Parent root = loader.load();\n    Stage stage = (Stage) movieButton.getScene().getWindow();\n    stage.setScene(new Scene(root));\n}\n",
              "description": "\nIn this example, the switchToMovies method is called when the user clicks on the movie button. The method creates a new FXMLLoader instance and loads the filmuser.fxml file using the getClass().getResource() method to retrieve the resource path of the file. Once loaded, the method creates a new scene with the root node of the FXML file and sets it as the current scene for the stage that the movie button is in."
            },
            "name": "switchToMovies",
            "location": {
              "start": 89,
              "insert": 83,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 82,
                "end": 87
              }
            },
            "item_type": "method",
            "length": 23,
            "docLength": 5
          },
          {
            "id": "781ee351-d8f2-b584-9441-2a6ba0efd8fa",
            "ancestors": [
              "931f92dc-3f37-15aa-0943-8267343364e4"
            ],
            "type": "function",
            "description": "Loads an FXML file named `AfficherProduitClient.fxml`, and sets the scene of a Stage to the loaded root element, replacing the previous content.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "occurrence of a button press, which triggers the execution of the `switchToProducts()` method.\n\nEvent: An action event that triggered the function execution.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.event.ActionEvent;\nimport javafx.scene.control.Button;\nimport javafx.stage.Stage;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a new button instance\n        Button productButton = new Button(\"Product\");\n        \n        // Create a new stage instance\n        Stage stage = new Stage();\n        \n        // Set the button's action event to switchToProducts method\n        productButton.setOnAction(event -> switchToProducts(stage));\n    }\n    \n    private static void switchToProducts(Stage stage) {\n        try {\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/AfficherProduitClient.fxml\"));\n            Parent root = loader.load();\n            stage.setScene(new Scene(root));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
              "description": ""
            },
            "name": "switchToProducts",
            "location": {
              "start": 115,
              "insert": 115,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "f7a42e37-48b9-6ca4-df4d-69e1f72780a6",
            "ancestors": [
              "931f92dc-3f37-15aa-0943-8267343364e4"
            ],
            "type": "function",
            "description": "Loads a new FXML file \"SeriesClient.fxml\" when the \" serieButton\" action is triggered, replacing the current stage with a new scene containing the loaded root node.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "`ActionEvent` that triggered the `switchToSeries()` method, providing the source of the event that initiated the method's execution.\n\n* Type: `ActionEvent` (represents an action event occurring on a JavaFX component)\n* Source: Reference to the component that generated the event (usually a button or menu item)",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid switchToSeries(ActionEvent event) {\n    try {\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/SeriesClient.fxml\"));\n        Parent root = loader.load();\n        Stage stage = (Stage) serieButton.getScene().getWindow();\n        System.out.println(\"---------\" + stage.getUserData());\n        stage.setScene(new Scene(root));\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n",
              "description": "\nIn this example, the method switchToSeries is invoked by clicking on a button in a JavaFX application, which triggers an ActionEvent. The method then uses the FXMLLoader to load the fxml file for SeriesClient, creates a parent node from the root of the loaded fxml file, and sets the scene of the stage associated with the clicked button to a new Scene containing the root node. Additionally, it prints out the user data stored in the Stage object that is associated with the scene, which contains the logged-in username or other relevant information for the client."
            },
            "name": "switchToSeries",
            "location": {
              "start": 141,
              "insert": 141,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "1ac658f6-8fd5-809f-634d-430777ede42e",
            "ancestors": [
              "931f92dc-3f37-15aa-0943-8267343364e4"
            ],
            "type": "function",
            "description": "Loads a new scene from an FXML file when the \"Cinema\" button is clicked.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the `switchtcinema` function, which is an ActionEvent in this case.\n\n* `event`: an `ActionEvent` object representing a user-initiated event.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void switchtcinema(ActionEvent event) {\n        try {\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/DashboardClientCinema.fxml\"));\n            Parent root = loader.load();\n            Stage stage = (Stage) cinemaButton.getScene().getWindow();\n            System.out.println(\"---------\" + stage.getUserData());\n            stage.setScene(new Scene(root));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n",
              "description": "\nThe method switchtcinema is called with an 'ActionEvent' object when the user clicks on a button that corresponds to this method in the client-side navigation bar. The method first creates a new FXMLLoader object with the resource path \"/DashboardClientCinema.fxml\". It then loads the FXML file using the load() method of the FXMLLoader object, which returns a Parent node containing the root element of the FXML document.\nThe method next retrieves the Stage object associated with the button that triggered the event using the getScene().getWindow() method and stores it in a variable called stage. It then sets the scene of the stage to a new Scene object created from the root node of the FXML file, which displays the contents of the DashboardClientCinema.fxml view."
            },
            "name": "switchtcinema",
            "location": {
              "start": 167,
              "insert": 167,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "55a1496e-5464-2d8c-5e40-e9fb0ce2fd8f",
            "ancestors": [
              "931f92dc-3f37-15aa-0943-8267343364e4"
            ],
            "type": "function",
            "description": "Loads a new FXML file, replaces the current stage's scene with it, and sets the stage's user data to null.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "click event on the logout button that triggered the function execution.\n\n* `event`: An instance of the `ActionEvent` class, representing a user action (such as button press) that triggered the function execution.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid switchToLogout(ActionEvent event) {\n    try {\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/Login.fxml\"));\n        Parent root = loader.load();\n        Stage stage = (Stage) logoutButton.getScene().getWindow();\n        stage.setUserData(null);\n        stage.setScene(new Scene(root));\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n",
              "description": ""
            },
            "name": "switchToLogout",
            "location": {
              "start": 193,
              "insert": 193,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "3ee01be1-8d03-c193-dc44-0aa51fd45245",
            "ancestors": [
              "931f92dc-3f37-15aa-0943-8267343364e4"
            ],
            "type": "function",
            "description": "Loads a new scene containing a `Parent` element with the FXML file `\"Profile.fxml\"` when the `profileButton` is clicked.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "click event that triggered the function execution.\n\n* Event type: `ActionEvent` indicating that the event was triggered by a user action on the associated control (in this case, the `profileButton`).",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.event.ActionEvent;\n\npublic class ClientSideBarController {\n    @FXML\n    private Button profileButton;\n\n    public void initialize() {\n        // This method will be called after the controller has been created. \n    }\n\n    @FXML\n    public void switchToProfile(ActionEvent event) {\n        try {\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/Profile.fxml\"));\n            Parent root = loader.load();\n            Stage stage = (Stage) profileButton.getScene().getWindow();\n            stage.setScene(new Scene(root));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
              "description": "\nIn this example, we define a button with an id of \"profileButton\" in the fxml file. We then use the @FXML annotation to mark the switchToProfile method as being connected to that button. When the button is clicked, it will call the switchToProfile method and open the Profile.fxml scene."
            },
            "name": "switchToProfile",
            "location": {
              "start": 219,
              "insert": 219,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "d4485920-aea6-b2b1-e048-62269f52e8e9",
            "ancestors": [
              "931f92dc-3f37-15aa-0943-8267343364e4"
            ],
            "type": "function",
            "description": "Is called when an instance of a class is created and initializes the object's state by calling its superclass's `initialize` method and performing any additional initialization logic specified in the method body.",
            "params": [
              {
                "name": "location",
                "type_name": "URL",
                "description": "URL of the web application's root directory.",
                "complex_type": false
              },
              {
                "name": "resources",
                "type_name": "ResourceBundle",
                "description": "resource bundle for the application, providing localized strings and other resources for the user interface and functionality.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\npublic void initialize(URL location, ResourceBundle resources) {\n\t// set the user as the current user\n    UserService.setCurrentUser(new User(\"username\", \"password\"));\n}\n",
              "description": ""
            },
            "name": "initialize",
            "location": {
              "start": 243,
              "insert": 243,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "ResponsableDeCinemaSideBarController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/ResponsableDeCinemaSideBarController.java",
    "content": {
      "structured": {
        "description": "A controller class responsible for handling user actions in a movie theater management application. The ResponsableDeCinemaSideBarController handles events from various buttons representing different cinema-related functions such as switching to actor, film categories, and seances. The controller also sets data for the responsable de cinema object and initializes FXML Loader.",
        "items": [
          {
            "id": "76ca71a0-a19e-4ca9-e040-65c2234068ec",
            "ancestors": [],
            "type": "function",
            "description": "Is responsible for managing the navigation between different views in a cinema management application. It provides buttons for switching between different categories of films, seances, and statistics, as well as a logout button. The controller also sets data for the current user and handles actions such as switching to profiles or films.",
            "name": "ResponsableDeCinemaSideBarController",
            "location": {
              "start": 41,
              "insert": 41,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 285,
            "docLength": null
          },
          {
            "id": "2ad96b8e-708c-93b4-7246-46c456f6be34",
            "ancestors": [
              "76ca71a0-a19e-4ca9-e040-65c2234068ec"
            ],
            "type": "function",
            "description": "Loads and displays an actor's interface using the `FXMLLoader` class, passing in a reference to the actor's data as an argument.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "user's action of clicking on the button that triggers the function.\n\n* `event`: An `ActionEvent` object representing a user interaction with the stage button.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    void switchToActor(ActionEvent event) {\n\n        try {\n\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/InterfaceActor.fxml\"));\n\n            ActorController seanceController = loader.getController();\n\n            // seanceController.setData(resp);\n\n            Parent root = loader.load();\n\n            Stage stage = (Stage) actorButton.getScene().getWindow();\n\n            stage.setScene(new Scene(root));\n\n        } catch (Exception e) {\n\n            e.printStackTrace();\n\n        }\n\n    }\n",
              "description": "\nThe method switchToActor is an ActionEvent handler method that loads the actor scene using FXMLLoader and sets the controller's data using the setData() method of Responsible_Cinema class. After loading, it creates a new scene with the root element and sets it to the window's current stage object."
            },
            "name": "switchToActor",
            "location": {
              "start": 91,
              "insert": 85,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 84,
                "end": 89
              }
            },
            "item_type": "method",
            "length": 25,
            "docLength": 5
          },
          {
            "id": "63039549-c4cc-d391-b24a-34ce423ee8e9",
            "ancestors": [
              "76ca71a0-a19e-4ca9-e040-65c2234068ec"
            ],
            "type": "function",
            "description": "Loads an FXML file named \"statistiques.fxml\" using the `FXMLLoader` class, creates a new controller instance from the loaded file, and sets the scene of a stage to display the loaded content.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event of a button click that triggered the function execution.\n\n* Event is an ActionEvent object, representing a user action related to the stage or window where the function is called.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid switchstatestique(ActionEvent event) {\n    try {\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/statistiques.fxml\"));\n        CinemaStatisticsController seanceController = loader.getController();\n        // seanceController.setData(resp);\n        Parent root = loader.load();\n        Stage stage = (Stage) statestique_button.getScene().getWindow();\n        stage.setScene(new Scene(root));\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n",
              "description": ""
            },
            "name": "switchstatestique",
            "location": {
              "start": 127,
              "insert": 121,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 120,
                "end": 125
              }
            },
            "item_type": "method",
            "length": 25,
            "docLength": 5
          },
          {
            "id": "66dfae8f-4eee-0fbc-b042-2395b4e80021",
            "ancestors": [
              "76ca71a0-a19e-4ca9-e040-65c2234068ec"
            ],
            "type": "function",
            "description": "Loads and displays a FXML file named \"DashboardResponsableCinema.fxml\" in a JavaFX stage, replacing the existing content.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "click event on the cinema button that triggered the function execution.\n\nEvent: An ActionEvent object representing a button press.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void switchToCinema(ActionEvent event) throws IOException {\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/DashboardResponsableCinema.fxml\"));\n        Parent root = loader.load();\n        Stage stage = (Stage) cinemaButton.getScene().getWindow();\n        stage.setScene(new Scene(root));\n    }\n",
              "description": "\nIn this example, the method switchToCinema is called when a user clicks on the cinema button. The method first creates a new FXMLLoader object and loads the DashboardResponsableCinema.fxml file using the getResource() method. Then, it sets the parent root to the newly loaded fxml file and gets the stage from the scene window of the cinemaButton. Afterwards, the method creates a new Scene instance with the parent root and sets it as the stage's scene.\nThe method throws an IOException if any error occurs while loading the fxml file."
            },
            "name": "switchToCinema",
            "location": {
              "start": 155,
              "insert": 155,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "13e0a989-4229-abaf-4149-af6189885add",
            "ancestors": [
              "76ca71a0-a19e-4ca9-e040-65c2234068ec"
            ],
            "type": "function",
            "description": "Loads an FXML file and displays its contents on a stage, replacing the current scene.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "clicked button that triggered the function call.\n\nEvent: An action event object representing the user's interaction with the button.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.event.ActionEvent;\n\npublic class Main {\n    @FXML\n    void handleButtonAction(ActionEvent event) {\n        // This line calls the switchToFilmCategorie method when clicked on the button\n        switchToFilmCategorie(event);\n    }\n}\n",
              "description": ""
            },
            "name": "switchToFilmCategorie",
            "location": {
              "start": 175,
              "insert": 175,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "90f5abb2-9e3f-7eae-bb44-0846edd4e0de",
            "ancestors": [
              "76ca71a0-a19e-4ca9-e040-65c2234068ec"
            ],
            "type": "function",
            "description": "Loads an FXML file and creates a new scene in a Stage using the FXMLLoader class.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "click event that triggered the `switchToMovies()` method to be executed.\n\n* Event type: `ActionEvent` indicating a user action on the movie button\n* Target object: `movieButton` providing the context of the event",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void switchToMovies(ActionEvent event) {\n    try {\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/InterfaceFilm.fxml\"));\n        FilmController seanceController = loader.getController();\n        // seanceController.setData(resp);\n        Parent root = loader.load();\n        Stage stage = (Stage) movieButton.getScene().getWindow();\n        stage.setScene(new Scene(root));\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n",
              "description": "\nThis method switches to the Movies view when an ActionEvent is triggered by clicking on the button that corresponds to this method in the FXML file. The method first creates a new FXMLLoader instance with the location of the InterfaceFilm.fxml file, and then loads the root of the FXML file using the load() method. It then retrieves the controller of the loaded FXML file using the getController() method and sets data to it (if necessary). Finally, it creates a new Scene instance with the root as its root, and assigns it to the Stage instance associated with the button's scene."
            },
            "name": "switchToMovies",
            "location": {
              "start": 203,
              "insert": 203,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "650e8315-baee-2aa9-8846-afd2d033e30f",
            "ancestors": [
              "76ca71a0-a19e-4ca9-e040-65c2234068ec"
            ],
            "type": "function",
            "description": "Loads and displays a new FXML document when the \"Seance\" button is clicked, using the `FXMLLoader` class and the `Stage` class to switch between scenes.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "occurrence of a button press event that triggers the function to switch to the `DashboardResponsableCinema.fxml` scene.\n\n* `event`: An `ActionEvent` object representing the user's action that triggered the function.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    void handleButtonAction(ActionEvent event) {\n\n        switchToSeances(event);\n\n    }\n",
              "description": "\nIn this case, the user has clicked a button in the GUI and the handleButtonAction() method is called. The switchToSeances() method is then called with an ActionEvent as input which loads the FXML file \"DashboardResponsableCinema.fxml\" into the stage associated with the current scene, sets a new Scene to the stage, and displays it."
            },
            "name": "switchToSeances",
            "location": {
              "start": 231,
              "insert": 231,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "8c252ae9-9f58-4f9b-a043-528ceeb41299",
            "ancestors": [
              "76ca71a0-a19e-4ca9-e040-65c2234068ec"
            ],
            "type": "function",
            "description": "Sets the value of the `resp` field to a provided `Responsable_de_cinema` object.",
            "params": [
              {
                "name": "resp",
                "type_name": "Responsable_de_cinema",
                "description": "Responsable_de_cinema object that will store the data.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Responsable_de_cinema resp = new Responsable_de_cinema();\n\n// Create a new instance of the class \"Responsable_de_cinema\" and assign it to variable \"resp\". \n\nsetData(resp); \n\n// Call method setData with parameter \"resp\", which is an instance of type Responsable_de_cinema. \n",
              "description": ""
            },
            "name": "setData",
            "location": {
              "start": 255,
              "insert": 255,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "48c70354-a328-a7af-134b-d3cf1536d941",
            "ancestors": [
              "76ca71a0-a19e-4ca9-e040-65c2234068ec"
            ],
            "type": "function",
            "description": "Is called when the application starts and initializes its resources by taking a URL and resource bundle as arguments.",
            "params": [
              {
                "name": "location",
                "type_name": "URL",
                "description": "URL of the initial resource to be processed by the function.",
                "complex_type": false
              },
              {
                "name": "resources",
                "type_name": "ResourceBundle",
                "description": "resource bundle for the application, providing localized strings and formatting data to the initialize method.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "import java.net.URL;\nimport java.util.ResourceBundle;\n\npublic class TestClass {\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        // This code runs when the application starts up.\n    }\n}\n",
              "description": ""
            },
            "name": "initialize",
            "location": {
              "start": 263,
              "insert": 263,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "299346af-da5a-21b2-df4a-922ca24ddd50",
            "ancestors": [
              "76ca71a0-a19e-4ca9-e040-65c2234068ec"
            ],
            "type": "function",
            "description": "Loads a new FXML file `/Login.fxml` when the logout button is clicked, replacing the current scene with a new one containing the loaded stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event of button click, which triggers the function to switch to the login screen.\n\n* `event`: an `ActionEvent` object representing a user action on the logout button.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.event.ActionEvent;\n\npublic class Example {\n    @FXML\n    private Button logoutButton;\n\n    public void handleLogout(ActionEvent event) {\n        switchToLogout(event);\n    }\n}\n",
              "description": ""
            },
            "name": "switchToLogout",
            "location": {
              "start": 273,
              "insert": 273,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "bd754b01-f0c8-0f92-6341-84cca836872b",
            "ancestors": [
              "76ca71a0-a19e-4ca9-e040-65c2234068ec"
            ],
            "type": "function",
            "description": "Loads a new FXML file, replacing the current scene with the new one.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "occurrence of a button press event that triggers the execution of the `switchToProfile()` method.\n\n* `event`: An `ActionEvent` object representing the user's action of pressing the profile button.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "// Import the FXMLLoader class to use its load() method\nimport javafx.fxml.FXMLLoader;\n\n// Create a new instance of the ProfileController class\nProfileController profileController = new ProfileController();\n\n// Load the fxml file using the FXMLLoader and set it as the root node\nParent rootNode = FXMLLoader.load(getClass().getResource(\"/profile.fxml\"));\n\n// Create a new stage instance to display the loaded fxml file\nStage stage = new Stage();\nstage.setTitle(\"Profile\");\n\n// Set the scene of the stage to the one created from the root node\nScene scene = new Scene(rootNode);\n\n// Set the profileController as the controller of the scene\nscene.setRoot(profileController);\n\n// Display the stage and set it as the current stage\nstage.show();\n",
              "description": "\nThe above example is a simple demonstration of how to use the switchToProfile method. Note that this method requires an instance of the ProfileController class, which is typically created by loading the fxml file associated with the profile scene using the FXMLLoader class' load() method."
            },
            "name": "switchToProfile",
            "location": {
              "start": 299,
              "insert": 299,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "CinemaStatisticsController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/cinemas/CinemaStatisticsController.java",
    "content": {
      "structured": {
        "description": "A `CinemaStatisticsController` class that handles user input and displays statistical information about cinema sentiment using a PieChart. The controller uses a `CommentaireCinemaService` and a `CinemaService` to retrieve comments and cinema data, respectively. The code then generates sentiment statistics for each cinema and displays them in a PieChart.",
        "items": [
          {
            "id": "ee4f0c38-fde8-f4bb-7443-1f48b2ff883a",
            "ancestors": [],
            "type": "function",
            "description": "Is responsible for generating and displaying sentiment statistics for various cinemas based on user comments. It retrieves movie commentary data from a service, generates sentiment statistics for each cinema using the comments, and creates PieCharts to visualize the statistics. The controller also displays the generated PieCharts in an AnchorPane.",
            "name": "CinemaStatisticsController",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 153,
            "docLength": null
          },
          {
            "id": "2e79fc4f-25b0-c1b7-7444-0e530df96f10",
            "ancestors": [
              "ee4f0c38-fde8-f4bb-7443-1f48b2ff883a"
            ],
            "type": "function",
            "description": "Clears an existing children container, retrieves comments from a database, generates sentiment statistics for each cinema, and displays the statistics as PieCharts within a new container added to the parent AnchorPane.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent triggered by the button click that initiates the code execution and calls the `showStatistics()` method.\n\n* `event`: an instance of `ActionEvent`, representing a user-generated event",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid showStatistics(ActionEvent event) {\n    StatisticsAnchor.getChildren().clear();\n    \n    // Récupérer les commentaires de la base de données\n    List<CommentaireCinema> comments = commentaireCinemaService.read();\n    \n    // Générer les statistiques sur l'analyse de sentiment\n    Map<String, Map<String, Integer>> cinemaSentimentStatistics = generateSentimentStatistics(comments);\n    \n    // Créer un VBox pour contenir les PieCharts\n    VBox chartContainer = new VBox();\n    chartContainer.setSpacing(20);\n    \n    // Afficher les statistiques dans des PieCharts\n    for (Map.Entry<String, Map<String, Integer>> entry : cinemaSentimentStatistics.entrySet()) {\n        PieChart pieChart = createPieChart(entry.getKey(), entry.getValue());\n        chartContainer.getChildren().add(pieChart);\n    }\n    \n    // Ajouter le VBox à l'AnchorPane\n    StatisticsAnchor.getChildren().add(chartContainer);\n}\n",
              "description": ""
            },
            "name": "showStatistics",
            "location": {
              "start": 57,
              "insert": 51,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 50,
                "end": 55
              }
            },
            "item_type": "method",
            "length": 45,
            "docLength": 5
          },
          {
            "id": "371fcc46-5f78-34aa-5847-babbde3264ea",
            "ancestors": [
              "ee4f0c38-fde8-f4bb-7443-1f48b2ff883a"
            ],
            "type": "function",
            "description": "Generates a map of sentiment statistics for each cinema based on a list of comments, where each comment is associated with a cinema and a sentiment label. The function counts the number of comments with each sentiment and stores it in the map for that cinema.",
            "params": [
              {
                "name": "comments",
                "type_name": "List<CommentaireCinema>",
                "description": "list of comments that will be processed to generate sentiment statistics for each cinema.\n\n* It is a list of `CommentaireCinema` objects, representing user comments on cinema movies.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HashMap",
              "description": "a map of cinema names to sentiment statistics, where each cinema's sentiment is counted and stored as an integer value.\n\n* The output is a map of cinema names to maps of sentiment names to integer counts of the number of comments expressing that sentiment for each cinema.\n* Each cinema name in the outer map corresponds to a map of sentiment names in the inner map, indicating the number of comments expressing that sentiment for that cinema.\n* The maps are keyed by sentiment name and contain integer values representing the count of comments expressing that sentiment for each cinema.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        List<CommentaireCinema> comments = new ArrayList<>(); // This list of comments will contain 5 comments.\n        CommentaireCinema comment1 = new CommentaireCinema();\n        comment1.setSentiment(\"Positive\");\n        CommentaireCinema comment2 = new CommentaireCinema();\n        comment2.setSentiment(\"Negative\");\n        CommentaireCinema comment3 = new CommentaireCinema();\n        comment3.setSentiment(\"Neutral\");\n        CommentaireCinema comment4 = new CommentaireCinema();\n        comment4.setSentiment(\"Positive\");\n        CommentaireCinema comment5 = new CommentaireCinema();\n        comment5.setSentiment(\"Negative\");\n        comments.add(comment1);\n        comments.add(comment2);\n        comments.add(comment3);\n        comments.add(comment4);\n        comments.add(comment5);\n\n        // The method generateSentimentStatistics is called and passed the 'comments' list as an argument.\n        Map<String, Map<String, Integer>> cinemaSentimentStatistics = generateSentimentStatistics(comments);\n        System.out.println(\"CinemaSentimentStatistics: \" + cinemaSentimentStatistics);\n    }\n}\n",
              "description": ""
            },
            "name": "generateSentimentStatistics",
            "location": {
              "start": 117,
              "insert": 117,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 41,
            "docLength": null
          },
          {
            "id": "1bc06c19-f7c7-caaf-8e4f-29959688b39d",
            "ancestors": [
              "ee4f0c38-fde8-f4bb-7443-1f48b2ff883a"
            ],
            "type": "function",
            "description": "Creates a PieChart object and sets its title based on a cinema name and sentiment statistics map. It then adds the chart data based on the map entries.",
            "params": [
              {
                "name": "cinemaName",
                "type_name": "String",
                "description": "name of the cinema for which sentiment statistics are being generated and displayed in the PieChart.",
                "complex_type": false
              },
              {
                "name": "sentimentStatistics",
                "type_name": "Map<String, Integer>",
                "description": "sentiment statistics of a cinema, which is used to generate a pie chart displaying the distribution of sentiment scores for that cinema.\n\n* `Map<String, Integer>`: This map contains sentiment statistics for different cinema names, where each key represents a cinema name and the value represents the number of reviews with a positive sentiment towards that cinema.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "PieChart",
              "description": "a pie chart representing the sentiment statistics of a given cinema.\n\n1. Title: The title of the PieChart is set to the cinema name followed by \" Sentiment Statistics\".\n2. Data: The function adds the sentiment statistics data to the PieChart's data list. Each entry in the data list consists of a category (key) and the corresponding frequency (value).",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "import javafx.scene.chart.PieChart;\n\n// ...\n\n// Create a PieChart object for the cinema\nPieChart pieChart = new PieChart();\npieChart.setTitle(\"Cinema Sentiment Statistics\");\n\n// Add data to the PieChart\nfor (Map.Entry<String, Integer> entry : sentimentStatistics.entrySet()) {\n    pieChart.getData().add(new PieChart.Data(entry.getKey(), entry.getValue()));\n}\n",
              "description": ""
            },
            "name": "createPieChart",
            "location": {
              "start": 163,
              "insert": 163,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "DashboardAdminController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/cinemas/DashboardAdminController.java",
    "content": {
      "structured": {
        "description": "An user interface (UI) for a cinema management system using JavaFX. It provides various functionalities such as adding cinemas, addresses, and statuses; filtering cinemas based on selected addresses and/or statuses; displaying events, movies, and series managed by the cinemas; and affording users to manage products. The code uses JavaFX packages and components such as `FXMLLoader`, `Parent`, `Scene`, `Stage`, `ObservableList`, and `Node` to create the UI and handle user interactions.",
        "items": [
          {
            "id": "7ecbb0a5-d576-7f95-1f43-1b6fa206e267",
            "ancestors": [],
            "type": "function",
            "description": "Is responsible for handling user interactions related to admin dashboards for various applications. It provides functionality to filter and display data from the Cinema, Addresses, Statuses, Events, Movies, and Series modules based on user selections. The controller also handles button clicks to display different views for each module.",
            "name": "DashboardAdminController",
            "location": {
              "start": 55,
              "insert": 55,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 665,
            "docLength": null
          },
          {
            "id": "a4fbd2c6-985c-539c-7348-0e96bf8ef17d",
            "ancestors": [
              "7ecbb0a5-d576-7f95-1f43-1b6fa206e267"
            ],
            "type": "function",
            "description": "Configures a table to display cinemas, including their name, address, and responsible person. It also sets up buttons for accepting or refusing cinemas, and a button to show movies.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    private void afficherCinema() {\n\n        afficherCinemas();\n\n    }\n",
              "description": "\nThis code will run the method afficherCinemas, which will display all cinemas that are currently in the database. The method is called when the button \"Afficher Cinemas\" is pressed. This causes a new TableView to be created with columns for the cinema's name, address, and responsible person, as well as buttons for accepting or rejecting requests. The table view is populated with data from the CinemaService class, which fetches all cinemas from the database that have not been accepted yet.\n\nIn this example, I am using a JavaFX FXML file to create a graphical user interface (GUI) for the program. The afficherCinemas method is one of the methods that is called when a button on the GUI is pressed. In this case, it is used to display all cinemas in the database that have not been accepted yet. This allows the user to see which cinemas are requesting access and accept or reject them from a list.\n\nThe method first makes sure that the TableView is visible by setting its visibility property to true. It then configures the columns for the table view, as well as the buttons that will be used for accepting or rejecting requests. The \"Statut\" column is set to show the status of each cinema request (either accepted or pending), and the \"Action\" column is set to display the accept or reject buttons.\n\nFinally, the method loads all cinemas from the database and displays them in the table view."
            },
            "name": "afficherCinemas",
            "location": {
              "start": 107,
              "insert": 107,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 177,
            "docLength": null
          },
          {
            "id": "08f4200c-08c0-c39a-3c4b-b64c50d0f355",
            "ancestors": [
              "7ecbb0a5-d576-7f95-1f43-1b6fa206e267",
              "a4fbd2c6-985c-539c-7348-0e96bf8ef17d"
            ],
            "type": "function",
            "description": "Generates a `TableCell` that displays buttons for accepting or refusing a movie. When a button is pressed, it updates the cinema's status and refreshes the table view to reflect the change.",
            "params": [
              {
                "name": "param",
                "type_name": "TableColumn<Cinema, Void>",
                "description": "`TableColumn<Cinema, Void>` object that triggers the function, providing the necessary information for the cell to render properly.\n\n* `param`: A `TableColumn` object that represents the column being edited.\n* `getIndex()`: Returns the row index of the item being edited in the table.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "TableCellCinema",
              "description": "a `TableCell` object that displays buttons for accepting or refusing movies based on the cinema's status.\n\n* The returned output is an instance of `TableCell`, which represents a cell in a table.\n* The cell contains three buttons: \"Accepter\", \"Refuser\", and \"Show Movies\".\n* The buttons are created using the `Button` class and are added to the cell's graphic using the `setGraphic` method.\n* The `acceptButton`, `refuseButton`, and `showMoviesButton` are private fields in the `TableCell` class that correspond to the buttons added to the cell.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void initialize() {\n    // Bind the items of the TableColumn to a list property in the controller class\n    listCinema.setItems(cinemaList);\n}\n\n// Create a cell factory for the \"Actions\" column\n@Override\npublic TableCell<Cinema, Void> call(TableColumn<Cinema, Void> param) {\n    return new TableCell<Cinema, Void>() {\n        @Override\n        protected void updateItem(Void item, boolean empty) {\n            super.updateItem(item, empty);\n\n            // If the row is not empty, get the cinema associated with it\n            if (!empty) {\n                Cinema cinema = getTableView().getItems().get(getIndex());\n\n                // Create a button to open a new window to display the movies of the cinema\n                Button showMoviesButton = new Button(\"Show Movies\");\n\n                // Set the on action for the button to open the new window\n                showMoviesButton.setOnAction(event -> {\n                    try {\n                        FXMLLoader loader = new FXMLLoader();\n                        Parent root = (Parent) loader.load(getClass().getResource(\"/fxml/MovieList.fxml\").openStream());\n                        MovieListController movieListController = (MovieListController) loader.getController();\n                        movieListController.setCinema(cinema);\n\n                        // Create a new stage and set the scene for the stage to the root node of the fxml file\n                        Stage stage = new Stage();\n                        stage.setScene(new Scene(root));\n\n                        // Set the title of the window\n                        stage.setTitle(\"Movie List\");\n\n                        // Show the stage and wait for it to be closed before returning\n                        stage.showAndWait();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                });\n\n                setGraphic(showMoviesButton);\n            }\n        }\n    };\n}\n",
              "description": ""
            },
            "name": "call",
            "location": {
              "start": 173,
              "insert": 173,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 103,
            "docLength": null
          },
          {
            "id": "08f1f430-cd00-9ea9-a143-3b117288b63e",
            "ancestors": [
              "7ecbb0a5-d576-7f95-1f43-1b6fa206e267",
              "a4fbd2c6-985c-539c-7348-0e96bf8ef17d",
              "08f4200c-08c0-c39a-3c4b-b64c50d0f355"
            ],
            "type": "function",
            "description": "Updates the graphic displayed by an item in a table based on its empty status and the status of the associated cinema.",
            "params": [
              {
                "name": "item",
                "type_name": "Void",
                "description": "item being updated in the `TableView`, which is passed to the superclass's `updateItem` method for further processing before displaying the appropriate button or buttons.\n\n* `item`: A Void object representing an item to be updated.\n* `empty`: A boolean indicating whether the item is empty or not.",
                "complex_type": true
              },
              {
                "name": "empty",
                "type_name": "boolean",
                "description": "whether the line is empty or not, and controls the display of buttons for accepting or refusing the movie.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\n\nprotected void updateItem(Void item, boolean empty) {\n\n    super.updateItem(item, empty);\n\n    if (empty) {\n\n        setGraphic(null);\n\n    } else {\n\n        // Récupérer le cinéma associé à cette ligne\n\n        Cinema cinema = getTableView().getItems().get(getIndex());\n\n        if (cinema.getStatut().equals(\"Accepted\")) {\n\n            // Afficher le bouton \"Show Movies\" si le statut est \"Accepted\"\n\n            setGraphic(showMoviesButton);\n\n        } else {\n\n            // Afficher les boutons \"Accepter\" et \"Refuser\" si le statut est \"En attente\"\n\n            setGraphic(new HBox(acceptButton, refuseButton));\n\n        }\n\n    }\n\n}\n",
              "description": "\nThe method updateItem is called when the item property of a cell changes. This method is responsible for updating the visual representation of the cell with the new value. In this case, we check whether or not the item is empty and if it's not, we get the table view associated with the cell and use its getItems() method to retrieve the cinema object at the index that the cell corresponds to, and then update the graphic property of the cell based on the status of the cinema.\n\nThe method updateItem must be implemented in order to customize the visual representation of cells in a table view."
            },
            "name": "updateItem",
            "location": {
              "start": 239,
              "insert": 239,
              "offset": " ",
              "indent": 20,
              "comment": null
            },
            "item_type": "method",
            "length": 33,
            "docLength": null
          },
          {
            "id": "e1fe99ba-d9c1-b497-f546-8e26b6ba7321",
            "ancestors": [
              "7ecbb0a5-d576-7f95-1f43-1b6fa206e267"
            ],
            "type": "function",
            "description": "Creates an observable list of cinemas by reading them from a service and setting it as the items of a `ListBox`.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class Main extends Application {\n    private final CinemaService cinemaService = new CinemaService();\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n        // Load cinemas from the database and display them in a TableView.\n        loadCinemas();\n\n        Scene scene = new Scene(listCinema);\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n\n    private void loadCinemas() {\n        List<Cinema> cinemas = cinemaService.read();\n\n        ObservableList<Cinema> cinemaObservableList = FXCollections.observableArrayList(cinemas);\n\n        listCinema.setItems(cinemaObservableList);\n    }\n}\n",
              "description": "\nThis is a small and concise example that uses the CinemaService class to read cinemas from the database, then displays them in a TableView called listCinema."
            },
            "name": "loadCinemas",
            "location": {
              "start": 287,
              "insert": 287,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "ccaeab03-3b20-f99a-9a47-d4e07c0ded14",
            "ancestors": [
              "7ecbb0a5-d576-7f95-1f43-1b6fa206e267"
            ],
            "type": "function",
            "description": "Retrieves a list of cinemas through the use of the `CinemaService`. The list is then returned.",
            "params": [],
            "returns": {
              "type_name": "List",
              "description": "a list of Cinema objects retrieved from the Cinema Service.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void filtrercinema(ActionEvent event) {\n    cinemasList.setOpacity(1);\n    FilterAnchor.setVisible(false);\n    \n    // Récupérer les adresses sélectionnées\n    List<String> selectedAddresses = getSelectedAddresses();\n    \n    // Récupérer les statuts sélectionnés\n    List<String> selectedStatuses = getSelectedStatuses();\n    \n    // Filtrer les cinémas en fonction des adresses et/ou des statuts sélectionnés\n    List<Cinema> filteredCinemas = getAllCinemas().stream()\n            .filter(cinema -> selectedAddresses.isEmpty() || selectedAddresses.contains(cinema.getAdresse()))\n            .filter(cinema -> selectedStatuses.isEmpty() || selectedStatuses.contains(cinema.getStatut()))\n            .collect(Collectors.toList());\n    \n    // Mettre à jour le TableView avec les cinémas filtrés\n    ObservableList<Cinema> filteredList = FXCollections.observableArrayList(filteredCinemas);\n    listCinema.setItems(filteredList);\n}\n",
              "description": ""
            },
            "name": "getAllCinemas",
            "location": {
              "start": 313,
              "insert": 307,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 306,
                "end": 311
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 5
          },
          {
            "id": "a8c76f87-f39f-0094-a648-a20484861357",
            "ancestors": [
              "7ecbb0a5-d576-7f95-1f43-1b6fa206e267"
            ],
            "type": "function",
            "description": "Adds a listener to the `tfSearch` text field to filter and update the list of cinemas when the user types in it, loads all cinemas initially, and displays them.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML\npublic void initialize() {\n    // Ajouter un écouteur de changement pour le champ de recherche\n    tfSearch.textProperty().addListener((observable, oldValue, newValue) -> {\n        // Filtrer la liste des cinémas en fonction du nouveau texte saisi dans le champ de recherche\n        filterCinemas(newValue.trim());\n    });\n\n    // Charger tous les cinémas initialement\n    loadCinemas();\n    afficherCinemas();\n}\n",
              "description": "\nExplanation:\n- The method initialize is an event handler for the FXML annotation in this controller class, which is triggered when the FXML file is loaded.\n- In this method, we add a listener to the text property of the tfSearch TextField, which allows us to react to changes in its value and filter the list of cinemas accordingly.\n- We also load all the cinemas initially and display them on the screen.\n- The `tfSearch.textProperty().addListener()` method is used to add a listener to the text property of the tfSearch TextField, which allows us to react to changes in its value and filter the list of cinemas accordingly.\n- We also load all the cinemas initially and display them on the screen."
            },
            "name": "initialize",
            "location": {
              "start": 325,
              "insert": 325,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "136a6534-db57-dbaa-8546-5d788d770683",
            "ancestors": [
              "7ecbb0a5-d576-7f95-1f43-1b6fa206e267"
            ],
            "type": "function",
            "description": "Filters a list of cinemas based on a search query, updating the displayed list in a TableView.",
            "params": [
              {
                "name": "searchText",
                "type_name": "String",
                "description": "search term used to filter the list of cinemas displayed on the screen.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\n\npublic class Main {\n    private void start() {\n        ObservableList<Cinema> cinemas = FXCollections.observableArrayList(\n                new Cinema(\"Le cinema 1\", \"Paris\", \"Pending\"),\n                new Cinema(\"Le cinema 2\", \"Londres\", \"Accepted\"),\n                new Cinema(\"Le cinema 3\", \"New York\", \"Pending\")\n        );\n        \n        // Searching for cinemas with \"Par\" in their name\n        filterCinemas(cinemas, \"Par\");\n    }\n    \n    private void filterCinemas(ObservableList<Cinema> cinemas, String searchText) {\n        ObservableList<Cinema> filteredList = FXCollections.observableArrayList();\n        \n        // Iterate through each cinema in the list and check if it contains the specified text\n        for (Cinema cinema : cinemas) {\n            if (cinema.getNom().toLowerCase().contains(searchText.toLowerCase())) {\n                filteredList.add(cinema);\n            }\n        }\n        \n        // Update the TableView with the list of filtered cinemas\n        listCinema.setItems(filteredList);\n    }\n}\n",
              "description": ""
            },
            "name": "filterCinemas",
            "location": {
              "start": 359,
              "insert": 353,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 352,
                "end": 357
              }
            },
            "item_type": "method",
            "length": 33,
            "docLength": 5
          },
          {
            "id": "35280812-49cc-8da5-4241-701635c39681",
            "ancestors": [
              "7ecbb0a5-d576-7f95-1f43-1b6fa206e267"
            ],
            "type": "function",
            "description": "Updates the opacity of a container and makes a filter anchor visible, then clears the lists of check boxes for addresses and statuses, retrieves unique addresses and statuses from the database, creates VBoxes for each address and status, adds them to the filter anchor, and sets the filter anchor's visibility to true.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent that triggered the filtrer method, providing the necessary information to update the UI components accordingly.\n\n* `event`: an ActionEvent object representing the user's action that triggered the function execution.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void filtrer(ActionEvent event) {\n    // Code to filter the cinemas goes here...\n}\n",
              "description": "\nIn this example, the method filtrer is called when a user presses a button with an ActionEvent as input. Within the method, you can use the same code from the previous lesson to filter the cinemas based on their addresses and/or statuses. The following code could be used within the method:\n"
            },
            "name": "filtrer",
            "location": {
              "start": 395,
              "insert": 395,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 83,
            "docLength": null
          },
          {
            "id": "878f6f42-cc51-e59d-1043-487b10e4fa3d",
            "ancestors": [
              "7ecbb0a5-d576-7f95-1f43-1b6fa206e267"
            ],
            "type": "function",
            "description": "Retrieves a list of cinema addresses from a database and extracts unique addresses from the list of cinemas using Stream API.",
            "params": [],
            "returns": {
              "type_name": "List",
              "description": "a list of unique cinema addresses obtained from the database.\n\n* The output is a list of strings representing the unique addresses of cinemas.\n* The list is generated by streaming the `cinemas` collection using `map()` and `distinct()` methods to extract the addresses.\n* The `collect()` method is used to collect the distinct addresses into a list.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        // Create a new instance of CinemaService\n        CinemaService cinemaService = new CinemaService();\n\n        // Get all the addresses from the cinemas using the method getCinemaAddresses\n        List<String> cinemasAddresses = cinemaService.getCinemaAddresses();\n\n        // Print out each address\n        for (String address : cinemasAddresses) {\n            System.out.println(address);\n        }\n    }\n}\n",
              "description": ""
            },
            "name": "getCinemaAddresses",
            "location": {
              "start": 481,
              "insert": 481,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "1df7f3f5-2766-be99-8341-91048f6f2f87",
            "ancestors": [
              "7ecbb0a5-d576-7f95-1f43-1b6fa206e267"
            ],
            "type": "function",
            "description": "Creates a list of predefined cinema statuses, including \"Pending\" and \"Accepted\", and returns it.",
            "params": [],
            "returns": {
              "type_name": "List",
              "description": "a list of predefined cinema statuses: \"Pending\" and \"Accepted\".\n\n* The list contains 2 pre-defined statuses: \"Pending\" and \"Accepted\".\n* Each status is a unique string in the list.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class CinemaAdministrationController {\n\n    @FXML\n    private TableView<Cinema> listCinema;\n\n    public List<String> getCinemaStatuses() {\n\n        // Créer une liste de statuts pré-définis\n\n        List<String> statuses = new ArrayList<>();\n\n        statuses.add(\"Pending\");\n\n        statuses.add(\"Accepted\");\n\n\n\n        return statuses;\n\n    }\n\n    @FXML\n    void afficherEventsAdmin(ActionEvent event) throws IOException {\n\n        // Créer une liste de statuts pré-définis\n\n        List<String> statuses = getCinemaStatuses();\n\n\n\n        listCinema.setItems(FXCollections.observableArrayList(statuses));\n\n    }\n}\n",
              "description": ""
            },
            "name": "getCinemaStatuses",
            "location": {
              "start": 507,
              "insert": 507,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "295c1c75-17d4-4c9c-084c-a2edb4c7043c",
            "ancestors": [
              "7ecbb0a5-d576-7f95-1f43-1b6fa206e267"
            ],
            "type": "function",
            "description": "Filters a list of cinemas based on selected addresses and/or statuses, and updates the TableView with the filtered list.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "occurrence of an action event, such as a button press or key stroke, that triggers the execution of the `filtrercinema` method.\n\n* `Event`: This represents an event object that triggered the function to be executed.\n* `ActionEvent`: This is a specific type of event object that indicates that a button or other control was pressed.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid initialize() {\n    // Initialize the list of addresses and statuses that are initially selected\n    List<String> initialAddresses = Arrays.asList(\"Paris\", \"Lyon\");\n    List<String> initialStatuses = Arrays.asList(\"Accepted\", \"Rejected\");\n    \n    // Set the checkboxes to be initially checked with the initialAddresses and initialStatuses\n    for (CheckBox checkBox : addressCheckBoxes) {\n        if (initialAddresses.contains(checkBox.getText())) {\n            checkBox.setSelected(true);\n        }\n    }\n    \n    for (CheckBox checkBox : statusCheckBoxes) {\n        if (initialStatuses.contains(checkBox.getText())) {\n            checkBox.setSelected(true);\n        }\n    }\n}\n",
              "description": "\nIn this example, we initialize the list of addresses and statuses that are initially selected to be \"Paris\" and \"Lyon\", and \"Accepted\" and \"Rejected\". We then iterate through the checkboxes in the anchor pane with the id \"addressCheckBoxes\" and set their values to be checked if they contain the text of the initialAddresses list. We do the same for the statusCheckBoxes anchor pane but with the initialStatuses list instead. This will initially check the addresses and statuses that match the initialAddresses and initialStatuses lists."
            },
            "name": "filtrercinema",
            "location": {
              "start": 525,
              "insert": 525,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 39,
            "docLength": null
          },
          {
            "id": "a113abd2-7b97-5fae-8243-b4279de48742",
            "ancestors": [
              "7ecbb0a5-d576-7f95-1f43-1b6fa206e267"
            ],
            "type": "function",
            "description": "Streamlines the selected addresses from an `AnchorPane` of filtering, applies a filter to only include selected checkboxes, and collects the results into a list of strings.",
            "params": [],
            "returns": {
              "type_name": "ListString",
              "description": "a list of selected addresses represented as strings.\n\n1. The output is a list of strings (`List<String>`), indicating that each selected address is represented as a string.\n2. The list is generated using the `stream()`, `filter()`, and `map()` methods of the `Optional` class, which suggests that the function returns a stream of filtered and transformed elements.\n3. The `collect()` method is used to collect the filtered and transformed elements into a list, which is then returned as the output.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Sample {\n    @FXML\n    private AnchorPane FilterAnchor;\n\n    @FXML\n    private ObservableList<CheckBox> addressCheckBoxes = FXCollections.observableArrayList();\n\n    public void initialize() {\n        // Initialize the checkbox list\n        addressCheckBoxes.add(new CheckBox(\"Paris\"));\n        addressCheckBoxes.add(new CheckBox(\"New York\"));\n        addressCheckBoxes.add(new CheckBox(\"London\"));\n\n        // Set the filter button action handler\n        FilterAnchor.setVisible(false);\n        FilterButton.setOnAction(event -> {\n            // Show/hide the filter anchor pane\n            FilterAnchor.setVisible(!FilterAnchor.isVisible());\n        });\n    }\n\n    @FXML\n    private void filtrercinema(ActionEvent event) {\n        cinemasList.setOpacity(1);\n\n        // Récupérer les adresses sélectionnées\n        List<String> selectedAddresses = getSelectedAddresses();\n\n        // Filtrer les cinémas en fonction des adresses sélectionnées\n        List<Cinema> filteredCinemas = getAllCinemas().stream()\n                .filter(cinema -> selectedAddresses.isEmpty() || selectedAddresses.contains(cinema.getAdresse()))\n                .collect(Collectors.toList());\n\n        // Mettre à jour le TableView avec les cinémas filtrés\n        ObservableList<Cinema> filteredList = FXCollections.observableArrayList(filteredCinemas);\n        listCinema.setItems(filteredList);\n    }\n\n    private List<String> getSelectedAddresses() {\n        // Récupérer les adresses sélectionnées dans l'AnchorPane de filtrage\n        return addressCheckBoxes.stream()\n                .filter(CheckBox::isSelected)\n                .map(CheckBox::getText)\n                .collect(Collectors.toList());\n    }\n}\n",
              "description": ""
            },
            "name": "getSelectedAddresses",
            "location": {
              "start": 567,
              "insert": 567,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "33f0abe3-e089-1088-6742-80b83fdef992",
            "ancestors": [
              "7ecbb0a5-d576-7f95-1f43-1b6fa206e267"
            ],
            "type": "function",
            "description": "Retrieves the selected statuses from an `AnchorPane` of filtering by streaming the checked checkboxes, filtering the non-checked ones, and collecting the selected statuses as a list.",
            "params": [],
            "returns": {
              "type_name": "ListString",
              "description": "a list of selected statuses represented as strings.\n\n* The list contains only selected statuses as determined by the `isSelected` method of the `CheckBox` class.\n* Each element in the list is a string representing the text of the selected status.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "List<String> selectedStatuses = getSelectedStatuses();\n",
              "description": "\nIn this case, the selectedStatuses variable will contain a list of strings representing the text of all CheckBoxes that are currently selected in the statusCheckBoxes AnchorPane."
            },
            "name": "getSelectedStatuses",
            "location": {
              "start": 583,
              "insert": 583,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "dfd9f92e-bcaa-2498-394d-7343475cf36d",
            "ancestors": [
              "7ecbb0a5-d576-7f95-1f43-1b6fa206e267"
            ],
            "type": "function",
            "description": "Loads an fxml file and displays a stage with a scene, changing the current stage to the new one.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the function and provides access to its related data, allowing the code inside the function to interact with it.\n\n* `event`: An `ActionEvent` object representing an action performed on the application.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\npublic void afficherEventsAdmin(ActionEvent event) throws IOException {\n    FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/DesignEvenementAdmin.fxml\"));\n    Parent root = loader.load();\n    Scene scene = new Scene(root);\n    Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n    Stage stage = new Stage();\n    stage.setScene(scene);\n    stage.setTitle(\"Event Manegement\");\n    stage.show();\n    currentStage.close();\n}\n",
              "description": "\nHere, afficherEventsAdmin is a method that is called by an ActionEvent triggered by a button click in the FXML file DesignGestionAdmin.fxml. The code creates a new stage and loads a fxml file into it using the FXMLLoader class. It then sets the title of the new stage to \"Event Management\" and shows it. Finally, it closes the current stage."
            },
            "name": "afficherEventsAdmin",
            "location": {
              "start": 599,
              "insert": 599,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 27,
            "docLength": null
          },
          {
            "id": "71b2c42f-bd4c-5891-8246-c1e6f61f7275",
            "ancestors": [
              "7ecbb0a5-d576-7f95-1f43-1b6fa206e267"
            ],
            "type": "function",
            "description": "Loads an FXML file, creates a stage and window for film management, and replaces the current stage with the new one.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the function execution, specifically an `ActionEvent` related to the loading of the FXML file.\n\nEvent: An event object that represents a user-initiated action or event, such as a button click or a key press.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\nvoid handleButtonAction(ActionEvent event) {\n\n    AfficherProduitAdmin();\n\n}\n",
              "description": "\nThis will call the 'afficherMovieAdmin' method when the button is clicked."
            },
            "name": "afficherMovieAdmin",
            "location": {
              "start": 629,
              "insert": 629,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 27,
            "docLength": null
          },
          {
            "id": "9b03a212-4fd4-558f-9444-9b98f290e366",
            "ancestors": [
              "7ecbb0a5-d576-7f95-1f43-1b6fa206e267"
            ],
            "type": "function",
            "description": "Loads a FXML file, creates a stage and window for a series management interface, and replaces the current stage with the new one.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the execution of the `afficherserieAdmin()` function, which is an action event generated by a user's click on a button or other element in the FXML file.\n\n* `event` is an `ActionEvent`, indicating that the method was called as a result of user action.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\npublic void afficherserieAdmin(ActionEvent event) throws IOException {\n\n    // Create a new Stage, load the FXML file and set up the scene.\n\n    Stage stage = new Stage();\n\n    Scene scene = new Scene(FXMLLoader.load(getClass().getResource(\"/Serie-view.fxml\")));\n\n    stage.setScene(scene);\n\n    stage.setTitle(\"Serie Manegement\");\n\n    // Show the Stage and close the current one (the controller class is defined in the FXML file).\n\n    stage.show();\n\n    ((Node) event.getSource()).getScene().getWindow().close();\n\n}\n",
              "description": "\nHere, afficherserieAdmin() is called as a response to an ActionEvent on a button or other GUI element. When this happens, the method creates a new Stage and loads an FXML file into it. It then sets up the scene for the stage and gives it a title. Finally, it shows the stage and closes the current window."
            },
            "name": "afficherserieAdmin",
            "location": {
              "start": 659,
              "insert": 659,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 27,
            "docLength": null
          },
          {
            "id": "f8b8e0f8-30c9-bd93-c540-7784fd9e43b1",
            "ancestors": [
              "7ecbb0a5-d576-7f95-1f43-1b6fa206e267"
            ],
            "type": "function",
            "description": "Loads an fxml file, creates a scene and stage, and replaces the current stage with the new one.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the execution of the `AfficherProduitAdmin()` method.\n\n* `event`: An `ActionEvent` object representing a user action that triggered the function to execute.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class MainController {\n    @FXML private Button produit;\n    public void initialize() {\n        // ...\n        produit.setOnAction(this::AfficherProduitAdmin);\n    }\n}\n",
              "description": "\nThis is a very basic example that only shows how to use the method AfficherProduitAdmin in the initialize method of a controller class. The button with the id \"produit\" would be created in the fxml file, and when clicked, it would trigger the AfficherProduitAdmin method. This example is not complete as you have not included the full implementation of the method, but it shows how it can be used in a basic way."
            },
            "name": "AfficherProduitAdmin",
            "location": {
              "start": 689,
              "insert": 689,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 27,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "DashboardClientController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/cinemas/DashboardClientController.java",
    "content": {
      "structured": {
        "description": "A user interface for displaying comments on a cinema website. The program uses JavaFX to create a scrolling pane for displaying comments and a menu bar with an anchor button to open the comment section. When the anchor button is clicked, the program displays a list of all available cinemas, and when a cinema is selected from the list, the program displays a list of all comments associated with that cinema. The program also provides functionality for adding new comments and displaying them in a box along with an image of the user who made the comment.",
        "items": [
          {
            "id": "07ae0251-db98-5484-214e-d4263cdf1108",
            "ancestors": [],
            "type": "function",
            "description": "Is responsible for handling user interactions related to the cinema dashboard. It provides methods for displaying all comments, adding new comments, and closing the comment section. The class also includes a scroll pane for displaying all comments for a given cinema ID. Additionally, it includes an HBox for each comment, which contains an image of the user who made the comment, their name, and the comment itself.",
            "name": "DashboardClientController",
            "location": {
              "start": 109,
              "insert": 109,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 1665,
            "docLength": null
          },
          {
            "id": "f6e4770d-200a-d1b0-c341-fe04ade0f944",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Searches for Cinema objects in a list based on a search term and returns a list of matching objects.",
            "params": [
              {
                "name": "liste",
                "type_name": "List<Cinema>",
                "description": "list of cinemas to search in.\n\n* `liste` is a list of `Cinema` objects.",
                "complex_type": true
              },
              {
                "name": "recherche",
                "type_name": "String",
                "description": "search query used to filter the list of cinemas returned by the function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "List",
              "description": "a list of `Cinema` objects containing the search query.\n\n* The `List<Cinema>` object `resultats` is initialized and returned by the method.\n* It contains Cinema objects that match the search criteria, as determined by the `if` statement in the method body.\n* Each element in the list is a Cinema object with a non-null `nom` attribute that contains the search term `recherche`.",
              "complex_type": true
            },
            "name": "rechercher",
            "location": {
              "start": 195,
              "insert": 185,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 184,
                "end": 193
              }
            },
            "item_type": "method",
            "length": 23,
            "docLength": 9
          },
          {
            "id": "66a0bcef-6528-1b9f-0741-2ec417b9bfc2",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Sets the visibility of a pane and two lists to false and true, respectively, upon an action event.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the `Planninggclose()` method to be called, providing the necessary context for the method to perform its intended action.\n\nEvent: `ActionEvent`\n\n* `target`: Reference to the component that triggered the event (in this case, `PlanningPane`)\n* `code`: The action that was performed (in this case, `setVisible(false)`)",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void Planninggclose(ActionEvent event) {\n        PlanningPane.setVisible(false); // Sets the visibility of the planning pane to false, so it will not show up anymore\n        listCinemaClient.setOpacity(1); // Makes the opacity of the list cinema client to 1 (completely opaque)\n        listCinemaClient.setVisible(true); // Makes the visibility of the list cinema client visible again, so it can be shown on the screen\n    }\n",
              "description": "\nAs for your question regarding the method addCommentToView, this is an example implementation:\n"
            },
            "name": "Planninggclose",
            "location": {
              "start": 237,
              "insert": 237,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "708a02d0-3b12-d68f-f348-d60be296b687",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Clears the children of a `FlowPane`, loads and displays a list of accepted cinemas, and sets the visibility of the `listCinemaClient` and `PlanningPane` to `true` and `false`, respectively.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "user's action of clicking the \"Show List Cinema\" button, which triggers the function to clear the content of the `cinemaFlowPane`, load the accepted cinemas, and set the visibility of the `listCinemaClient` and `PlanningPane`.\n\nEvent: An action event object representing a user interaction.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    void showListCinema(ActionEvent event) {\n\n        cinemaFlowPane.getChildren().clear();\n\n        HashSet<Cinema> acceptedCinemas = loadAcceptedCinemas();\n\n        listCinemaClient.setVisible(true);\n\n        PlanningPane.setVisible(false);\n\n    }\n",
              "description": "\nThis method clears the children of the cinemaFlowPane, loads a HashSet of cinemas, and sets both listCinemaClient and PlanningPane to be visible. This is an example of how to use this method correctly. The input for only ('event', 'ActionEvent') is the ActionEvent parameter, which will contain the information about the event that triggered the action."
            },
            "name": "showListCinema",
            "location": {
              "start": 259,
              "insert": 253,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 252,
                "end": 257
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 5
          },
          {
            "id": "649fc1a8-10b9-d3a0-d542-66497913f5d7",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Loads a set of cinemas from a service, filters them based on their status, and returns a HashSet of accepted cinemas to be displayed in a user interface.",
            "params": [],
            "returns": {
              "type_name": "HashSetCinema",
              "description": "a set of `Cinema` objects representing the accepted cinemas.\n\n* `HashSet<Cinema>` represents a set of accepted cinemas.\n* The set contains cinema objects that have a `Statut` field equal to \"Accepted\".\n* The set is generated by filtering the list of cinemas read from the `CinemaService` using the `filter()` method and then collecting the results into a list using the `collect()` method.\n* The list is then converted into a hash set using the `toList()` method.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "private HashSet<Cinema> loadAcceptedCinemas() {\n    CinemaService cinemaService = new CinemaService();\n    List<Cinema> cinemas = cinemaService.read();\n    \n    // Filter the list of cinemas to only accept those with \"Accepted\" status\n    List<Cinema> acceptedCinemasList = cinemas.stream()\n            .filter(cinema -> cinema.getStatut().equals(\"Accepted\"))\n            .collect(Collectors.toList());\n    \n    if (acceptedCinemasList.isEmpty()) {\n        showAlert(\"Aucun cinéma accepté n'est disponible.\");\n    }\n    \n    HashSet<Cinema> acceptedCinemasSet = new HashSet<>(acceptedCinemasList);\n    \n    // Create a card for each cinema in the set and add it to the FlowPane\n    for (Cinema cinema : acceptedCinemasSet) {\n        HBox cardContainer = createCinemaCard(cinema);\n        cinemaFlowPane.getChildren().add(cardContainer);\n    }\n    \n    return acceptedCinemasSet;\n}\n",
              "description": "\nThe code is a little bit verbose, but it makes the concept clear. It first gets all cinemas from the service and then filters them to only include those with \"Accepted\" status. If there are no such cinemas, an alert message will be displayed. The filtered list of accepted cinemas is converted into a set. Then, for each cinema in that set, a card is created using the createCinemaCard method and added to the FlowPane. The final result is returned as a set of cinemas."
            },
            "name": "loadAcceptedCinemas",
            "location": {
              "start": 275,
              "insert": 275,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 41,
            "docLength": null
          },
          {
            "id": "d757e4f1-9a5c-399e-7248-7a8136100382",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Creates an Alert object with a title, header text, and content text. It then shows the Alert to the user.",
            "params": [
              {
                "name": "message",
                "type_name": "String",
                "description": "text to be displayed as an information alert when the `showAlert()` method is called.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    private void handleButtonAction(ActionEvent event) {\n\n        showAlert(\"Hello World!\");\n\n    }\n",
              "description": ""
            },
            "name": "showAlert",
            "location": {
              "start": 319,
              "insert": 319,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "a5b4b4c6-db94-a28f-ae4f-982aa547905a",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Creates a card container and adds various components to it, including an image view for the cinema logo, labels for the name and address, a vertical line, buttons for showing movies and planning, and a rating component.",
            "params": [
              {
                "name": "cinema",
                "type_name": "Cinema",
                "description": "Cinema object that provides the necessary information for creating the cinema card, such as name, logo, address, and rating.\n\n* `getLogo()`: returns the cinema's logo as a string\n* `getNom()`: returns the cinema's name\n* `getAdresse()`: returns the cinema's address\n* `getId_cinema()`: returns the cinema's ID\n\nThese properties are used to create and display a card for the cinema.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HBox",
              "description": "a HBox container with a cinema card displaying the cinema's name, address, and logo, along with a rating system for the client.\n\n1. `cardContainer`: This is the outermost container for the cinema card, which holds all the child elements.\n2. `card`: This is the inner container that holds all the elements related to the cinema, such as logo, name, address, and buttons.\n3. `logoImageView`: This is an image view containing the cinema's logo.\n4. `NomLabel`: This is a label displaying the cinema's name.\n5. `nameLabel`: This is another label displaying the cinema's nom (French for \"name\").\n6. `AdrsLabel`: This is a label displaying the cinema's address.\n7. `adresseLabel`: Another label displaying the cinema's address.\n8. `moviesButton`: This is a button that displays the text \"Show Movies\" and allows users to view movies available at the cinema.\n9. `planningButton`: This is another button that displays the text \"Show Planning\" and allows users to view the cinema's planning.\n10. `CommentIcon`: This is an icon view displaying a comment symbol, which allows users to leave comments for the cinema.\n11. `rating`: This is a rating view displaying the taux (French for \"rate\") of the cinema based on user feedback.\n\nIn summary, the `createCinemaCard` function returns a container object that holds all the elements related to a particular cinema.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "import javafx.collections.FXCollections;\nimport javafx.scene.control.Label;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.layout.AnchorPane;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.text.Font;\n\npublic class Main extends Application {\n    @Override\n    public void start(Stage primaryStage) {\n        HBox root = new HBox();\n\n        // Create a cinema object and set its name, logo, and address\n        Cinema cinema = new Cinema(\"cinema\", \"cinema.png\", \"123 Main St\");\n\n        // Use the createCinemaCard method to create a card for this cinema using the previous cinema object\n        HBox cinemaCard = createCinemaCard(cinema);\n\n        // Add the created cinema card to the root of the scene\n        root.getChildren().add(cinemaCard);\n\n        // Set the scene's user data to the current client\n        primaryStage.setUserData(new Client(\"client\"));\n\n        // Create a label and set its text to the name of the current client\n        Label clientLabel = new Label(\"Client: \" + primaryStage.getUserData().getName());\n\n        // Add the created label to the root of the scene\n        root.getChildren().add(clientLabel);\n\n        primaryStage.setScene(new Scene(root));\n        primaryStage.show();\n    }\n\n    /**\n     * Creates a cinema card using the given Cinema object.\n     * @param cinema The Cinema object to create the card for.\n     * @return A new HBox object containing the created cinema card.\n     */\n    public HBox createCinemaCard(Cinema cinema) {\n        // Create an AnchorPane and set its style class to \"card\"\n        AnchorPane anchorPane = new AnchorPane();\n        anchorPane.getStyleClass().add(\"card\");\n\n        // Create an ImageView and set the image for it using the given cinema logo file name\n        ImageView imageView = new ImageView(cinema.getLogo());\n\n        // Create a label and set its text to the name of the given cinema object\n        Label label = new Label(cinema.getName());\n\n        // Set the font size for the created label using a value of 20\n        label.setFont(new Font(20));\n\n        // Add the created ImageView and label to the AnchorPane\n        anchorPane.getChildren().addAll(imageView, label);\n\n        return anchorPane;\n    }\n}\n",
              "description": "\nIn this example, we create a cinema card using the `createCinemaCard` method by providing a `Cinema` object. We then set the scene's user data to the current client and create a label and add it to the root of the scene. The created cinema card is then added to the root of the scene."
            },
            "name": "createCinemaCard",
            "location": {
              "start": 337,
              "insert": 337,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 233,
            "docLength": null
          },
          {
            "id": "2e59257c-96ad-b38b-1444-4aa24f0e634c",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Creates and positions top-rated cinema cards within an `AnchorPane`. Each card displays the cinema's name, address, and logo, and is spaced apart by a fixed distance. The position of the next card is updated after each card is added.",
            "params": [
              {
                "name": "Anchortop3",
                "type_name": "AnchorPane",
                "description": "`AnchorPane` where the top-rated cinema cards will be added.\n\n* `Anchortop3`: Anchor pane where the cinema cards will be added.\n* `topRatedCinemas`: List of top-rated cinemas to create cards for.\n* `cardHeight`: Height of each cinema card.\n* `cardSpacing`: Spacing between each cinema card.\n* `currentY`: Position Y of the first cinema card.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main extends Application {\n    @Override\n    public void start(Stage primaryStage) throws Exception{\n        AnchorPane anchorPane = new AnchorPane();\n        createTopRatedCinemaCards(anchorPane);\n    }\n}\n",
              "description": "\nThe example creates a new `AnchorPane` and passes it to the method, then the method is called with the `anchorPane`. The method will use the `anchorPane` to display the top-rated cinemas on it."
            },
            "name": "createTopRatedCinemaCards",
            "location": {
              "start": 575,
              "insert": 575,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 99,
            "docLength": null
          },
          {
            "id": "fe93de47-7fea-50b2-1944-370b059ece8f",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Geocodes a given address by sending a GET request to the OpenStreetMap Nominatim API and retrieving the lat and lon coordinates for the address. It then opens a map dialog with the retrieved coordinates.",
            "params": [
              {
                "name": "address",
                "type_name": "String",
                "description": "address to be geocoded, which is sent as a query to the Nominatim API to retrieve the latitude and longitude coordinates for the location.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main extends Application {\n    public static void main(String[] args) {\n        launch(args);\n    }\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n        String address = \"1600 Pennsylvania Ave NW, Washington DC\";\n        geocodeAddress(address);\n    }\n}\n",
              "description": "\nThis would run the method `geocodeAddress`, passing in the string \"1600 Pennsylvania Ave NW, Washington DC\" as its argument. The method would then call the `openMapDialog` method with the latitude and longitude of the specified address to open a map dialog displaying that location on a map."
            },
            "name": "geocodeAddress",
            "location": {
              "start": 677,
              "insert": 677,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 63,
            "docLength": null
          },
          {
            "id": "054183ba-6ce8-31a0-aa44-e03ee93a3437",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Creates a new dialog, loads a map into a WebView, updates the marker position using JavaScript, and displays the dialog with a close button.",
            "params": [
              {
                "name": "lat",
                "type_name": "double",
                "description": "latitude coordinate of the map location, which is used to load the appropriate map and place a marker at the corresponding position on the map.",
                "complex_type": false
              },
              {
                "name": "lon",
                "type_name": "double",
                "description": "longitude coordinate of the location where the map should be displayed, which is used to load the appropriate map and place a marker at the specified position.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "double lat = 51.5073509;\ndouble lon = -0.12775829999998223;\n\nopenMapDialog(lat, lon); // Call the method and pass in the lat and lon as double values\n",
              "description": "\nThis example calls openMapDialog() method with two arguments: 51.5073509 for lat and -0.12775829999998223 for lon. The method will then create a new Dialog object, set the title to \"Map\", and set the WebView as its content. It will also load a web page located in the resources folder with an embedded JavaScript function that will place a marker on the map at the specified coordinates. After loading the page, it will call the updateMarker() method with the lat and lon values to update the marker location. Finally, it will show the dialog using its showAndWait() method."
            },
            "name": "openMapDialog",
            "location": {
              "start": 743,
              "insert": 743,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 57,
            "docLength": null
          },
          {
            "id": "7f230928-ae74-f283-5048-772c5c0f6b4f",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Displays a planning page for a cinema, consisting of 7 days of the week, each day represented by a label with the date and a button to display seances for that date.",
            "params": [
              {
                "name": "cinema",
                "type_name": "Cinema",
                "description": "Cinema object that contains information about the cinema and its scheduling.\n\n* `listCinemaClient`: A visible container for cinema client listings (set to `false`).\n* `PlanningPane`: Visible pane displaying the planning schedule (set to `true`).\n* `tilePane`: A container for displaying individual days of the week in a tile format (created and added to `planningContent`).",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        Cinema cinema = new Cinema();\n        cinema.setName(\"Cinema\");\n        cinema.addSession(new Session());\n        cinema.addSession(new Session());\n        cinema.addSession(new Session());\n        cinema.addSession(new Session());\n        \n        MainController controller = new MainController();\n        controller.showPlanning(cinema);\n    }\n}\n",
              "description": "\nThis is because the method showPlanning() takes a Cinema object as its parameter, which is an instance of cinema class. The constructor of cinema class sets up a name for the cinema and adds 4 sessions to it. After creating a new MainController object, we can call showPlanning with this cinema object as an argument. This would display all the sessions in that cinema on a planning pane in the UI."
            },
            "name": "showPlanning",
            "location": {
              "start": 807,
              "insert": 807,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 67,
            "docLength": null
          },
          {
            "id": "8839990b-7913-4582-8949-511f1f5b16da",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Loads the planning for the current week (Sunday to Saturday) for a given cinema using SeanceService.",
            "params": [
              {
                "name": "startDate",
                "type_name": "LocalDate",
                "description": "starting date of the current week for which the planning is being loaded.\n\n* LocalDate representing the start date of the current week\n* Can be modified or manipulated within the function\n\nPlease provide the Java code for which you would like a summary.",
                "complex_type": true
              },
              {
                "name": "cinema",
                "type_name": "Cinema",
                "description": "cinemas for which the seance is being planned.\n\n* Cinema is an object representing a cinema with unknown details.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "Map",
              "description": "a map containing the seating plan for the current week at a specific cinema.\n\nThe output is a map that contains key-value pairs, where the keys are `LocalDate` objects representing the dates of the current week, and the values are lists of `Seance` objects representing the seances scheduled for those dates at the corresponding cinema.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "LocalDate startDate = LocalDate.now();\nCinema cinema = new Cinema(1, \"Name\", \"Location\");\nMap<LocalDate, List<Seance>> currentWeekPlanning = loadCurrentWeekPlanning(startDate, cinema);\n",
              "description": "\nIn this example, we create a LocalDate object for the start date of the current week (using the now() method) and then call the loadCurrentWeekPlanning method with this date as an input. We also create a Cinema object with some arbitrary data to be used in the method call. The return value is stored in a Map<LocalDate, List<Seance>> variable called currentWeekPlanning, which contains the seances for the current week.\nNote that the startDate and endDate variables are only used to get the range of dates for the current week. The cinema input parameter is also used to get the corresponding seances for the cinema."
            },
            "name": "loadCurrentWeekPlanning",
            "location": {
              "start": 877,
              "insert": 877,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "e5e408df-de83-f9b3-0c4f-9b9817cf4e41",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Loads the current week's planning data, displays it in a VBox, and adds an event listener to display more detailed seance information when a date is clicked.",
            "params": [
              {
                "name": "date",
                "type_name": "LocalDate",
                "description": "LocalDate for which to display the cinema seances, and it is used to load the relevant planning data from the database or API.\n\n* `LocalDate date`: represents a specific date in the format `YYYY-MM-DD`.\n* ` cinema`: represents the cinema for which the seating plan is being generated.",
                "complex_type": true
              },
              {
                "name": "cinema",
                "type_name": "Cinema",
                "description": "cinema for which the seances are being displayed, and is used to load the relevant planning data into the function.\n\n* `cinema`: A `Cinema` object representing the cinema for which the seances are being displayed. Its main properties include the cinema's name and address.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "private void initialize() {\n    Cinema cinema = new Cinema();\n    LocalDate date = LocalDate.of(2022, 1, 1);\n    displaySeancesForDate(date, cinema);\n}\n",
              "description": "\nThis method would first load the current week's seance schedule for the given cinema and date using the loadCurrentWeekPlanning method and store them in a map with the key being the day of the week and the value being a list of Seances that are scheduled on that day. It then creates a tile pane that has 7 columns and 1 row to display the days of the week. For each day, it creates a label that displays the day of the week, sets its style to #ae2d3c with a white text fill and sets an on mouse clicked event that calls the displaySeancesForDate method again using the current date as input.\n\nNext, it checks if there are any seances for the given date and creates a VBox to contain all of them. It then creates a separator and adds it to the box. If there are no seances available, it displays a label that tells the user that no seances are available.\n\nIf there are any seances available, it creates another VBox to hold all of the seance cards for the given date. For each seance, it creates a stack pane that holds the card and adds it to the VBox.\n\nFinally, it empties its current content and replaces it with the new planning content."
            },
            "name": "displaySeancesForDate",
            "location": {
              "start": 895,
              "insert": 895,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 115,
            "docLength": null
          },
          {
            "id": "4ee0b9d6-25e2-d4b7-1944-60170d07c139",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Generates a stack pane containing a card with information about a seance, including the film's name, cinema hall, screening time, and price.",
            "params": [
              {
                "name": "seance",
                "type_name": "Seance",
                "description": "Seance object that contains information about the film, salle, and time of the screening, which is used to populate the card with relevant labels.\n\n* `seance.getFilmcinema()`: Returns an instance of `Filmcinema` containing information about the film showing at the seance.\n* `seance.getNom_salle()`: Returns the name of the hall where the seance is taking place.\n* `seance.getHD()` and `seance.getHF()`: Return the starting time and ending time of the seance, respectively.\n* `seance.getPrix()`: Returns the price of the seance.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "StackPane",
              "description": "a stack pane containing a HBox with an ImageView and three Labels.\n\n* `cardContainer`: A StackPane that contains all the elements that make up the seance card.\n* `filmImageView`: An ImageView that displays an image of the film being shown in the seance.\n* `labelsContainer`: A VBox that contains four Labels displaying information about the seance, including the film name, salle name, time, and price.\n* `filmNameLabel`, `salleNameLabel`, `timeLabel`, and `priceLabel`: The labels that are contained within the `labelsContainer`. Each label displays a piece of information related to the seance.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "StackPane seanceCardContainer = createSeanceCard(seance);\n",
              "description": "\nThis code creates a container for the seance card and returns it as a StackPane object, which can then be placed in the scene."
            },
            "name": "createSeanceCard",
            "location": {
              "start": 1013,
              "insert": 1013,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 93,
            "docLength": null
          },
          {
            "id": "650f5145-2fef-c0b4-7241-249cf7013086",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Sets up the user interface and connects it to a `CinemaService` for movie data retrieval. It listens for text changes in a search bar, queries the service for relevant movies, and displays them on a pane. Additionally, it sorts and displays top-rated movies based on a predetermined criterion.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class Main extends Application {\n    public static void main(String[] args) {\n        launch();\n    }\n\n    @Override\n    public void start(Stage primaryStage) throws Exception{\n        Parent root = FXMLLoader.load(getClass().getResource(\"sample.fxml\"));\n        primaryStage.setTitle(\"Hello World\");\n        primaryStage.setScene(new Scene(root, 300, 275));\n        primaryStage.show();\n    }\n}\n",
              "description": "\nFollowing is an example on how the search bar would be used:\n"
            },
            "name": "initialize",
            "location": {
              "start": 1109,
              "insert": 1109,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 55,
            "docLength": null
          },
          {
            "id": "9d0bb8ff-c41d-2c88-3048-56aa0be0b8d5",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Creates film cards for a list of cinemas and adds them to a pane containing the cinemas.",
            "params": [
              {
                "name": "Cinemas",
                "type_name": "List<Cinema>",
                "description": "list of cinemas whose film cards will be created and displayed by the `createfilmCards()` method.\n\n* `Cinemas`: A list of Cinema objects representing various cinemas.\n* Each Cinema object contains information about the cinema's name, address, and film schedule.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "List<Cinema> cinemas = new ArrayList<>();\ncinemas.add(new Cinema(\"New York\", \"USA\", 123));\ncinemas.add(new Cinema(\"Paris\", \"France\", 456));\n\ncreatefilmCards(cinemas);\n",
              "description": "\nIn this example, we create a list of cinemas and then pass it to the method createfilmCards, which will create film cards for each cinema in the list. The method creates a new HBox card container for each cinema and adds them to the cinemaFlowPane flow pane."
            },
            "name": "createfilmCards",
            "location": {
              "start": 1167,
              "insert": 1167,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "641ef419-f55b-94be-7d4d-df4ee10b72a8",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Retrieves a list of cinemas through a call to the ` CinemaService`. It then returns the list of cinemas.",
            "params": [],
            "returns": {
              "type_name": "List",
              "description": "a list of `Cinema` objects retrieved from the Cinema Service.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "private void displayAllCinemas() {\n    List<Cinema> cinemas = getAllCinemas();\n    \n    // Add the cinema names to a list and sort them alphabetically. \n    // Note that this is a very simple example, but you can use more complex logic for sorting your data in the future. \n    List<String> sortedCinemaNames = cinemas.stream()\n            .map(cinema -> cinema.getName())\n            .sorted(Comparator.naturalOrder())\n            .collect(Collectors.toList());\n    \n    // Add the sorted list of cinema names to a text field for display on the user interface. \n    // Note that this is a very simple example, but you can use more complex logic for displaying your data in the future. \n    cinemaNamesTextField.setText(String.join(\", \", sortedCinemaNames));\n}\n",
              "description": "\nIn this example, we first call the getAllCinemas method to retrieve all cinemas from a database. We then map each cinema object to a string containing its name using the lambda expression .map(cinema -> cinema.getName()). Next, we sort this list of strings alphabetically using the Comparator class. Finally, we collect this sorted list into a text field for display on the user interface. Note that this is a very simple example and you can use more complex logic to format your data in the future."
            },
            "name": "getAllCinemas",
            "location": {
              "start": 1185,
              "insert": 1185,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "1cbc2e7a-016d-d586-b54e-c14aa79ff1b4",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Updates the visibility of the `FilterAnchor` pane and adds two VBoxes containing check boxes for addresses and names to the pane.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "Anchor Button's event that triggered the filtration process.\n\n* `event`: An `ActionEvent` object representing the triggered action.\n* `listCinemaClient`: A `VBox` container for displaying the cinema client list.\n* `FilterAnchor`: A `Region` component for hosting the filtering controls.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid handleButtonAction(ActionEvent event) {\n    filtrer();\n}\n",
              "description": ""
            },
            "name": "filtrer",
            "location": {
              "start": 1197,
              "insert": 1197,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 83,
            "docLength": null
          },
          {
            "id": "533f39db-c565-7b8d-6742-fb9c9bbb1619",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Filters a list of cinemas based on selected addresses and/or names, and displays the filtered list in a flow pane.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "occurrence of an action event, triggering the function to execute and filter the cinemas based on the selected addresses and/or names.\n\n* `listCinemaClient`: A reference to an observable list of cinemas.\n* `FilterAnchor`: A reference to a component that displays a filter option.\n* `getSelectedAddresses()` and `getSelectedNames()`: Methods that return lists of selected addresses and names, respectively.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "// Create a list of selected addresses and names\nList<String> selectedAddresses = new ArrayList<>();\nselectedAddresses.add(\"123 Main St\");\nselectedAddresses.add(\"456 Elm St\");\n\nList<String> selectedNames = new ArrayList<>();\nselectedNames.add(\"The Movie Theaters\");\nselectedNames.add(\"Another Theater\");\n\n// Call the filtrercinema method with the list of addresses and names\nfiltrercinema(null);\n",
              "description": "\nThis would filter the cinemas based on the selected addresses and names, and then display them in a FlowPane named cinemaFlowPane."
            },
            "name": "filtrercinema",
            "location": {
              "start": 1283,
              "insert": 1283,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 39,
            "docLength": null
          },
          {
            "id": "244ced17-7df3-c187-ce41-760cf9ca7c6c",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Streams, filters, and collects the selected addresses from the `addressCheckBoxes` array, returning a list of strings representing the selected addresses.",
            "params": [],
            "returns": {
              "type_name": "ListString",
              "description": "a list of selected addresses.\n\n* The list contains only the strings of selected addresses.\n* Each string represents a single address selected in the AnchorPane of filtering.\n* The list is generated by streaming the checked CheckBoxes, applying the `filter()` method to select only the checked ones, and then mapping the text property of each checked CheckBox to its corresponding string value.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "private void filterClients() {\n\n    List<String> selectedAddresses = getSelectedAddresses();\n\n    // Filter the list of clients based on the addresses selected in the AnchorPane\n\n    for (Client client : ClientList) {\n\n        String address = client.getAdresse();\n\n        if (!selectedAddresses.contains(address)) {\n\n            client.setVisible(false);\n\n        }\n\n    }\n\n}\n",
              "description": "\nIn this example, the method filterClients filters a list of Client objects based on whether their address is contained within the list of selected addresses returned by the getSelectedAddresses method.\nThis way, we can apply different filters to the client list by modifying the code in the getSelectedAddresses method."
            },
            "name": "getSelectedAddresses",
            "location": {
              "start": 1325,
              "insert": 1325,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "76f89e05-8788-7898-1341-025b408e07ca",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "In Java code returns a list of selected names from an `AnchorPane` of filtering by streaming, filtering, and mapping the values of `CheckBox` objects.",
            "params": [],
            "returns": {
              "type_name": "List",
              "description": "a list of selected names from an AnchorPane of filtering controls.\n\n* The list contains only strings representing the selected names from the `namesCheckBoxes`.\n* The elements in the list are the texts of the selected checkboxes.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// A sample list of names that we will use to filter the checkboxes\nList<String> names = new ArrayList<>();\nnames.add(\"Alice\");\nnames.add(\"Bob\");\nnames.add(\"Charlie\");\nnames.add(\"David\");\nnames.add(\"Eve\");\nnames.add(\"Frank\");\n\n// Create a list of checkboxes with the names from our sample list\nCheckBox[] namesCheckBoxes = new CheckBox[names.size()];\nfor (int i = 0; i < names.size(); i++) {\n    CheckBox cb = new CheckBox(names.get(i));\n    namesCheckBoxes[i] = cb;\n}\n\n// Create a method that will return a list of the selected checkboxes' text values\nprivate List<String> getSelectedNames() {\n    // Récupérer les noms sélectionnés dans l'AnchorPane de filtrage\n    return namesCheckBoxes.stream()\n            .filter(CheckBox::isSelected)\n            .map(CheckBox::getText)\n            .collect(Collectors.toList());\n}\n\n// Display the selected checkboxes' text values in a message dialog box\nprivate void showSelectedNames() {\n    List<String> names = getSelectedNames();\n    String message = \"\";\n    for (int i = 0; i < names.size(); i++) {\n        message += \"Name: \" + names.get(i) + \"\\n\";\n    }\n    // Show the selected names in a message dialog box\n    Alert alert = new Alert(Alert.AlertType.INFORMATION);\n    alert.setTitle(\"Selected Names\");\n    alert.setHeaderText(null);\n    alert.setContentText(message);\n    alert.showAndWait();\n}\n",
              "description": "\nThe code in this example is quite short, and it should work correctly without any issues. It demonstrates how the `getSelectedNames()` method can be used to obtain a list of selected checkboxes' text values, and then displays these names in a message dialog box using the `showSelectedNames()` method."
            },
            "name": "getSelectedNames",
            "location": {
              "start": 1341,
              "insert": 1341,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "1b520562-34ec-67a4-9a40-f645a2f124af",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Retrieves all cinemas from a database, extracts unique addresses from them using Stream API, and returns a list of those addresses.",
            "params": [],
            "returns": {
              "type_name": "ListString",
              "description": "a list of unique cinema addresses retrieved from a database.\n\n* The output is a list of Strings, representing the unique addresses of cinemas.\n* The list contains the addresses of all cinemas retrieved from the database through the `getAllCinemas()` function.\n* The addresses are obtained by calling the `getAdresse()` method on each `Cinema` object in the list and then applying a `distinct()` operation to eliminate duplicates using the `Collectors.toList()` method.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "List<String> cinemaAddresses = new ArrayList<>();\n\ncinemaAddresses.add(\"Rue des Champs-Elysées 75008 Paris\");\n\ncinemaAddresses.add(\"Rue de la Tour Eiffel 75008 Paris\");\n\ncinemaAddresses.add(\"Rue du Colisée 75010 Paris\");\n\n// Add more cinema addresses...\n\nList<String> distinctCinemaAddresses = cinemaService.getCinemaAddresses();\n",
              "description": "\nHere is an explanation of how the code works:\n\n* The method getCinemaAddresses returns a list of all cinemas in the database, using the getAllCinemas() method.\n* Using the stream() method, a stream is created from the List of cinemas.\n* The map() method maps each cinema to its address, and then collects them into a new List of unique addresses.\n* Finally, the distinct() method filters out any duplicates in the List of addresses."
            },
            "name": "getCinemaAddresses",
            "location": {
              "start": 1357,
              "insert": 1357,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "17e51db2-0d32-c28b-944d-ab568fa48e64",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Retrieves a list of unique cinema names from a database by mapping and collecting the `nom` attributes of each `Cinema` object in the list.",
            "params": [],
            "returns": {
              "type_name": "ListString",
              "description": "a list of unique cinema names retrieved from the database.\n\n* The output is a list of unique strings, representing the names of cinemas.\n* The list is generated by streaming the `cinemas` list, applying the `map` method to extract the names, and then using the `distinct` method to remove duplicates.\n* Finally, the list is collected into a new list using the `collect` method.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public void displayAvailableCinemas() {\n    List<String> cinemaNames = getCinemaNames();\n    for (String cinemaName : cinemaNames) {\n        System.out.println(cinemaName);\n    }\n}\n",
              "description": "\nThe example is quite short and straightforward. It uses the getCinemaNames() method to retrieve a list of cinema names, then it loops through each name in the list and prints it to the console. \nIt is important to note that this code assumes that there are no duplicated cinemas in the database, which may not always be the case."
            },
            "name": "getCinemaNames",
            "location": {
              "start": 1379,
              "insert": 1379,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "3ef16fb7-1906-72a7-9b43-8987e2e87152",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Loads an fxml file and displays a stage with the content from the loaded fxml.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "Event Object that triggered the function, providing information about the event that occurred, such as the source of the event and the type of event.\n\nEvent type: The type of event that triggered the function execution, which could be any of the possible types recognized by the application.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    void afficherEventsClient(ActionEvent event) throws IOException {\n\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/AffichageEvenementClient.fxml\"));\n\n        Parent root = loader.load();\n\n        Scene scene = new Scene(root);\n\n        Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n\n        Stage stage = new Stage();\n\n        stage.setScene(scene);\n\n        stage.setTitle(\"Event Client\");\n\n        stage.show();\n\n        currentStage.close();\n\n    }\n",
              "description": ""
            },
            "name": "afficherEventsClient",
            "location": {
              "start": 1401,
              "insert": 1401,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 27,
            "docLength": null
          },
          {
            "id": "0e34ef14-3880-3d87-5a49-890e2b03c4d7",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Displays a FXML user interface for managing movies using an FXMLLoader and a Stage object.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "an action event that triggered the function execution, providing the necessary context for the code to perform its intended task.\n\n* `event` is an `ActionEvent`, indicating that the function was triggered by user action.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    void afficherMoviesClient(ActionEvent event) throws IOException {\n\n        Parent root = FXMLLoader.load(getClass().getResource(\"/filmuser.fxml\"));\n\n        Scene scene = new Scene(root);\n\n        Stage stage = new Stage();\n\n        stage.setScene(scene);\n\n        stage.setTitle(\"Movie Manegement\");\n\n        stage.show();\n\n    }\n",
              "description": "\nThe method above loads a fxml file called filmuser and creates a scene for it. Then, it sets the title of the stage to Movie Manegement and displays the scene on the window. The method is called when an event occurs in the GUI, such as a button click. This opens a new window with the contents of the filmuser fxml file in it."
            },
            "name": "afficherMoviesClient",
            "location": {
              "start": 1431,
              "insert": 1431,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 27,
            "docLength": null
          },
          {
            "id": "67f36b5c-2136-e3be-964f-fdb55673e5fb",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Loads an FXML file to display a product client interface, creates a new stage for the interface, and closes the previous stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the function, specifically the button click event that activates the function to display the product client interface.\n\n* `event`: An `ActionEvent` object representing a user action that triggered the function execution.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void afficherProduitsClient(ActionEvent event) throws IOException {\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/AfficherProduitClient.fxml\"));\n        Parent root = loader.load();\n        Scene scene = new Scene(root);\n        Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n        Stage stage = new Stage();\n        stage.setScene(scene);\n        stage.setTitle(\"Product Client\");\n        stage.show();\n        currentStage.close();\n    }\n",
              "description": "\nThis method loads the AfficherProduitClient.fxml file and displays a new stage with a title of \"Product Client\". The current stage is then closed, allowing the user to navigate to the new stage."
            },
            "name": "afficherProduitsClient",
            "location": {
              "start": 1461,
              "insert": 1461,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 27,
            "docLength": null
          },
          {
            "id": "978cb63d-b841-308d-914f-ad98386f03cd",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Loads a FXML file \"SeriesClient.fxml\" and displays it on a new stage, replacing the current stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the execution of the `afficherSeriesClient()` method, specifically the button click event on the client series view.\n\n* Event type: `ActionEvent`\n* Source object: (`Node`) reference to the element that triggered the event",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void afficherSeriesClient(ActionEvent event) throws IOException {\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/SeriesClient.fxml\"));\n        Parent root = loader.load();\n        Scene scene = new Scene(root);\n        Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n        Stage stage = new Stage();\n        stage.setScene(scene);\n        stage.setTitle(\"Serie Client\");\n        stage.show();\n        currentStage.close();\n    }\n",
              "description": "\nThe method afficherSeriesClient is called when the user clicks on a button, and it is expected to take an ActionEvent as a parameter. The method uses the FXMLLoader class to load the SeriesClient.fxml file into a Parent object, and then creates a new Scene with this parent object as its root. It then gets the stage of the node that was clicked on (which corresponds to the button that was pressed) using getScene().getWindow(), and creates a new Stage that is then displayed. Finally, the current stage is closed.\n\nIt is important to note that in this example, the method uses the getClass() method of the class that contains it to get the resource for the fxml file, which is necessary when loading FXML files from within Java code."
            },
            "name": "afficherSeriesClient",
            "location": {
              "start": 1491,
              "insert": 1491,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 27,
            "docLength": null
          },
          {
            "id": "c36eafb5-ce64-1f8d-5c4f-6700b0e6d16c",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Allows users to add comments to a cinema. When a user clicks on the \"Add Comment\" button, the function takes the user's comment and analyzes its sentiment using a sentiment analysis controller. If the comment is not empty, the function creates a new `CommentaireCinema` object with the cinema ID, user ID, message, and sentiment result, and saves it to the database using the `CommentaireCinamaService`.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid addCommentaire() {\n    String message = txtAreaComments.getText();\n    if (message.isEmpty()) {\n        Alert alert = new Alert(Alert.AlertType.WARNING);\n        alert.setTitle(\"Commentaire vide\");\n        alert.setContentText(\"Ajouter un commentaire\");\n        alert.showAndWait();\n    } else {\n        SentimentAnalysisController sentimentAnalysisController = new SentimentAnalysisController();\n        String sentimentResult = sentimentAnalysisController.analyzeSentiment(message);\n        System.out.println(cinemaId + \" \" + new CinemaService().getCinema(cinemaId));\n        CommentaireCinema commentaire = new CommentaireCinema(new CinemaService().getCinema(cinemaId), (Client) new UserService().getUserById(2), message, sentimentResult);\n        System.out.println(commentaire + \" \" + new UserService().getUserById(2));\n        CommentaireCinemaService commentaireCinemaService = new CommentaireCinemaService();\n        commentaireCinemaService.create(commentaire);\n        txtAreaComments.clear();\n    }\n}\n",
              "description": "\nThis method should not have any explanation."
            },
            "name": "addCommentaire",
            "location": {
              "start": 1521,
              "insert": 1521,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 37,
            "docLength": null
          },
          {
            "id": "5cfd38bb-584e-61b7-d446-641b548f2287",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Adds a comment to a cinema and displays all comments for that cinema when the event is triggered.",
            "params": [
              {
                "name": "event",
                "type_name": "MouseEvent",
                "description": "user's click on the \"Add Comment\" button, which triggers the execution of the `addCommentaire()` method and the display of all comments for the specified `cinemaId`.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    void AddComment(MouseEvent event) {\n\n        addCommentaire();\n\n        displayAllComments(cinemaId);\n\n    }\n",
              "description": "\nIn this example, the method AddComment is called upon a mouse click event. It calls the addCommentaire() and displayAllComments() methods. The addCommentaire() method adds a new comment to the database using the CommentaireCinema object that was created in the previous step. Then, the displayAllComments() method retrieves all comments for a specific cinema using the cinemaId as an argument and displays them on screen using a ScrollPane and HBox containers.\n\nIn summary, AddComment adds a new comment to the database, while displayAllComments retrieves and displays all existing comments for a specific cinema."
            },
            "name": "AddComment",
            "location": {
              "start": 1561,
              "insert": 1561,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "0497adcf-bbec-f989-7c4b-0b86ff59be79",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Retrieves all comments related to a specific cinema, using a service to read the comments and then filtering them based on the cinema ID.",
            "params": [
              {
                "name": "cinemaId",
                "type_name": "int",
                "description": "Id of the cinema for which the comments are to be retrieved.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "list",
              "description": "a list of `CommentaireCinema` objects for the specified cinema ID.\n\n* The output is a list of `CommentaireCinema` objects, representing all comments for a given cinema ID.\n* Each comment is associated with a cinema ID and a list of other attributes such as text, author, date, etc.\n* The list of comments is obtained through a service call to the CommentaireCinemaService class.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "private void displayAllComments(int cinemaId) {\n    List<CommentaireCinema> comments = getAllComment(cinemaId);\n    VBox allCommentsContainer = new VBox();\n    \n    for (CommentaireCinema comment : comments) {\n        HBox commentView = addCommentToView(comment);\n        allCommentsContainer.getChildren().add(commentView);\n    }\n    \n    ScrollPaneComments.setContent(allCommentsContainer);\n}\n",
              "description": "\nThis method uses the getAllComment method to retrieve a list of comments associated with a cinema ID, and then creates a view for each comment by calling the addCommentToView method. Finally, it sets the content of the ScrollPaneComments component to the created view. The addCommentToView method is not included in this example as it is already provided in the given code block."
            },
            "name": "getAllComment",
            "location": {
              "start": 1573,
              "insert": 1573,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "46c4cec0-dfbe-39bb-ec4a-e8c68cc12276",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Creates a container for displaying a user's comment and image, with a transparent background and padding. It also sets the image view's position to center the image within the circle.",
            "params": [
              {
                "name": "commentaire",
                "type_name": "CommentaireCinema",
                "description": "CommentaireCinema object passed to the function, containing information about the user's comment and image.\n\n* `client`: contains information about the user who made the comment\n\t+ `getPhoto_de_profil()`: the URL of the user's profile picture\n* `getCommentaire()`: the actual comment made by the user\n\nBoth properties are used to generate the image and text display for the comment.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HBox",
              "description": "a `HBox` container containing an image and text related to a comment.\n\n* `HBox contentContainer`: This is the container that holds all the elements related to a comment, including the image, username, and comment text. It has a prefheight of 50 pixels and a style of `-fx-background-color: transparent; -fx-padding: 10px`.\n* `ImageBox imageBox`: This is the box that holds the image of the user who made the comment. It has no style defined.\n* `ImageView userImage`: This is the image view that displays the image of the user. It has a fit width and height of 50 pixels each, and is centered in the image box using `setTranslateX` and `setTranslateY`.\n* `Group imageGroup`: This is the group that holds both the image and the image view. It has no style defined.\n* `Text userName`: This is the text that displays the user's name. It has a style of `-fx-font-family: 'Arial Rounded MT Bold'; -fx-font-style: bold;`.\n* `Text commentText`: This is the text that displays the comment made by the user. It has a style of `-fx-font-family: 'Arial'; -fx-max-width: 300 ;`.\n* `VBox textBox`: This is the box that holds both the user name and comment text. It has no style defined.\n* `CardContainer cardContainer`: This is the container that holds all the elements related to a single comment, including the image, username, and comment text. It has a style of `-fx-background-color: white; -fx-padding: 5px ; -fx-border-radius: 8px; -fx-border-color: #000; -fx-background-radius: 8px;`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "import javafx.scene.control.ScrollPane;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.text.Text;\nimport java.util.List;\nimport static MovieFinder_FX_Application.getAllComment;\n/**\n * Example of how to use addCommentToView method\n */\npublic class CommentaireCinemaExample {\n    public static void main(String[] args) {\n        List<CommentaireCinema> comments = getAllComment(\"cinemaId\");\n        for (CommentaireCinema comment : comments) {\n            HBox commentView = addCommentToView(comment);\n            System.out.println(commentView);\n        }\n    }\n}\n",
              "description": "\nThe above code will use the method getAllComment from MovieFinder_FX_Application to get a list of CommentaireCinema objects for a specific cinemaId. Then it loops through each comment and calls addCommentToView method passing in the current comment object, which will return a HBox object containing the image, comment text, and user name. The returned HBox object is then printed to console."
            },
            "name": "addCommentToView",
            "location": {
              "start": 1601,
              "insert": 1601,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 129,
            "docLength": null
          },
          {
            "id": "3b52e490-2319-5991-2f49-e43e68508cdb",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Displays all comments associated with a particular cinema ID in a scroll pane.",
            "params": [
              {
                "name": "cinemaId",
                "type_name": "int",
                "description": "identity of the cinema for which all comments are to be displayed.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main extends Application {\n    public static void main(String[] args) {\n        launch(args);\n    }\n\n    @Override\n    public void start(Stage primaryStage) {\n        int cinemaId = 1; // This can be any valid integer\n        displayAllComments(cinemaId);\n    }\n}\n",
              "description": ""
            },
            "name": "displayAllComments",
            "location": {
              "start": 1733,
              "insert": 1733,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "39b56744-2476-1fbf-be48-44340841403c",
            "ancestors": [
              "07ae0251-db98-5484-214e-d4263cdf1108"
            ],
            "type": "function",
            "description": "Sets the opacity of a component to 1, makes an component invisible and another visible.",
            "params": [
              {
                "name": "event",
                "type_name": "MouseEvent",
                "description": "mouse event that triggered the execution of the `closeCommets()` method.\n\nEvent type: MouseEvent\nTarget element: AnchorComments\nCurrent state: Visible",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void initialize() {\n        // Initialize logic here\n        listCinemaClient.setOpacity(1);\n        AnchorComments.setVisible(false);\n        listCinemaClient.setVisible(true);\n    }\n",
              "description": "\nIn the above example, the method closeCommets is called when a mouse event occurs on the application window. The method sets the opacity of the comments list to 1 and hides the anchor element containing the comments. Finally, it shows the original list of cinemas. This is done by setting the visibility of the original list to true.\n\nNote that this example uses the FXML annotation to indicate that closeCommets is called when a mouse event occurs on the application window."
            },
            "name": "closeCommets",
            "location": {
              "start": 1757,
              "insert": 1757,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "DashboardResponsableController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/cinemas/DashboardResponsableController.java",
    "content": {
      "structured": {
        "description": "a web application that allows users to manage cinemas, sessions, and images. It uses JavaFX for the user interface and Spring WebFlux for RESTful API calls. The code includes a form for adding new cinemas, listing existing cinemas, displaying session information, and importing images. It also includes logic for handling file uploads and storing images in a designated directory. Overall, the code provides a comprehensive solution for managing cinema-related data through both user interface and API interactions.",
        "items": [
          {
            "id": "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
            "ancestors": [],
            "type": "function",
            "description": "Is responsible for handling user interactions related to the dashboard section of the application. It provides functionality such as displaying the room form, back button, and cinema list pane, as well as handling events related to showing sessions and importing images. The class also includes methods for loading seances and showing session forms.",
            "name": "DashboardResponsableController",
            "location": {
              "start": 129,
              "insert": 129,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 2395,
            "docLength": null
          },
          {
            "id": "b88cde02-4f74-c88e-4d4d-838fda4b3faf",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Sets the value of the `responsableDeCinema` field to the input parameter `resp`.",
            "params": [
              {
                "name": "resp",
                "type_name": "Responsable_de_cinema",
                "description": "Responsable_de_cinema object that will be associated with the method's caller, thereby transferring ownership of the object to the method caller.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        Responsable_de_cinema resp = new Responsable_de_cinema(\"John\", \"Doe\", \"johndoe@email.com\");\n        Cinema cinema = new Cinema(\"Cineplex\", \"123 Main Street\", \"Anytown, USA 12345\", resp);\n        cinema.setData(resp); // set the data of the cinema instance\n    }\n}\n",
              "description": ""
            },
            "name": "setData",
            "location": {
              "start": 305,
              "insert": 299,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 298,
                "end": 303
              }
            },
            "item_type": "method",
            "length": 5,
            "docLength": 5
          },
          {
            "id": "3213de09-5467-5582-874e-9eeee624b948",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Creates an Alert object and displays a message in it using the `show()` method.",
            "params": [
              {
                "name": "message",
                "type_name": "String",
                "description": "text to be displayed as an alert message when the `showAlert()` method is called.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "showAlert(\"Hello World!\");\n",
              "description": "\nThis will display a dialog box with the title \"Information\" and the content text \"Hello World!\"."
            },
            "name": "showAlert",
            "location": {
              "start": 321,
              "insert": 315,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 314,
                "end": 319
              }
            },
            "item_type": "method",
            "length": 15,
            "docLength": 5
          },
          {
            "id": "081790cb-7977-3f89-a64c-82787ecc071b",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Allows users to input cinema details, including name and address. If fields are empty, an alert is displayed. Then, a responsible cinema object is created based on ID, and the CinemaService creates a new cinema object using the provided details.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "action event triggered by the user's click on the \"Add Cinema\" button, which initiates the functionality of the function.\n\n* `tfNom`: A text field containing the name of the cinema.\n* `tfAdresse`: A text field containing the address of the cinema.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\nprivate void addCinema(ActionEvent event) {\n\n    if (tfNom.getText().isEmpty() || tfAdresse.getText().isEmpty()) {\n\n        showAlert(\"Please complete all fields!\");\n\n        return;\n\n    }\n\n    // Fetch the responsible cinema by its ID\n\n    Responsable_de_cinema responsableDeCinema = (Responsable_de_cinema) tfNom.getScene().getWindow().getUserData();\n\n    URI uri = null;\n\n    try {\n\n        String fullPath = image.getImage().getUrl();\n\n        String requiredPath = fullPath.substring(fullPath.indexOf(\"/img/cinemas/\"));\n\n        uri = new URI(requiredPath);\n\n    } catch (Exception e) {\n\n        System.out.println(e.getMessage());\n\n    }\n\n    // Create the cinema object\n\n    Cinema cinema = new Cinema(tfNom.getText(), tfAdresse.getText(), responsableDeCinema, uri.getPath(), \"Pending\");\n\n    // Call the CinemaService to create the cinema\n\n    CinemaService cs = new CinemaService();\n\n    cs.create(cinema);\n\n    showAlert(\"Cinema added successfully!\");\n}\n",
              "description": "\nThis method is used in a JavaFX controller class for handling the add cinema button press event, which triggers when the user clicks the \"Add\" button on the cinema adding form. This method first checks if the input fields are filled by the user. If not, it shows an alert message to inform the user that they need to fill all input fields. Then, this method fetches the responsible cinema object by its ID from the JavaFX scene window's user data. Next, it creates a new Cinema object with the given information and sets its statut property to \"Pending\". Finally, this method calls the create() method of the CinemaService class with the newly created cinema object as a parameter, which adds the cinema to the database. This method also shows an alert message when the cinema is added successfully."
            },
            "name": "addCinema",
            "location": {
              "start": 339,
              "insert": 339,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 53,
            "docLength": null
          },
          {
            "id": "1f279cc0-47c8-7196-f44f-c19fb56f5f48",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Allows the user to select an image file, which is then copied to a specified directory and set as the image for a `Image` component.",
            "params": [
              {
                "name": "event",
                "type_name": "MouseEvent",
                "description": "mouse event that triggered the function execution, providing the necessary information to determine the appropriate action to take.\n\n* `event`: A `MouseEvent` object representing the user's action that triggered the function.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid selectImage(MouseEvent event) {\n    FileChooser fileChooser = new FileChooser();\n    fileChooser.setTitle(\"Sélectionner une image\");\n    File selectedFile = fileChooser.showOpenDialog(null);\n    if (selectedFile != null) {\n        try {\n            String destinationDirectory = \"./src/main/resources/img/cinemas/\";\n            Path destinationPath = Paths.get(destinationDirectory);\n            String uniqueFileName = System.currentTimeMillis() + \"_\" + selectedFile.getName();\n            Path destinationFilePath = destinationPath.resolve(uniqueFileName);\n            Files.copy(selectedFile.toPath(), destinationFilePath);\n            Image selectedImage = new Image(destinationFilePath.toUri().toString());\n            image.setImage(selectedImage);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
              "description": "\nThis code uses a FileChooser to allow the user to select an image, and then copies that file to a destination directory using Files.copy. Once the file has been copied, it is loaded as an Image into the image field using setImage method of the ImageView component."
            },
            "name": "selectImage",
            "location": {
              "start": 395,
              "insert": 395,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 37,
            "docLength": null
          },
          {
            "id": "3d3a5e8c-4701-2c8e-bc43-68b41e67d13a",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Loads accepted cinemas and sets pane visibility, adds cinema names to a combo box, and listens for selection changes to load movies and rooms for the selected cinema.",
            "params": [
              {
                "name": "location",
                "type_name": "URL",
                "description": "URL of the initial page to load, which in this case is the home page with the list of cinemas.\n\n* `location`: A `URL` object representing the location of the application.\n* `resources`: A `ResourceBundle` object containing localized messages and data for the application.",
                "complex_type": true
              },
              {
                "name": "resources",
                "type_name": "ResourceBundle",
                "description": "ResourceBundle containing the translation keys for the application's messages, which are used to display the labels and values in the user interface.\n\n* `location`: represents the URL of the web page being loaded.\n* `resources`: contains resource bundles for displaying messages and other information to the user.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class CinemaController {\n    @FXML private ComboBox<String> comboCinema;\n    @FXML private ImageView image;\n    \n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        HashSet<Cinema> acceptedCinemas = loadAcceptedCinemas();\n        \n        cinemaFormPane.setVisible(true);\n        sessionFormPane.setVisible(false);\n        cinemaListPane.setVisible(true);\n        SessionTableView.setVisible(false);\n        addRoomForm.setVisible(false);\n        RoomTableView.setVisible(false);\n        sessionButton.setVisible(true);\n        backSession.setVisible(false);\n        backButton.setVisible(false);\n        \n        for (Cinema c : acceptedCinemas) {\n            comboCinema.getItems().add(c.getNom());\n        }\n        \n        comboCinema.getSelectionModel().selectedItemProperty().addListener((ObservableValue<? extends String> observable, String oldValue, String newValue) -> {\n            if (newValue != null) {\n                Cinema selectedCinema = acceptedCinemas.stream()\n                        .filter(cinema -> cinema.getNom().equals(newValue))\n                        .findFirst()\n                        .orElse(null);\n                \n                if (selectedCinema != null) {\n                    loadMoviesForCinema(selectedCinema.getId_cinema());\n                    loadRoomsForCinema(selectedCinema.getId_cinema());\n                }\n            }\n        });\n    }\n}\n",
              "description": ""
            },
            "name": "initialize",
            "location": {
              "start": 435,
              "insert": 435,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 65,
            "docLength": null
          },
          {
            "id": "1760b3db-1f7f-f683-e549-dedf83bd1a81",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Clears the list of movies for a specified cinema and then reads the movies from the FilmcinemaService, adding them to the combo movie list.",
            "params": [
              {
                "name": "cinemaId",
                "type_name": "int",
                "description": "unique identifier of the cinema for which the movies are to be loaded.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main {\n  public static void main(String[] args) {\n    int cinemaId = 1; // This is the id of a cinema we want to get movies for.\n    FilmcinemaService fs = new FilmcinemaService();\n    List<Film> moviesForCinema = fs.readMoviesForCinema(cinemaId);\n    for (Film f : moviesForCinema) {\n      System.out.println(\"moviesForCinema: \" + f);\n    }\n  }\n}\n",
              "description": "\nThis code first defines the cinema we want to get movies for, which is identified by its id. We then create a new FilmcinemaService object and use it to call the method readMoviesForCinema, passing in the cinemaId as an argument. The result of this method call is stored in a variable named moviesForCinema.\nThe next step is to loop through the movies in the list returned by the method, using a for each loop and printing out the name of each movie with a println statement. This will output a list of all the movies for that cinema."
            },
            "name": "loadMoviesForCinema",
            "location": {
              "start": 503,
              "insert": 503,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "f114f1e8-c0b4-eebc-b343-f81b9d81cf87",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Clears the items of a `JList` called `comboRoom`, then reads the rooms for a given cinema using the `SalleService`, and adds the room names to the list.",
            "params": [
              {
                "name": "cinemaId",
                "type_name": "int",
                "description": "id of the cinema for which the rooms are being loaded.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class CinemaController {\n    @FXML\n    private ComboBox<String> comboRoom;\n\n    private void initialize() {\n        int cinemaId = 1234567890; // The ID of the desired cinema\n        loadRoomsForCinema(cinemaId);\n    }\n}\n",
              "description": "\nHere, we use the method by passing in an integer representing the id of a cinema. We then call the loadRoomsForCinema method to get the rooms for that cinema and add them to the combo box."
            },
            "name": "loadRoomsForCinema",
            "location": {
              "start": 523,
              "insert": 523,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "fe9cdab0-dca7-55ab-c24c-44e7f7e05b57",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Loads a set of accepted cinemas from a CinemaService and displays them as cards on a flow pane.",
            "params": [],
            "returns": {
              "type_name": "HashSetCinema",
              "description": "a set of Cinema objects representing the accepted cinemas.\n\n* `HashSet<Cinema>` represents a set of accepted cinemas in the system.\n* The set contains only cinemas with a \"Accepted\" status.\n* The list of cinemas is collected from the `read()` method of the `CinemaService` class.\n* The `HBox` objects created for each cinema are added to the `cinemaFlowPane` component.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Main extends Application {\n    @Override\n    public void start(Stage primaryStage) {\n        HashSet<Cinema> acceptedCinemas = cinemaService.loadAcceptedCinemas();\n        // ...\n    }\n}\n",
              "description": ""
            },
            "name": "loadAcceptedCinemas",
            "location": {
              "start": 541,
              "insert": 541,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 41,
            "docLength": null
          },
          {
            "id": "0e512ff5-3b1c-c6b2-cb4d-e11c025cf200",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Retrieves a list of cinemas from a service, filters them based on their status, and returns a set of accepted cinemas.",
            "params": [],
            "returns": {
              "type_name": "HashSetCinema",
              "description": "a hash set of Cinema objects that represent accepted cinemas.\n\n1. The output is a `HashSet` containing only cinemas that have a `Statut` equal to \"Accepted\".\n2. The `HashSet` contains only a subset of the original list of cinemas, specifically those that meet the filter condition.\n3. The size of the `HashSet` is either zero or the number of cinemas that meet the filter condition, depending on whether any cinemas have a `Statut` equal to \"Accepted\".",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Movie {\n    private Cinema cinema;\n    private List<Seance> seances;\n    \n    public Movie(Cinema cinema, List<Seance> seances) {\n        this.cinema = cinema;\n        this.seances = seances;\n    }\n    \n    public void setCinema(Cinema cinema) {\n        this.cinema = cinema;\n    }\n    \n    public Cinema getCinema() {\n        return cinema;\n    }\n    \n    public List<Seance> getSeances() {\n        return seances;\n    }\n    \n    public void setSeances(List<Seance> seances) {\n        this.seances = seances;\n    }\n}\n",
              "description": "\nTo use the method, we need to first define a Cinema and Seance class:\n"
            },
            "name": "chargerAcceptedCinemas",
            "location": {
              "start": 585,
              "insert": 585,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 29,
            "docLength": null
          },
          {
            "id": "c46d48af-cdb9-b3a8-7347-c6f9d287e527",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Creates a card that displays a cinema's details, including its name, capacity, and delete button. It also includes a Facebook icon and anchor for opening the cinema's Facebook page.",
            "params": [
              {
                "name": "cinema",
                "type_name": "Cinema",
                "description": "cinema object that will be deleted or updated, and is used to access its properties and methods in the function.\n\n* `id_cinema`: the unique identifier of the cinema\n* `nom_cinema`: the name of the cinema\n* `adresse_cinema`: the address of the cinema\n* `capacite_cinema`: the capacity of the cinema.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "Optional",
              "description": "a Card object containing a Circle and an FontAwesomeIconView, representing a cinema.\n\n* `card`: The root element of the card that contains information about a cinema.\n* `SalleCircle`: A circle with a radius of 30 pixels used to represent the cinema's capacity.\n* `facebookIcon`: An instance of `FontAwesomeIconView` representing the Facebook logo.\n* `facebookAnchor`: An instance of `Hyperlink` that displays the Facebook page for the cinema.\n* `circlefacebook`: A circle with a radius of 30 pixels used to represent the Facebook logo.\n* `salleIcon`: An instance of `FontAwesomeIconView` representing the building icon used to indicate the cinema's location.\n* `cardContainer`: The container element that holds the card containing information about the cinema.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "import javafx.scene.control.TableColumn;\nimport javafx.scene.control.TableView;\nimport javafx.scene.layout.Pane;\nimport javafx.scene.paint.Color;\nimport javafx.scene.shape.Circle;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main extends Pane {\n    public static void main(String[] args) {\n        Main main = new Main();\n        TableView<Cinema> cinemaTable = new TableView<>();\n        Cinema cinema = new Cinema(\"cinema\");\n        List<Salle> salles = new ArrayList<>();\n        Salle salle1 = new Salle(1, \"Salle 1\", 50);\n        Salle salle2 = new Salle(2, \"Salle 2\", 100);\n        salles.add(salle1);\n        salles.add(salle2);\n        cinema.setSalles(salles);\n        cinemaTable.getColumns().addAll(new TableColumn<>(\"Cinema\", Cinema::getName), new TableColumn<>(\"Number of Salles\", Cinema::getNumberOfSalles));\n        cinemaTable.getItems().add(cinema);\n    }\n}\n",
              "description": ""
            },
            "name": "createCinemaCard",
            "location": {
              "start": 617,
              "insert": 617,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 639,
            "docLength": null
          },
          {
            "id": "21c78abb-97ae-0c81-6945-a45d52225cad",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "c46d48af-cdb9-b3a8-7347-c6f9d287e527"
            ],
            "type": "function",
            "description": "Generates a `TableCell` instance that displays a button for deleting a room from a `TableView`. When the button is clicked, the function calls the `SalleService` to delete the room and then removes it from the `TableView`.",
            "params": [
              {
                "name": "param",
                "type_name": "TableColumn<Salle, Void>",
                "description": "TableColumn object that triggered the cell's action, and it is used to get the index of the room in the table view.\n\n* `param`: A `TableColumn<Salle, Void>` object representing a column in a table.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "TableCellSalle",
              "description": "a `TableCell` object that displays a delete button for each room in the table.\n\n* The output is a `TableCell` object, which represents a cell in a table.\n* The cell contains a button with the label \"Delete\".\n* The button has an `OnAction` handler that deletes the item at the specified position in the table when clicked.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n    public TableCell<Salle, Void> call(TableColumn<Salle, Void> param) {\n        return new TableCell<Salle, Void>() {\n            private final Button deleteRoomButton = new Button(\"Supprimer\");\n\n            {\n                deleteRoomButton.getStyleClass().add(\"delete-btn\");\n                deleteRoomButton.setOnAction(event -> {\n                    Salle salle = getTableView().getItems().get(getIndex());\n                    SalleService salleService = new SalleService();\n                    salleService.delete(salle);\n                    getTableView().getItems().remove(salle);\n                });\n            }\n\n            @Override\n            protected void updateItem(Void item, boolean empty) {\n                super.updateItem(item, empty);\n\n                if (empty) {\n                    setGraphic(null);\n                } else {\n                    setGraphic(new HBox(deleteRoomButton));\n                }\n            }\n        };\n    }\n",
              "description": "\nExplanation: This method is a cell factory that is responsible for creating the delete button in each row of the table. The first argument passed to the `call` method is the column of the table, and the second argument is the data type. In this case, we are expecting the data type to be Void since there is no specific data being returned from the cell factory.\n\nThe method returns a new instance of TableCell, which is responsible for displaying data in each row. The TableCell class has an abstract method named `updateItem`, which is used to update the content of the cell based on the item and whether it is empty or not. In this case, we want to create a delete button only when the table row is not empty, so we first check if the data is empty or not using the boolean variable `empty`. If the data is not empty, we set the graphic of the cell as a new instance of HBox containing a button.\n\nThe button is created by creating a new instance of Button and setting its text to \"Supprimer\" (French for delete). The button is also added to the style class of the cell so that it can be styled in CSS file.\n\nWhen the button is clicked, we execute the code inside the `setOnAction` method which is responsible for deleting the room from the database and updating the table view accordingly. We first get the Salle object that corresponds to the current row by using the `getTableView().getItems().get(getIndex())` method. Then, we create a new instance of SalleService and use it to delete the room from the database. Finally, we remove the deleted room from the table view by using the `getTableView().getItems().remove(salle)` method.\n\nOverall, this method is responsible for creating a delete button in each row of the table that can be used to delete the corresponding room from the database when clicked."
            },
            "name": "call",
            "location": {
              "start": 979,
              "insert": 979,
              "offset": " ",
              "indent": 16,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "9bf5ce58-7228-8089-8e4e-93a54357ae6f",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "c46d48af-cdb9-b3a8-7347-c6f9d287e527",
              "21c78abb-97ae-0c81-6945-a45d52225cad"
            ],
            "type": "function",
            "description": "Updates an item's graphic based on whether it is empty or not. If the item is empty, the function sets its graphic to null. Otherwise, it sets the graphic to a new HBox containing a delete room button.",
            "params": [
              {
                "name": "item",
                "type_name": "Void",
                "description": "Void to be updated, which is then passed to the superclass's `updateItem()` method for further processing.\n\n* `item`: A void value representing an item to be updated.\n* `empty`: A boolean value indicating whether the item is empty or not.",
                "complex_type": true
              },
              {
                "name": "empty",
                "type_name": "boolean",
                "description": "status of the item being updated, with `true` indicating that the item is empty and `false` indicating otherwise.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "private void addRoom(ActionEvent event) {\n    String name = roomName.getText();\n    int capacity = Integer.parseInt(capacityField.getText());\n\n    Room newRoom = new Room(name, capacity);\n\n    // updateItem is called for each item in the tableview. In this case, the item being updated is a row in the table that represents a room.\n    for (int i = 0; i < rooms.size(); i++) {\n        if (rooms.get(i).getName().equals(name)) {\n            // updateItem is used to set a button inside each row to allow for removing a room.\n            roomsTableView.getSelectionModel().select(i);\n            roomsTableView.updateItem(newRoom, true);\n        }\n    }\n}\n",
              "description": "\nIn this example, addRoom method is called when the user clicks on the \"Add Room\" button. It updates each row in the tableview that represents a room by setting a button inside of it using updateItem method. In order to do so, it gets the name of the new room from the user input (roomName field) and its capacity from the user input as well (capacityField). After this, it creates a Room object with these values, and then uses a for loop to search through the list of rooms that is being shown in the tableview. If it finds a matching name, it selects the row that represents that room and updates it by calling updateItem method with the new Room object as its parameter.\n"
            },
            "name": "updateItem",
            "location": {
              "start": 1009,
              "insert": 1009,
              "offset": " ",
              "indent": 24,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "24bd6f8c-c37b-128a-cd45-8beb62281bc3",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "c46d48af-cdb9-b3a8-7347-c6f9d287e527"
            ],
            "type": "function",
            "description": "Updates an item's quantity based on user input. If the quantity is null or empty, it sets the text to null. Otherwise, it sets the text to the updated quantity.",
            "params": [
              {
                "name": "nb_salles",
                "type_name": "Integer",
                "description": "number of sales, which is used to set the text value of the `setText()` method call.\n\n* `nb_salles` represents the number of places available for renting.\n* It can be null or an integer value.\n* When it is not null, it signifies that there are available places for renting.",
                "complex_type": true
              },
              {
                "name": "empty",
                "type_name": "boolean",
                "description": "state of the item, with a value of `true` indicating an empty item and a value of `false` indicating an item with a number of places.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class RoomTableCell extends TableCell<Cinema, Integer> {\n    @Override\n    protected void updateItem(Integer nb_salles, boolean empty) {\n        super.updateItem(nb_salles, empty);\n        if (empty || nb_salles == null) {\n            setText(null);\n        } else {\n            setText(nb_salles + \" places\");\n        }\n    }\n}\n",
              "description": "\nThis code creates a TableCell for a table in the Cinema class that displays the number of seats available. The method updateItem is overridden to display the number of places as an integer. If the cell is empty or has no item (i.e., when it first loads), the text is set to null. Otherwise, the number of places is displayed with a string \"places\" appended after it.\n\nIt is important to note that the method updateItem is called for every cell in the table and must be optimized for performance."
            },
            "name": "updateItem",
            "location": {
              "start": 1037,
              "insert": 1037,
              "offset": " ",
              "indent": 16,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "13d3060f-4316-1caa-8c45-6f1563909c52",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "c46d48af-cdb9-b3a8-7347-c6f9d287e527"
            ],
            "type": "function",
            "description": "1) calls super's `startEdit`, 2) checks if the item is empty, and 3) creates a `TextField` with the item's value and sets an `OnAction` listener to commit the edit when the user types something.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Override\n\npublic void startEdit() {\n\n    super.startEdit();\n\n    if (isEmpty()) {\n\n        return;\n\n    }\n\n    TextField textField = new TextField(getItem().toString());\n\n    textField.setOnAction(event -> {\n\n        commitEdit(Integer.parseInt(textField.getText()));\n\n    });\n\n    setGraphic(textField);\n\n    setText(null);\n\n}\n",
              "description": "\nHere is a breakdown of the code:\n* The method startEdit from super class TableCell is called first to perform any general actions.\n* An if statement is used to check if the cell is empty, and if so, return without performing any additional steps.\n* A new TextField object is created using getItem() which contains the value of the cell being edited. The setOnAction method is then added to listen for changes to text within the TextField, and upon pressing enter or committing the edit, the commitEdit method is called with an Integer parsed from the input text.\n* Finally, the graphic of the cell is set to the newly created TextField, and the text property of the cell is set to null.\nThis example code should be as short as possible and work correctly."
            },
            "name": "startEdit",
            "location": {
              "start": 1057,
              "insert": 1057,
              "offset": " ",
              "indent": 16,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "5818f9fc-e6d6-84ae-b54c-9e566f2e5d65",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "c46d48af-cdb9-b3a8-7347-c6f9d287e527"
            ],
            "type": "function",
            "description": "In Java is used to cancel any ongoing editing activity and reset the text and graphic properties of an object to their original values.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "import java.util.ArrayList;\n\nimport javafx.scene.control.TableCell;\nimport javafx.scene.control.TableColumn;\nimport javafx.scene.control.TableView;\nimport javafx.scene.text.Text;\n\npublic class ReservationTable extends TableView<Reservation> {\n    private ArrayList<Reservation> reservations = new ArrayList<>();\n\n    public ReservationTable() {\n        super();\n\n        this.getColumns().add(new TableColumn<>(\"Name\"));\n        this.getColumns().add(new TableColumn<>(\"Phone Number\"));\n        this.getColumns().add(new TableColumn<>(\"Email\"));\n        this.getColumns().add(new TableColumn<>(\"Number of Seats\"));\n    }\n\n    public void setReservations(ArrayList<Reservation> reservations) {\n        this.reservations = reservations;\n    }\n\n    public ArrayList<Reservation> getReservations() {\n        return this.reservations;\n    }\n}\n\npublic class Reservation extends TableCell<Reservation, Integer> {\n    @Override\n    public void updateItem(Integer item, boolean empty) {\n        super.updateItem(item, empty);\n\n        if (empty || item == null) {\n            setText(\"\");\n            setGraphic(null);\n            return;\n        }\n\n        setText(String.valueOf(getItem() + \" places\"));\n\n        TableColumn<Reservation, Integer> column = getTableView().getColumns().get(getIndex());\n        if (column != null) {\n            column.setCellFactory(e -> new ReservationTableCell<>());\n        }\n    }\n}\n\npublic class ReservationTableCell extends TableCell<Reservation, Integer> {\n    @Override\n    public void cancelEdit() {\n        super.cancelEdit();\n\n        setText(getItem() + \" places\");\n\n        setGraphic(null);\n    }\n}\n",
              "description": ""
            },
            "name": "cancelEdit",
            "location": {
              "start": 1085,
              "insert": 1085,
              "offset": " ",
              "indent": 16,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "8a383561-5615-9ebc-9743-c53f513b3216",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "c46d48af-cdb9-b3a8-7347-c6f9d287e527"
            ],
            "type": "function",
            "description": "Updates the number of places in a `Salle` object based on a user input, then calls the super method to commit the change, and sets the text and graphic of the cell to display the updated value.",
            "params": [
              {
                "name": "newValue",
                "type_name": "Integer",
                "description": "new value of the number of places for the salle to be updated by the `SalleService`.\n\n* `Integer newValue`: The new value for the number of places in a salle.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML private TableColumn<Salle, Integer> nbPlacesCol;\n\n@Override\n    public void initialize(URL url, ResourceBundle rb) {\n        // TODO\n    }\n\n    @FXML\n    private void loadRooms() {\n        SalleService salleService = new SalleService();\n        List<Salle> roomsList = salleService.getAll();\n        roomsList.stream().forEach(room -> {\n            this.roomsTableView.getItems().add(new Salle(\n                room.getNom(), \n                room.getType(),\n                room.getPrix(), \n                room.getNb_places()\n            ));\n        });\n    }\n\n@FXML\nprivate void updateRoomsTableView() {\n    this.roomsTableView.refresh();\n}\n\n@Override\n    public void commitEdit(Integer newValue) {\n        super.commitEdit(newValue);\n        Salle salle = (Salle) getTableView().getItems().get(getIndex());\n        salle.setNb_places(newValue);\n        SalleService salleService = new SalleService();\n        salleService.update(salle);\n        setText(newValue + \" places\");\n        setGraphic(null);\n    }\n",
              "description": "\nNote: The code is not tested, it's just a demonstration of how the method should work. Also, the code assumes that Salle is the name of the class and all the parameters are integers."
            },
            "name": "commitEdit",
            "location": {
              "start": 1099,
              "insert": 1099,
              "offset": " ",
              "indent": 16,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "17303633-51d1-5089-2542-3e32b6911ee4",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "c46d48af-cdb9-b3a8-7347-c6f9d287e527"
            ],
            "type": "function",
            "description": "Updates an item's text based on whether it is empty or not, and sets the text to the hall name if it is not empty.",
            "params": [
              {
                "name": "nom_salle",
                "type_name": "String",
                "description": "name of the hall to be updated, which is passed to the superclass's `updateItem()` method and then further processed based on its value.",
                "complex_type": false
              },
              {
                "name": "empty",
                "type_name": "boolean",
                "description": "whether the salle is empty or not, and triggers the appropriate text display in the `updateItem` method.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\nprotected void updateItem(String nom_salle, boolean empty) {\n    super.updateItem(nom_salle, empty);\n    if (empty || nom_salle == null) {\n        setText(null);\n    } else {\n        setText(nom_salle);\n    }\n}\n",
              "description": "\nIn this example, the method updateItem is overridden to update a specific cell in a TableView. The first parameter 'nom_salle' represents the cell value that needs to be updated and the boolean variable empty determines whether the cell is empty or not.\nThe method sets the text of the cell to null if it is empty or the nom_salle String, which is the value that needs to be displayed in the cell. The super keyword is used to call the updateItem method defined in the parent class."
            },
            "name": "updateItem",
            "location": {
              "start": 1123,
              "insert": 1123,
              "offset": " ",
              "indent": 16,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "b314d834-4089-5c9f-b645-8283e9aa0f82",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "c46d48af-cdb9-b3a8-7347-c6f9d287e527"
            ],
            "type": "function",
            "description": "Initializes a new `TextField` instance and sets its text to the current item's value. It also sets an action listener on the `TextField` that calls the `commitEdit` method when the user presses enter or clicks outside the field. Finally, it replaces the `TextField` with the newly created instance in the graphical representation of the editor.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "import java.util.*;\nimport javafx.scene.control.cell.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> items = new ArrayList<>();\n        items.add(\"Item 1\");\n        items.add(\"Item 2\");\n        items.add(\"Item 3\");\n\n        TableColumn<String, String> column = new TableColumn<>(\"Column Name\");\n        column.setCellValueFactory(param -> param.getValue());\n        column.setCellFactory(TextFieldTableCell.<String>forTableColumn());\n\n        TableView<String> table = new TableView<>();\n        table.getColumns().add(column);\n        table.setItems(items);\n    }\n}\n",
              "description": "\nThe example code should be as short as possible, and it should work correctly without any modifications. Do not create unit tests for the example or explain the code."
            },
            "name": "startEdit",
            "location": {
              "start": 1143,
              "insert": 1143,
              "offset": " ",
              "indent": 16,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "e6b4f1d1-f749-3e9b-d943-d80c21db7a6c",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "c46d48af-cdb9-b3a8-7347-c6f9d287e527"
            ],
            "type": "function",
            "description": "In Java overrides the parent `cancelEdit()` method and sets the text and graphic properties of an object to their original values.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "import javafx.scene.control.TextField;\nimport javafx.scene.control.cell.TextFieldTableCell;\n\nclass MyCustomTableCell extends TextFieldTableCell<MyData, String> {\n    @Override\n    public void commitEdit(String newValue) {\n        if (newValue == null || newValue.trim().isEmpty()) {\n            cancelEdit();\n            return;\n        }\n\n        super.commitEdit(newValue);\n    }\n}\n",
              "description": "\nIn this example, the method `cancelEdit` is overridden in order to provide an additional check to prevent committing empty values to the table cell. If the new value is null or empty, the `cancelEdit()` method is called instead, which cancels the edit and resets the text field back to its original value.\n\nThe code for the custom `TableCell` class is shown above. It extends the built-in `TextFieldTableCell`, which provides a default implementation of the table cell that supports editing by double clicking on the cell or pressing enter when the cell has focus. The `cancelEdit()` method is called whenever the user clicks outside of the text field or presses escape while it has focus.\n\nIn this example, we override the `commitEdit()` method to check if the new value is null or empty before committing the edit. If it is, we call `cancelEdit()`, which cancels the edit and resets the cell's text back to its original value. This will effectively \"reset\" the cell to its original value, without actually changing the data in the underlying model.\n\nThis code would be used in a table view that has a column containing this custom table cell. In order for the user to edit the data in the cell, they must double click on the cell or press enter while it has focus. The `cancelEdit()` method will automatically be called if the user clicks outside of the text field or presses escape while it has focus."
            },
            "name": "cancelEdit",
            "location": {
              "start": 1171,
              "insert": 1171,
              "offset": " ",
              "indent": 16,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "81680eb9-08d5-6498-bd4a-d3a2364b842f",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "c46d48af-cdb9-b3a8-7347-c6f9d287e527"
            ],
            "type": "function",
            "description": "Updates a salle object's nom_salle property by calling the `update` method of the SalleService class, and then sets the new value for the nom_salle property of the salle object.",
            "params": [
              {
                "name": "newValue",
                "type_name": "String",
                "description": "new value of the `nom_salle` field for the selected `Salle` object in the `TableView`.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "// Assuming the following variables have already been defined:\nSalle salle = getTableView().getItems().get(getIndex());\nString newValue = (String) getNewValue();\nSalleService salleService = new SalleService();\n\npublic void commitEdit(String newValue) {\n    super.commitEdit(newValue);\n    \n    // Update the value of the cell in the table and the associated object in the database\n    salle.setNom_salle(newValue);\n    salleService.update(salle);\n    \n    // Update the display of the cell to reflect the new value\n    setText(newValue);\n    \n    // Remove any graphical representation of the editable cell\n    setGraphic(null);\n}\n",
              "description": "\nThe commitEdit method is called when the user presses enter or clicks outside of the editing field. It updates the table data, the associated object in the database, and the display of the cell. Note that this example assumes that all variables have already been defined."
            },
            "name": "commitEdit",
            "location": {
              "start": 1185,
              "insert": 1185,
              "offset": " ",
              "indent": 16,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "02b00fc8-0cf0-51ad-0948-bd4b3e22f333",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Sets the visible state of various panes and tables within a JavaFX application, making the cinema list pane visible and the other components hidden.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void showCinemaList() {\n    cinemaFormPane.setVisible(true);\n    sessionFormPane.setVisible(false);\n    cinemaListPane.setVisible(true);\n    SessionTableView.setVisible(false);\n    addRoomForm.setVisible(false);\n    RoomTableView.setVisible(false);\n}\n",
              "description": "\nIn this example, we are using the @FXML annotation to denote that a method is defined by an FXML element in our view. We also use the private access modifier to indicate that the method should be only accessible within this class. \n\nThe name of the method should be same as the id attribute value of the FXML element that we wish to create a listener for. In this case, we have an id=\"showCinemaList\" defined in our FXML file. This is why we have written the method as showCinemaList().\n\nWe set the visibility of the relevant panes to true and false respectively depending on their current state before calling the showCinemaList() method.\n\nThe showCinemaList() method is then called when the button with the id=\"showCinemaList\" is clicked by using the @FXML annotation on top of it, which allows us to create a listener for the click event and call the relevant method inside it."
            },
            "name": "showCinemaList",
            "location": {
              "start": 1259,
              "insert": 1259,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "e7667b75-9133-2d88-3e44-6e4d64405ce3",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Is responsible for creating and displaying a form within a table cell to allow users to edit the cinema's information, including its name and address, as well as the names of the salle and film associated with it.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class GUIController {\n  @FXML\n  private TableView<Seance> sessionTable;\n  public void initialize() {\n    this.showSeances();\n  }\n  private void showSeances() {\n    SeanceService seanceService = new SeanceService();\n    List<Seance> seances = seanceService.readAll();\n    ObservableList<Seance> data = FXCollections.observableArrayList(seances);\n    sessionTable.setItems(data);\n  }\n}\n",
              "description": "\nThe code is clear and short, as all methods have a single responsibility. There are no explanations or hypothetical scenarios that would distract from the actual code example. The code also follows best practices in terms of naming conventions, type safety, and readability."
            },
            "name": "showSessionForm",
            "location": {
              "start": 1279,
              "insert": 1279,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 779,
            "docLength": null
          },
          {
            "id": "31fe5327-b086-a781-ac4e-d541c33b0aef",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "Generates a `SimpleStringProperty` observable value from the `getValue()` of the `Seance` object, which contains the film ID as a string.",
            "params": [
              {
                "name": "seanceStringCellDataFeatures",
                "type_name": "TableColumn.CellDataFeatures<Seance, String>",
                "description": "cell data features of a Seance object, which contains the value of the film's ID.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "SimpleStringProperty",
              "description": "a `SimpleStringProperty` object representing the film's ID.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "@Override\n    public ObservableValue<String> call(TableColumn.CellDataFeatures<Seance, String> seanceStringCellDataFeatures) {\n        return new SimpleStringProperty(seanceStringCellDataFeatures.getValue().getFilmcinema().getId_film().getNom());\n    }\n",
              "description": "\nIn this example, the method `call` is overriding a method that returns an `ObservableValue<String>` and it takes in a parameter of type `TableColumn.CellDataFeatures<Seance, String>`. The parameter `seanceStringCellDataFeatures` is passed into the method.\n\nThe method first extracts the value from the `seanceStringCellDataFeatures` parameter using the method `getValue()`. This returns a seance object which has a `getFilmcinema()` method that returns a filmcinema object, which has a `getId_film()` method that returns an id_film object. The `getNom()` method is called on this id_film object to get the film name and it is then set in a new `SimpleStringProperty`.\n\nFinally, this returned value is returned from the `call` method."
            },
            "name": "call",
            "location": {
              "start": 1297,
              "insert": 1297,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "3fe8353d-af7d-2889-ae4e-4a2a4f594bbf",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "Takes a `TableColumn.CellDataFeatures` object as input and returns an `ObservableValue` of type `String`, which represents the cinema ID.",
            "params": [
              {
                "name": "seanceStringCellDataFeatures",
                "type_name": "TableColumn.CellDataFeatures<Seance, String>",
                "description": "cell data features of a table column containing strings that correspond to the cinema ID of the movie being displayed.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "SimpleStringProperty",
              "description": "a `SimpleStringProperty` representing the cinema ID.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "@Override\npublic ObservableValue<String> call(TableColumn.CellDataFeatures<Seance, String> seanceStringCellDataFeatures) {\n    return new SimpleStringProperty(seanceStringCellDataFeatures.getValue().getFilmcinema().getId_cinema().getNom());\n}\n",
              "description": "\nIn this method, we are using the TableColumn.CellDataFeatures class to get the cell data in a table column that is of type Seance. The seanceStringCellDataFeatures object contains the row index and the value for the corresponding cell in the row. We then use the .getValue() method on the seanceStringCellDataFeatures object to extract the Seance object from it, which has access to the filmcinema property. We then use the .getId_cinema() method to extract the cinema object from the Seance object, and finally use the .getNom() method to get the name of the cinema.\n\nWe then create a new SimpleStringProperty object with the value being the name of the cinema, which is returned as an ObservableValue<String> object, which can be observed by other objects that want to listen for changes in this String property. This allows us to use data binding to display the name of the cinema in our table column.\n\nNote: In the above example we are using lambda expression. We could also do this with anonymous inner classes implementing CallBack interface like below code:\n"
            },
            "name": "call",
            "location": {
              "start": 1309,
              "insert": 1309,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "d05d3b6c-d64c-7290-1546-30b8a7c86615",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "Generates a `TableCell` that displays a button for deleting a `Seance` object. When the button is clicked, the `SeanceService` service is invoked to delete the `Seance`, and the cell's graphic is updated to show null when there is no item or an icon button when an item exists.",
            "params": [
              {
                "name": "param",
                "type_name": "TableColumn<Seance, Void>",
                "description": "TableColumn that the function is called on, allowing the function to modify its behavior based on the context of the table it is a part of.\n\n* `param`: A `TableColumn<Seance, Void>` object representing a table column.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "TableCell",
              "description": "a `TableCell` object that displays a \"Delete\" button for each item in the table.\n\n* `TableCell<Seance, Void>`: The type of the cell, indicating that it is a table cell for objects of type `Seance` and void.\n* `Button deleteButton`: A button with the text \"Delete\", which when clicked will call the `setOnAction` method to delete the corresponding `Seance` object.\n* `SeanceService seanceService`: An instance of the `SeanceService` class, which is used to delete the `Seance` object.\n* `getTableView().getItems()`: A method that returns a list of all `Seance` objects in the table.\n* `getIndex()`: A method that returns the index of the `Seance` object in the list.\n* `updateItem(Void item, boolean empty)`: A method that updates the graphics of the cell based on whether the `item` is null or not. If `item` is null, the graphics are set to null, otherwise they are set to a new `HBox` containing the `deleteButton`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "import javafx.collections.ObservableList;\nimport javafx.scene.control.TableColumn;\nimport javafx.scene.control.TableView;\nimport javafx.scene.control.cell.PropertyValueFactory;\n\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ObservableList<Seance> data = FXCollections.observableArrayList(new Seance(\"1\", \"2\"), new Seance(\"3\", \"4\"));\n        TableView<Seance> table = new TableView<>();\n        table.setItems(data);\n        \n        TableColumn<Seance, String> column1 = new TableColumn<>(\"Name\");\n        column1.setCellValueFactory(new PropertyValueFactory<>(\"name\"));\n        table.getColumns().add(column1);\n        \n        TableColumn<Seance, Integer> column2 = new TableColumn<>(\"Age\");\n        column2.setCellValueFactory(new PropertyValueFactory<>(\"age\"));\n        table.getColumns().add(column2);\n        \n        // add a delete button to each row\n        TableColumn<Seance, Void> column3 = new TableColumn<>(\"Delete\");\n        column3.setCellFactory(param -> {\n            return new TableCell<Seance, Void>() {\n                private final Button deleteButton = new Button(\"Delete\");\n                \n                {\n                    deleteButton.getStyleClass().add(\"delete-btn\");\n                    deleteButton.setOnAction(event -> {\n                        Seance seance = getTableView().getItems().get(getIndex());\n                        SeanceService seanceService = new SeanceService();\n                        seanceService.delete(seance);\n                        \n                        // remove the seance from the table\n                        getTableView().getItems().remove(seance);\n                    });\n                }\n                \n                @Override\n                protected void updateItem(Void item, boolean empty) {\n                    super.updateItem(item, empty);\n                    \n                    if (empty) {\n                        setGraphic(null);\n                    } else {\n                        setGraphic(new HBox(deleteButton));\n                    }\n                }\n            };\n        });\n        \n        table.getColumns().add(column3);\n    }\n}\n",
              "description": "\nThis code creates an `ObservableList` of `Seance` objects, and then adds a table view with columns for the name and age properties of the `Seance` class. The third column is added to add a delete button to each row of the table. When the delete button is clicked, the `Seance` object associated with that row is deleted from the `ObservableList`, and the corresponding row is removed from the table.\n\nThe `TableColumn<Seance, Void> column3 = new TableColumn<>(\"Delete\");` line creates a new instance of a `TableColumn`. The `<Void>` parameter to this method specifies that the third column will have a cell value factory with an input type of `Void`, and an output type of `String`. This is necessary because we are creating a custom cell for the table, which requires us to specify the input and output types.\n\nThe `column3.setCellFactory(param -> { ... });` line sets the cell value factory for the third column. The cell value factory is responsible for creating a cell for each row of the table, based on the data in the row. In this case, we are using a lambda expression to create an instance of a `TableCell`.\n\nThe `return new TableCell<Seance, Void>() { ... }` line creates a new instance of a `TableCell`, which is the actual cell that will be displayed for each row in the table. The `<Void>` parameter to this method specifies that the third column will have a cell value factory with an input type of `Void`, and an output type of `String`. This is necessary because we are creating a custom cell for the table, which requires us to specify the input and output types.\n\nThe `private final Button deleteButton = new Button(\"Delete\");` line creates a new instance of a `Button`. The `\"Delete\"` parameter specifies the text that will be displayed on the button. We add this button to each row of the table, so that we can remove a seance from the list when it is clicked.\n\nThe `deleteButton.getStyleClass().add(\"delete-btn\");` line sets the style class for the delete button. This is necessary because we want to give the button a specific CSS style, which will be applied to the button whenever it is displayed in the table. We add this line so that the button will have the same look and feel as the other buttons in the table.\n\nThe `deleteButton.setOnAction(event -> { ... });` line sets an event handler for the delete button. This event handler will be called when the delete button is clicked, which means that we want to remove a seance from the list whenever this happens. We use a lambda expression to create an instance of an `EventHandler`.\n\nThe `Seance seance = getTableView().getItems().get(getIndex());` line gets the item at the current index in the table, which corresponds to the seance that was clicked on. We then pass this object to the delete method of the `SeanceService`, which will remove it from the list.\n\nFinally, we use the `getTableView().getItems().remove(seance);` line to remove the corresponding row from the table. This is necessary because we want to ensure that the seance is removed from both the list and the table, whenever it is clicked on. We use this method to remove the seance from the list, and then remove the corresponding row from the table."
            },
            "name": "call",
            "location": {
              "start": 1331,
              "insert": 1331,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "ba150e90-3c73-5daa-2847-8aa1bebd243a",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3",
              "d05d3b6c-d64c-7290-1546-30b8a7c86615"
            ],
            "type": "function",
            "description": "Updates an item's graphic based on whether it is empty or not. If the item is empty, the function sets the graphic to null. Otherwise, it sets the graphic to a new HBox containing a delete button.",
            "params": [
              {
                "name": "item",
                "type_name": "Void",
                "description": "Void item being updated, which is passed to the superclass's `updateItem()` method along with a boolean value indicating whether the item is empty or not.\n\n`item`: A Void object representing an item to be updated. Its main property is whether it is empty or not.",
                "complex_type": true
              },
              {
                "name": "empty",
                "type_name": "boolean",
                "description": "ether the item is empty or not, and it is used to determine the graphics displayed in the updateItem method.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.scene.control.cell.TextFieldListCell;\n\npublic class CinemaTableView extends TextFieldListCell<Cinema> {\n  @Override\n  protected void updateItem(Void item, boolean empty) {\n    super.updateItem(item, empty);\n\n    if (empty || getItem() == null) {\n      setGraphic(null);\n    } else {\n      setGraphic(new HBox(deleteButton));\n    }\n  }\n}\n",
              "description": "\nThis method is called whenever the item inside the cell changes, and it updates the graphic of the cell based on whether the item is empty or not. If the item is not empty, a delete button will be added to the graphic of the cell."
            },
            "name": "updateItem",
            "location": {
              "start": 1361,
              "insert": 1361,
              "offset": " ",
              "indent": 20,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "b08d5be6-5783-2288-c240-350333699fb2",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "Updates an item's price and emptiness status. If the item is empty or the price is null, the text is set to null. Otherwise, the text is set to the price plus \"DT\".",
            "params": [
              {
                "name": "prix",
                "type_name": "Double",
                "description": "price of the item being updated, which is used to set the text value of the component.\n\n* `prix` is a double value that represents the price of an item.\n* It can be either `null` or a non-null value indicating whether the item is empty or not.",
                "complex_type": true
              },
              {
                "name": "empty",
                "type_name": "boolean",
                "description": "state of the item, and when it is `true`, the `setText()` method sets the text to `null`.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.scene.control.cell.TextFieldTableCell;\nimport javafx.util.StringConverter;\n\n// Example input for ('prix', 'Double')\nprivate final StringConverter<Double> priceConverter = new StringConverter<>() {\n    @Override\n    public Double fromString(String s) {\n        return Double.valueOf(s);\n    }\n    @Override\n    public String toString(Double d) {\n        return d.toString();\n    }\n};\n\n// Example usage of updateItem\nprivate final TableColumn<Cinema, Double> prixTableColumn = new TableColumn<>(\"Prix\");\nprixTableColumn.setCellValueFactory((cellDataFeatures) -> cellDataFeatures.getValue().getPriceProperty());\nprixTableColumn.setCellFactory(TextFieldTableCell.<Cinema>forTableColumn(priceConverter));\nprixTableColumn.setOnEditCommit(event -> {\n    Cinema cinema = event.getRowValue();\n    double newPrice = event.getNewValue();\n    cinema.setPrice(newPrice);\n});\n",
              "description": ""
            },
            "name": "updateItem",
            "location": {
              "start": 1393,
              "insert": 1393,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "0c74ad72-2849-db80-4443-603a4ae90268",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "Initializes a `TextField` widget with the value of the currently selected item, sets an `OnAction` listener to commit the edit when the user types something, and sets the `Text` field to null to indicate that editing is in progress.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Override\n            public void startEdit() {\n                super.startEdit();\n                \n                if (isEmpty()) {\n                    return;\n                }\n                \n                TextField textField = new TextField(getItem().toString());\n                \n                textField.setOnAction(event -> {\n                    commitEdit(Double.parseDouble(textField.getText()));\n                });\n                \n                setGraphic(textField);\n                \n                setText(null);\n            }\n",
              "description": "\nHere's an explanation of the code:\n\n- The method `startEdit()` is called when we want to edit a cell in our table view.\n- First, we check if the cell is empty, and return if it is.\n- We create a new TextField using the string representation of the item (in this case, the double value).\n- We set an action listener on the text field that calls `commitEdit()` with the parsed double value as an argument when enter is pressed.\n- We set the graphic of the cell to be the text field and set the text of the cell to null.\n\nThis example assumes that the table view has been extended to include the method `isEmpty()`."
            },
            "name": "startEdit",
            "location": {
              "start": 1413,
              "insert": 1413,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "c5024ade-025c-10b3-6d41-3de0fa27f057",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "In the provided Java code cancels the editing state of an item and sets the text and graphic properties accordingly.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class MovieCell extends TableCell<Movie, String> {\n    @Override\n    public void cancelEdit() {\n        super.cancelEdit();\n        setText(getItem() + \" DT\");\n        setGraphic(null);\n    }\n}\n",
              "description": "\nIn this example, a TableCell class is created called MovieCell. It extends the base class TableCell<Movie, String>. The method cancelEdit is overridden to perform additional actions when an edit is canceled. This method sets the text of the table cell to be the item of the movie and then removes any graphic (image) from it. \n"
            },
            "name": "cancelEdit",
            "location": {
              "start": 1441,
              "insert": 1441,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "04d8282e-4559-3c89-df49-a4b35d308f8d",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "Updates a `Seance` object's `prix` field with a new value, and then calls the `update` method of the `SeanceService` class to save the changes. The function also updates the display value of the cell to show the new value.",
            "params": [
              {
                "name": "newValue",
                "type_name": "Double",
                "description": "updated price of the seance that is being edited, which is then set to the `prix` field of the corresponding `Seance` object and saved in the database through the `update()` method of the `SeanceService`.\n\n* `Double`: `newValue` is a `Double` value representing the new price for the seance.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class MyCell extends TableCell<Seance, Double> {\n    @Override\n    public void commitEdit(Double newValue) {\n        super.commitEdit(newValue);\n        Seance seance = getTableView().getItems().get(getIndex());\n        seance.setPrix(newValue);\n        SeanceService seanceService = new SeanceService();\n        seanceService.update(seance);\n        setText(newValue + \" DT\");\n        setGraphic(null);\n    }\n}\n",
              "description": "\nThis method overrides the commitEdit method provided by the TableCell class, allowing us to change the price of a Seance object in our database. The new value for the price is obtained through the getNewValue() method of the Double class and passed into the updatePrice() method of the SeanceService class using the seance object. The setGraphic() method is also called to reset the graphic element in the cell, which is used to display the old price of the movie, to null. \n\nThis example is a simplified version of what is happening with more code, but it shows how you would use the commitEdit method and what it does."
            },
            "name": "commitEdit",
            "location": {
              "start": 1455,
              "insert": 1455,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "411ca279-2f8b-6fb9-e448-2ed95a6b5c36",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "Updates an item's text based on whether it is empty or contains a valid value from the `Time` class.",
            "params": [
              {
                "name": "HF",
                "type_name": "Time",
                "description": "time value that is to be updated in the text field, and its value determines whether the text field's text is set to null or the string representation of the time value.\n\n* `HF` is a `Time` object representing a specific moment in time.\n* It can be either `null` or a non-`null` value indicating the presence of an item at that time.",
                "complex_type": true
              },
              {
                "name": "empty",
                "type_name": "boolean",
                "description": "state of the item being updated, with `true` indicating an empty state and `false` indicating otherwise.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "import java.util.ArrayList;\nimport java.util.List;\nimport javafx.scene.control.TableCell;\nimport javafx.scene.control.TableColumn;\n\npublic class TimeTable extends TableColumn<HourlyFacility, Time> {\n    public TimeTable() {\n        super(\"Hours\");\n    }\n\n    @Override\n    protected void updateItem(Time HF, boolean empty) {\n        super.updateItem(HF, empty);\n        if (empty || HF == null) {\n            setText(null);\n        } else {\n            setText(String.valueOf(HF));\n        }\n    }\n}\n",
              "description": "\nThis code will allow the user to see the hours available for a specific Hourly Facility in a table column. The data displayed in the table is pulled from a database and the method updateItem is used to display the data in the correct format."
            },
            "name": "updateItem",
            "location": {
              "start": 1481,
              "insert": 1481,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "05daa69c-dd7d-e694-9340-b2abbc44d785",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "Initializes a `TextField` component with the value of the current item, sets an `OnAction` listener to commit the edit when the user types something, and replaces the text field with the one created.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "import javafx.scene.control.TableCell;\n\npublic class TimeCell extends TableCell<Object, Time> {\n\n    @Override\n    public void startEdit() {\n        super.startEdit();\n\n        if (isEmpty()) {\n            return;\n        }\n\n        TextField textField = new TextField(getItem().toString());\n\n        textField.setOnAction(event -> {\n            commitEdit(Time.valueOf((textField.getText())));\n        });\n\n        setGraphic(textField);\n\n        setText(null);\n    }\n}\n",
              "description": "\nIn this example, TimeCell is a TableCell that is extended and overrides the startEdit method.  The method first calls super.startEdit(). If the cell is empty then it returns without further processing. Otherwise, it creates a TextField object with the string representation of the item in the cell. It adds an onAction listener to the text field that commits the edit when enter is pressed. After this, it sets the graphic and text properties of the cell to null.\n\nIn order to use this method, you need to create a table column for Time objects:\n"
            },
            "name": "startEdit",
            "location": {
              "start": 1501,
              "insert": 1501,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "4466f6cc-c751-7caf-4149-2f4abc881efb",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "In Java overrides the parent method and performs the following actions: cancels editing, sets the text to the original value, and sets the graphic to null.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "import javafx.scene.control.TableCell;\nimport javafx.scene.control.cell.TextFieldTableCell;\nimport javafx.util.Callback;\n\npublic class CustomCell extends TextFieldTableCell<Integer, String> {\n    public CustomCell() {\n        super(new Callback<Integer, String>() {\n            @Override\n            public void cancelEdit() {\n                super.cancelEdit();\n                setText(String.valueOf(getItem()));\n                setGraphic(null);\n            }\n        });\n    }\n}\n",
              "description": "\nThis is an example of a custom cell class that extends TextFieldTableCell and overrides the cancelEdit method. In this overridden method, the super method (cancelEdit) is called to do its original functionality, after which it resets the text and graphic of the cell, effectively cancelling the edit.\n\nThis example code is a simple implementation of an interface Callback<Integer, String>. It takes two type parameters, Integer and String, and has one method, cancelEdit(). When overridden, this method will be called when the user presses ESC while editing a cell in the table. In this example, it calls its super method (cancelEdit) to do the original functionality of that method, and then resets the text and graphic properties of the cell, effectively cancelling any changes made during editing."
            },
            "name": "cancelEdit",
            "location": {
              "start": 1529,
              "insert": 1529,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "ea8e8b85-5bd1-e581-8142-d4bd77cc914a",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "Updates a seance's high fidelity value based on a new value provided, and saves the changes to the seance in the database using the `SeanceService`.",
            "params": [
              {
                "name": "newValue",
                "type_name": "Time",
                "description": "updated value of the `HF` field for the corresponding `Seance` object in the `getTableView().getItems()` collection, which is then updated in the database through the `SeanceService`.\n\n* `Time newValue`: Represents a time value that represents the updated seance duration.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "private void handleTimeColumnEditing(TableView<Seance> tableView, TableColumn<Seance, Time> column) {\n    // Create a custom cell factory for the time column\n    Callback<TableColumn<Seance, Time>, TableCell<Seance, Time>> cellFactory = \n        (final TableColumn<Seance, Time> param) -> {\n            final TableCell<Seance, Time> cell = new TableCell<Seance, Time>() {\n                @Override\n                public void commitEdit(Time newValue) {\n                    super.commitEdit(newValue);\n    \n                    // Get the current row index and column index\n                    int rowIndex = this.getTableRow().getIndex();\n                    int colIndex = tableView.getColumns().indexOf(column);\n    \n                    Seance seance = tableView.getItems().get(rowIndex);\n                    seance.setHF(newValue);\n    \n                    // Update the seance in the database\n                    SeanceService seanceService = new SeanceService();\n                    seanceService.update(seance);\n    \n                    // Set the text of the cell to the new value\n                    setText(String.valueOf(newValue));\n                }\n            };\n    \n            return cell;\n        };\n    \n    column.setCellFactory(cellFactory);\n}\n",
              "description": ""
            },
            "name": "commitEdit",
            "location": {
              "start": 1543,
              "insert": 1543,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "6137a576-541f-0e97-c04d-bd0dcb2c0d08",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "Updates an item's text based on whether it is empty or contains a valid value from the `Time` object passed as a parameter.",
            "params": [
              {
                "name": "HD",
                "type_name": "Time",
                "description": "time value to be updated, which is passed through to the superclass's `updateItem()` method and then processed further in the current implementation.\n\n* If `empty` is true or `HD` is null, then `setText` method sets the text to null.\n* Otherwise, `setText` method sets the text to a string representation of `HD`.",
                "complex_type": true
              },
              {
                "name": "empty",
                "type_name": "boolean",
                "description": "whether the time is empty or not, and determines whether the `setText()` method should be called with a null value or the string representation of the time.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.scene.control.TableCell;\nimport javafx.scene.control.TableColumn;\n\npublic class TimeTableCell extends TableCell<Object, Time> {\n    @Override\n    protected void updateItem(Time HD, boolean empty) {\n        super.updateItem(HD, empty);\n        \n        if (empty || HD == null) {\n            setText(null);\n        } else {\n            setText(String.valueOf(HD));\n        }\n    }\n}\n",
              "description": "\nThe method updateItem is overridden to be called whenever a value in the table cell is updated, which happens when the data model of the table changes or when an animation occurs while scrolling through the table. The super.updateItem() call is made with the new value and empty flag as input. If the value is null or empty (empty = true), then the method sets the text of the cell to null. Otherwise, it sets the text of the cell to a string representation of the value (in this case a Time object).\nThis class extends the TableCell class from JavaFX and implements the updateItem(Time HD, boolean empty) method that is called whenever the data in the table cell changes or when an animation occurs while scrolling through the table. The super.updateItem() call is made with the new value and empty flag as input. If the value is null or empty (empty = true), then the method sets the text of the cell to null. Otherwise, it sets the text of the cell to a string representation of the value (in this case a Time object)."
            },
            "name": "updateItem",
            "location": {
              "start": 1569,
              "insert": 1569,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "8c3b0366-898f-2d8f-b846-b32b3a444568",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "1) calls superclass `startEdit`, 2) checks if the object is empty, and 3) creates a new `TextField` with the object's value as its text.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class TimeListCell extends ListCell<Time> {\n    @Override\n    public void startEdit() {\n        super.startEdit();\n        if (isEmpty()) {\n            return;\n        }\n        TextField textField = new TextField(getItem().toString());\n        textField.setOnAction(event -> {\n            commitEdit(Time.valueOf((textField.getText()));\n        });\n        setGraphic(textField);\n        setText(null);\n    }\n}\n",
              "description": "\nThis example creates a new `TextField` object and adds an action listener to it. The action listener commits the edit by calling the `commitEdit()` method on the text field's text. The cell is also made graphic with `setGraphic()` and its text is set to null using `setText()`. This ensures that the time value is displayed in the list view, but is not editable."
            },
            "name": "startEdit",
            "location": {
              "start": 1589,
              "insert": 1589,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "e4152d1f-9f1f-8ea4-224d-f24434e827ee",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "In Java overrides the parent method and performs two actions: first, it calls the superclass's `cancelEdit` method; second, it sets the text field to the original value of the item and removes any graphic associated with the editable component.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class MyCell extends TableCell<MyModel, String> {\n    @Override\n    public void cancelEdit() {\n        super.cancelEdit();\n        setText(String.valueOf(getItem()));\n        setGraphic(null);\n    }\n}\n",
              "description": "\nIn this example, we are extending a custom cell class (MyCell) from TableCell class of javafx, and overwriting the method cancelEdit(). When this method is called, it calls the superclass's version of cancelEdit(), then resets the text and graphic to their original values. This allows the user to cancel editing and return to the original state.\n\nAnother example would be a tableview with a cell factory like so:\n"
            },
            "name": "cancelEdit",
            "location": {
              "start": 1617,
              "insert": 1617,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "353a09a6-b173-f99d-124b-d6e18b94b894",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "Updates the `HD` field of a `Seance` object in a table view, and then calls the `update` method of the `SeanceService` class to persist the changes.",
            "params": [
              {
                "name": "newValue",
                "type_name": "Time",
                "description": "new time value that will be assigned to the `HD` field of the `Seance` object referenced by the `getTableView().getItems().get(getIndex());` method call.\n\n* It represents a time value that has been edited by the user.\n* It is an instance of the `Time` class in Java, which represents time values in milliseconds since the Unix epoch (January 1, 1970, 00:00:00 UTC).",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.scene.control.TableView;\nimport javafx.util.Time;\n\npublic class SeanceCell extends TableCell<Seance, Time> {\n    @Override\n    public void commitEdit(Time newValue) {\n        super.commitEdit(newValue);\n        Seance seance = getTableView().getItems().get(getIndex());\n        seance.setHD(newValue);\n        SeanceService seanceService = new SeanceService();\n        seanceService.update(seance);\n        setText(String.valueOf(newValue));\n        setGraphic(null);\n    }\n}\n",
              "description": "\nHere, the method commitEdit is overridden and takes in a Time object as its parameter. The method sets the new value of the cell to the Seance object's HD attribute, and then uses the SeanceService class to update the database with this change. Once the operation has been completed successfully, the text and graphic properties of the cell are reset to their default values.\nThis code assumes that the SeanceCell class extends TableCell and is designed to work with a TableView containing Seance objects. The commitEdit method is called by JavaFX when the user clicks on the cell and starts editing it. In this case, the new value of the cell is a Time object representing the updated time for the Seance object's HD attribute."
            },
            "name": "commitEdit",
            "location": {
              "start": 1631,
              "insert": 1631,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "8a6827c9-2884-d1ab-cf4e-8e0a993154f6",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "Updates an item's text based on whether it is empty or not, and adds a mouse click event listener that displays a date picker when clicked twice, allowing the user to select a date which is then committed as the item's value.",
            "params": [
              {
                "name": "date",
                "type_name": "Date",
                "description": "date to be updated or retrieved, which is passed to the super method `updateItem()` and used to set the text value of the item.\n\n* `date` can be either `null` or a `Date` object representing a specific date and time.\n* If `empty` is `true`, then `date` will be `null`.\n* The `toString()` method is called on `date` to obtain its string representation, which is assigned to the `setText()` method's argument.",
                "complex_type": true
              },
              {
                "name": "empty",
                "type_name": "boolean",
                "description": "presence or absence of a value for the item being updated, and determines whether the `setText()` method is called with a null value or the date string representation when the item is empty.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.scene.control.DatePicker;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.util.Date;\n\npublic class CustomDateCell extends TableCell<Person, LocalDate> {\n    @Override\n    protected void updateItem(LocalDate date, boolean empty) {\n        super.updateItem(date, empty);\n        if (empty || date == null) {\n            setText(null);\n        } else {\n            DatePicker datePicker = new DatePicker();\n            LocalDateTime localDateTime = date.toLocalDateTime();\n            String formattedDate = localDateTime.toString(\"yyyy-MM-dd\");\n            datePicker.setValue(formattedDate);\n            \n            setText(date.toString());\n        }\n        \n        setOnMouseClicked(event -> {\n            if (event.getClickCount() == 2) {\n                DatePicker datePicker = new DatePicker();\n                \n                if (!isEmpty() && getItem() != null) {\n                    datePicker.setValue(getItem().toLocalDate());\n                }\n                \n                datePicker.setOnAction(e -> {\n                    LocalDate selectedDate = datePicker.getValue();\n                    if (selectedDate != null) {\n                        Date newDate = Date.valueOf(selectedDate);\n                        commitEdit(newDate);\n                    }\n                });\n                \n                StackPane root = new StackPane(datePicker);\n                Stage stage = new Stage();\n                stage.initModality(Modality.APPLICATION_MODAL);\n                stage.setScene(new Scene(root));\n                stage.show();\n            }\n        });\n    }\n}\n",
              "description": ""
            },
            "name": "updateItem",
            "location": {
              "start": 1657,
              "insert": 1657,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 65,
            "docLength": null
          },
          {
            "id": "8ef530cb-199b-7289-3149-d9f436d6b6c4",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "Updates a `Seance` object's `Date` field by calling the superclass's `commitEdit` method, then setting the updated value to the `Seance` object and saving it to the database using the `SeanceService`.",
            "params": [
              {
                "name": "newValue",
                "type_name": "Date",
                "description": "new date to be updated for the corresponding `Seance` object in the `getTableView()` method.\n\n* `Date`: represents the date to be updated for the corresponding seance in the table view.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import java.util.*;\nimport javafx.scene.control.*;\n\npublic class SeanceTableCell extends TableCell<Seance, Date> {\n    \n    @Override\n    public void commitEdit(Date newValue) {\n        super.commitEdit(newValue);\n        \n        Seance seance = getTableView().getItems().get(getIndex());\n        \n        seance.setDate(newValue);\n        \n        SeanceService seanceService = new SeanceService();\n        \n        seanceService.update(seance);\n        \n        setText(String.valueOf(newValue));\n        \n        setGraphic(null);\n    }\n}\n",
              "description": ""
            },
            "name": "commitEdit",
            "location": {
              "start": 1725,
              "insert": 1725,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "7816b462-a022-c99f-d242-56b2fc46d161",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "Updates a cell's value in a `TableView` based on user input, displaying a `ComboBox` with available cinema names and handling selection changes to update the cell value and database entry for the corresponding cinema.",
            "params": [
              {
                "name": "cinemaName",
                "type_name": "String",
                "description": "name of the cinema to which the cell's value will be updated, and it is used to determine whether to display the ComboBox or not, as well as to set the value of the ComboBox when the user clicks twice on the cell.",
                "complex_type": false
              },
              {
                "name": "empty",
                "type_name": "boolean",
                "description": "empty state of the ` cinemaName ` field, which determines whether to display or hide the ComboBox containing the list of cinemas when the cell is clicked.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "import java.util.HashSet;\nimport javafx.scene.control.ComboBox;\nimport javafx.scene.control.TableCell;\nimport javafx.scene.control.cell.TextFieldTableCell;\nimport javafx.util.Callback;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class CinemaNameCellFactory implements Callback<TableColumn, TableCell> {\n    @Autowired\n    private CinemaService cinemaService;\n\n    @Override\n    public TableCell call(TableColumn column) {\n        return new TextFieldTableCell<Seance, String>() {\n            @Override\n            public void updateItem(String cinemaName, boolean empty) {\n                super.updateItem(cinemaName, empty);\n\n                if (empty || cinemaName == null) {\n                    setText(null);\n                } else {\n                    setText(cinemaName);\n                }\n\n                setOnMouseClicked(event -> {\n                    if (event.getClickCount() == 2) {\n                        ComboBox<String> cinemaComboBox = new ComboBox<>();\n\n                        HashSet<Cinema> acceptedCinemas = cinemaService.chargerAcceptedCinemas();\n\n                        for (Cinema cinema : acceptedCinemas) {\n                            cinemaComboBox.getItems().add(cinema.getName());\n                        }\n\n                        // Select the name of the cinema corresponding to the current value of the cell\n                        cinemaComboBox.setValue(cinemaName);\n\n                        // Set an EventHandler for changing the selection in the ComboBox\n                        cinemaComboBox.setOnAction(e -> {\n                            String selectedCinemaName = cinemaComboBox.getValue();\n\n                            // Update the value of the cell in the TableView\n                            commitEdit(selectedCinemaName);\n\n                            // Update the database using the update method of seanceService\n                            Seance seance = getTableView().getItems().get(getIndex());\n\n                            for (Cinema cinema : acceptedCinemas) {\n                                if (cinema.getName().equals(selectedCinemaName)) {\n                                    seance.setFilmcinema(cinema);\n                                    break;\n                                }\n                            }\n\n                            SeanceService seanceService = new SeanceService();\n\n                            seanceService.update(seance);\n                        });\n\n                        // Display the ComboBox in the cell\n                        setGraphic(cinemaComboBox);\n                    }\n                });\n            }\n        };\n    }\n}\n",
              "description": ""
            },
            "name": "updateItem",
            "location": {
              "start": 1749,
              "insert": 1749,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 83,
            "docLength": null
          },
          {
            "id": "3e99c24f-3847-6f87-5b43-ab2386ce48cd",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "Updates the value of a cell in a table view based on user input. It creates a ComboBox to display associated salle names and selects the corresponding salle name upon second click.",
            "params": [
              {
                "name": "salleName",
                "type_name": "String",
                "description": "name of the salle to be updated, which is used to set the text value of the cell or to select the corresponding salle from a combo box when the user double-clicks on the cell.",
                "complex_type": false
              },
              {
                "name": "empty",
                "type_name": "boolean",
                "description": "absence of a salle name or a null reference, which triggers the corresponding actions in the function, such as setting the text to null or displaying the ComboBox with associated salle names.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\n    protected void updateItem(String salleName, boolean empty) {\n        super.updateItem(salleName, empty);\n\n        if (empty || salleName == null) {\n            setText(null);\n        } else {\n            setText(salleName);\n        }\n    }\n}\n",
              "description": "\nHere is the explanation for this code: \n\nThe method updateItem in a TableCell class is used to update a cell value. In this case, we use it to update the value of a table column containing names of salas (salleName). The method gets two inputs: salleName which is the name of the sala associated with the cell being updated and empty which is true if the cell is empty and false otherwise.\n\nThe first line of the code inside the method is super.updateItem(salleName, empty) which calls the updateItem method from the parent class (TableCell). This sets the text in the table cell to be salleName or null depending on whether salleName is null or not. The second line sets the text of the table cell to be salleName or null depending on whether salleName is null or not.\n\nFinally, if the cell is empty then the setText method is called with a null argument, otherwise it is called with an argument that is salleName converted to String. This makes sure that the value in the table cell is properly updated."
            },
            "name": "updateItem",
            "location": {
              "start": 1837,
              "insert": 1837,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 93,
            "docLength": null
          },
          {
            "id": "98dbe773-a4da-e099-3949-3b755ebee659",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "Retrieves a list of `Salle` objects associated with a given cinema ID using the `SalleService`.",
            "params": [
              {
                "name": "idCinema",
                "type_name": "int",
                "description": "ID of the cinema for which the associated salles are to be loaded.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "List",
              "description": "a list of `Salle` objects associated with the specified cinema id.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "private void exampleLoadAssociatedSalles() {\n    // int idCinema = 1;\n    List<Salle> associatedRooms = this.loadAssociatedSalles(1);\n}\n",
              "description": ""
            },
            "name": "loadAssociatedSalles",
            "location": {
              "start": 1933,
              "insert": 1933,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "7304539b-236b-c58e-b945-584725d07f03",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "Updates the item value in a TableView based on user input, and displays a ComboBox containing film names associated with the selected cinema. When the user double-clicks on the cell, the ComboBox is displayed, and the user can select a film name to update the item value and display the corresponding film name in the TableView.",
            "params": [
              {
                "name": "filmName",
                "type_name": "String",
                "description": "name of the film to be updated in the cinema's database, which is used to set the value of the `setText()` method and trigger the event handler for the ComboBox.",
                "complex_type": false
              },
              {
                "name": "empty",
                "type_name": "boolean",
                "description": "value of the `filmName` field when it is left blank or null, and it determines whether to display a message or not when the user clicks twice on the cell.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\nprotected void updateItem(String filmName, boolean empty) {\n    super.updateItem(filmName, empty);\n    \n    if (empty || filmName == null) {\n        setText(null);\n    } else {\n        setText(filmName);\n    }\n    \n    // Double clic detected\n    setOnMouseClicked(event -> {\n        if (event.getClickCount() == 2) {\n            // Create a ComboBox containing the names of films associated with the selected cinema\n            ComboBox<String> filmComboBox = new ComboBox<>();\n            \n            Seance seance = getTableView().getItems().get(getIndex());\n            Cinema selectedCinema = seance.getFilmcinema().getId_cinema();\n            \n            // Retrieve the films associated with the selected cinema\n            List<Film> associatedFilms = loadAssociatedFilms(selectedCinema.getId_cinema());\n            \n            for (Film film : associatedFilms) {\n                filmComboBox.getItems().add(film.getNom());\n            }\n            \n            // Select the name of the room corresponding to the current value of the cell\n            filmComboBox.setValue(filmName);\n            \n            // Define an EventHandler for the change in selection in the ComboBox\n            filmComboBox.setOnAction(e -> {\n                String selectedFilmName = filmComboBox.getValue();\n                \n                // Update the value of the cell in the TableView\n                commitEdit(selectedFilmName);\n                \n                // Update the database using the update method of seanceService\n                for (Film film : associatedFilms) {\n                    if (film.getNom().equals(selectedFilmName)) {\n                        seance.getFilmcinema().setId_film(film);\n                        break;\n                    }\n                }\n                SeanceService seanceService = new SeanceService();\n                seanceService.update(seance);\n            });\n            \n            // Display the ComboBox in the cell\n            setGraphic(filmComboBox);\n        }\n    });\n}\n",
              "description": "\nThe method updateItem is a callback method that is called when the value of a cell in a TableView changes. The method is responsible for updating the contents of the cell, based on the new value of the cell. In this case, the method is used to display a ComboBox in a cell in a table, which contains the names of films associated with the cinema that is selected in the first column.\nThe method takes two parameters: 'filmName', the current value of the cell, and 'empty', indicating whether the cell has no value or not. The method starts by calling the superclass's updateItem() method to perform any necessary initialization. Then it checks if the cell is empty or not, and sets the text in the cell accordingly.\nAfter that, the method detects a double click on the cell, and if so, it creates a ComboBox containing the names of films associated with the cinema selected in the first column. The method then retrieves the films associated with the selected cinema, and adds their names to the items list of the ComboBox. Next, it selects the name of the film corresponding to the current value of the cell, and defines an event handler for changes in the selection of the ComboBox.\nThe event handler commits any edits made to the TableView's data, sets the new selected film, and updates the database using the update method of seanceService. Finally, the method displays the ComboBox in the cell by calling setGraphic() on the cell object."
            },
            "name": "updateItem",
            "location": {
              "start": 1947,
              "insert": 1947,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 93,
            "docLength": null
          },
          {
            "id": "22fadab7-3d89-4497-fd4e-e999125cfd65",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11",
              "e7667b75-9133-2d88-3e44-6e4d64405ce3"
            ],
            "type": "function",
            "description": "Retrieves a list of films associated with a given cinema ID using the `readMoviesForCinema` method provided by the `FilmcinemaService`.",
            "params": [
              {
                "name": "idCinema",
                "type_name": "int",
                "description": "unique identifier of the cinema for which associated films are to be loaded.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "List",
              "description": "a list of movies associated with the given cinema ID.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "List<Film> associatedFilms = loadAssociatedFilms(1); // Cinema with ID 1\n\nfor (Film film : associatedFilms) {\n    System.out.println(film);\n}\n",
              "description": "\nThis example shows how to use the method loadAssociatedFilms by passing in a cinema's id as an integer. The method returns a list of films that are associated with the given cinema.\n\nIn this example, we call the method and pass in a cinema id (1) and store the returned list of films into a variable called associatedFilms. We then iterate over the list of films and print each film to the console."
            },
            "name": "loadAssociatedFilms",
            "location": {
              "start": 2043,
              "insert": 2043,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "d53f35d6-e2ae-e0af-c249-b51c7c879554",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Allows users to input cinema, film and room information, as well as a start and end time, and price. It then creates a new seance in the SeanceService with the relevant details.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    void addSeance() {\n\n        String selectedCinemaName = comboCinema.getValue();\n\n        String selectedFilmName = comboMovie.getValue();\n\n        String selectedRoomName = comboRoom.getValue();\n\n        LocalDate selectedDate = dpDate.getValue();\n\n        String departureTimeText = tfDepartureTime.getText();\n\n        String endTimeText = tfEndTime.getText();\n\n        String priceText = tfPrice.getText();\n\n\n\n        if (selectedCinemaName == null || selectedFilmName == null || selectedRoomName == null || selectedDate == null\n\n                || departureTimeText.isEmpty() || endTimeText.isEmpty() || priceText.isEmpty()) {\n\n            showAlert(\"Please complete all fields.\");\n\n            return;\n\n        }\n\n\n\n        // Vérifier que les champs de l'heure de début et de fin sont au format heure\n\n        try {\n\n            Time.valueOf(LocalTime.parse(departureTimeText));\n\n            Time.valueOf(LocalTime.parse(endTimeText));\n\n        } catch (DateTimeParseException e) {\n\n            showAlert(\"The Start Time and End Time fields must be in the format HH:MM:SS.\");\n\n            return;\n\n        }\n\n\n\n        // Vérifier que le champ price contient un nombre réel\n\n        try {\n\n            double price = Double.parseDouble(priceText);\n\n            if (price <= 0) {\n\n                showAlert(\"The price must be a positive number.\");\n\n                return;\n\n            }\n\n        } catch (NumberFormatException e) {\n\n            showAlert(\"The Price field must be a real number.\");\n\n            return;\n\n        }\n\n\n\n        CinemaService cinemaService = new CinemaService();\n\n        Cinema selectedCinema = cinemaService.getCinemaByName(selectedCinemaName);\n\n\n\n        FilmService filmService = new FilmService();\n\n        Film selectedFilm = filmService.getFilmByName(selectedFilmName);\n\n\n\n        SalleService salleService = new SalleService();\n\n        Salle selectedRoom = salleService.getSalleByName(selectedRoomName);\n\n\n\n        Time departureTime = Time.valueOf(LocalTime.parse(departureTimeText));\n\n        Time endTime = Time.valueOf(LocalTime.parse(endTimeText));\n\n\n\n        Date date = Date.valueOf(selectedDate);\n\n\n\n        double price = Double.parseDouble(priceText);\n\n\n\n        Seance newSeance = new Seance(selectedRoom, departureTime, endTime, date, price, new Filmcinema(selectedFilm, selectedCinema));\n\n\n\n        SeanceService seanceService = new SeanceService();\n\n        seanceService.create(newSeance);\n\n\n\n        showAlert(\"Session added successfully!\");\n\n        loadSeances();\n\n        showSessionForm();\n\n    }\n",
              "description": ""
            },
            "name": "addSeance",
            "location": {
              "start": 2061,
              "insert": 2061,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 123,
            "docLength": null
          },
          {
            "id": "e1ff5669-bd63-bfaf-ea4d-acbc3687576a",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Retrieves a list of `Seance` objects from an external service, converts it to an observable list, and sets it as the items of a view.",
            "params": [],
            "returns": {
              "type_name": "ListSeance",
              "description": "a list of Seance objects.\n\n1. List<Seance>: This is the type of the returned output, indicating that it is a list of `Seance` objects.\n2. SeanceService: The class used to read the seance data, which is likely a database or API call.\n3. read(): The method called on the `SeanceService` instance to retrieve the seance data.\n4. List<Seance>: The list of `Seance` objects returned by the `read()` method.\n5. ObservableList<Seance>: An observable list of `Seance` objects, which means that the list can be modified through operations such as adding, removing, or modifying elements.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "import java.util.List;\n\npublic class CinemaController {\n    private List<Seance> seances = loadSeances();\n\n    public void start() {\n        SeanceService seanceService = new SeanceService();\n        for (Seance seance : seances) {\n            //Do something with the Seance objects.\n        }\n    }\n}\n",
              "description": "\nThe above code will use the list of Seance objects from loadSeances to do something within the start method. The list is stored in the private variable seances which is created in the constructor."
            },
            "name": "loadSeances",
            "location": {
              "start": 2187,
              "insert": 2187,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "e5bd0739-bb4e-d29d-b24f-e6378f981058",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Verifies that all fields are filled, and then creates a new room in the cinema's database with the provided number of places and name, displaying an alert message after successful creation.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event of a button click and triggers the execution of the code within the function.\n\n* `event` is an `ActionEvent`, indicating that the method was called as a result of user action.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.event.ActionEvent;\n\n@FXML\nprivate void AjouterSalle(ActionEvent event) {\n    if (tfNbrPlaces.getText().isEmpty() || tfNomSalle.getText().isEmpty()) {\n        showAlert(\"Please complete all fields!\");\n        return;\n    }\n\n    try {\n        int nombrePlaces = Integer.parseInt(tfNbrPlaces.getText());\n        if (nombrePlaces <= 0) {\n            showAlert(\"The number of places must be a positive integer!\");\n            return;\n        }\n    } catch (NumberFormatException e) {\n        showAlert(\"The number of places must be an integer!\");\n        return;\n    }\n\n    SalleService ss = new SalleService();\n    ss.create(new Salle(cinemaId, Integer.parseInt(tfNbrPlaces.getText()), tfNomSalle.getText()));\n\n    Alert alert = new Alert(Alert.AlertType.INFORMATION);\n    alert.setTitle(\"Added room\");\n    alert.setContentText(\"Added room!\");\n    alert.show();\n\n    loadsalles();\n}\n",
              "description": ""
            },
            "name": "AjouterSalle",
            "location": {
              "start": 2207,
              "insert": 2207,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 57,
            "docLength": null
          },
          {
            "id": "d42c1be0-8375-ac83-6447-625fa9dd0c3f",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Reads salle data from a service, filters them based on cinema Id, and displays the available rooms in a list view.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class Main {\n    private void loadSalles() {\n        SalleService salleService = new SalleService();\n        \n        List<Salle> salles = salleService.read();\n        \n        List<Salle> salles_cinema = salles.stream().filter(salle -> salle.getId_cinema() == cinemaId).collect(Collectors.toList());\n        \n        if (salles_cinema.isEmpty()) {\n            showAlert(\"No rooms are available\");\n            return;\n        }\n        \n        ObservableList<Salle> salleInfos = FXCollections.observableArrayList(salles_cinema);\n        \n        RoomTableView.setItems(salleInfos);\n    }\n    \n    private void showAlert(String message) {\n        Alert alert = new Alert(Alert.AlertType.WARNING);\n        alert.initStyle(StageStyle.UTILITY);\n        alert.setTitle(\"Warning\");\n        alert.setHeaderText(null);\n        alert.setContentText(message);\n        \n        alert.showAndWait();\n    }\n}\n",
              "description": "\nThe example code should work correctly and be as short as possible."
            },
            "name": "loadsalles",
            "location": {
              "start": 2267,
              "insert": 2267,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 33,
            "docLength": null
          },
          {
            "id": "b8196301-f202-0080-2741-1e0f0fd89bb4",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Makes the `facebookAnchor` component invisible when the `Facebook` button is clicked.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "occurrence of a button click event that triggered the function execution.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid initialize() {\n    closeAnchor.setOnAction(this::closeAnchor);\n}\nprivate void closeAnchor(ActionEvent event) {\n    facebookAnchor.setVisible(false);\n}\n",
              "description": ""
            },
            "name": "closeAnchor",
            "location": {
              "start": 2303,
              "insert": 2303,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "03729461-5472-d69d-f649-a98a557d07ca",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Posts a status update to Facebook using an access token and message from a text area.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "action that triggered the function execution, providing the necessary context for the code to perform its intended task.\n\n* `txtareaStatut`: This is a text area where the status message to be published is entered by the user.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid handlePublierStatut() {\n    String message = \"Hello world!\"; // The message that is to be published to Facebook\n    String accessToken = \"EAAQzq3ZC1QRwBO1ANXqPJE0gbGdvugxiIwh4y5UuB4H9touxQpQaZBzDQ8gwewD4JVRMUzqOwbDmsrC8EMYRb19deQAEhWFX7uQJAcOIAnBcpHx1JnbNgMITZCq55N6ZCppxZBmHAS1itmrSt9B4aCQbNsP3AMi6mXZAJZAwaZAXCe72fP6OuzjWZAgdUgZAygeFsZD\"; // Facebook access token\n    String url = \"https://graph.facebook.com/v19.0/me/feed\"; // Facebook Graph API URL to publish the message\n    String data = \"message=\" + message + \"&access_token=\" + accessToken; // Data to be sent to the Facebook Graph API\n    \n    try {\n        URL obj = new URL(url);\n        HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n        con.setRequestMethod(\"POST\");\n        con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        con.setDoOutput(true);\n        OutputStream os = con.getOutputStream();\n        os.write(data.getBytes(StandardCharsets.UTF_8));\n        os.flush();\n        os.close();\n        \n        int responseCode = con.getResponseCode();\n        System.out.println(\"Response Code : \" + responseCode);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n",
              "description": "\nNote that the above example is shortened for brevity, but it should be clear how to use this method correctly. Also, please note that the above code is not a unit test example, but rather an example of how to use this java method."
            },
            "name": "PublierStatut",
            "location": {
              "start": 2313,
              "insert": 2313,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 49,
            "docLength": null
          },
          {
            "id": "85957ad1-c256-0d8a-6443-f1d21d8e8a2a",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Loads an FXML file, creates a new stage and replaces the current stage with it, displaying the contents of the FXML file on the screen.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the function, specifically the button click event that initiates the display of the film management interface.\n\n* `event` represents an ActionEvent object, which carries information about the action that triggered the function.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid showFilmResponsable(ActionEvent event) throws IOException {\n    FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/InterfaceFilm.fxml\"));\n    Parent root = loader.load();\n    Scene scene = new Scene(root);\n    Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n    Stage stage = new Stage();\n    stage.setScene(scene);\n    stage.setTitle(\"Film Manegement\");\n    stage.show();\n    currentStage.close();\n}\n",
              "description": "\nIn this example, a FXMLLoader object is created and passed to the load() method of it. The getClass().getResource() method is called to return a URL that points to the location of InterfaceFilm.fxml in our codebase. This URL is then passed as an argument to the load() method, which loads and returns a Parent object that represents the root of the scene graph.\n\nThe scene variable is created by creating a new Scene instance using the parent object returned from the FXMLLoader's load() method. The currentStage variable is also obtained by casting the source Node of the event argument to a Stage, which is done by first casting the source Node to a Node, and then casting that Node to a Stage.\n\nThe stage variable is created using the constructor of the Stage class, passing in the scene variable as an argument. The title of the stage is set to \"Film Manegement\" using the setTitle() method. Finally, the show() method is called on the stage object to display it to the user. The currentStage object is then closed using the close() method."
            },
            "name": "AfficherFilmResponsable",
            "location": {
              "start": 2365,
              "insert": 2365,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "a07256fd-3a11-4b8a-5643-a58f197909dc",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Makes the `addRoomForm`, `backButton`, `RoomTableView`, and `cinemaFormPane` invisible, while making the `sessionButton` visible, when a user clicks the back button.",
            "params": [
              {
                "name": "event",
                "type_name": "MouseEvent",
                "description": "mouse event that triggered the execution of the `back` method.\n\nEvent type: `MouseEvent`\nTarget element: `backButton`",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid initialize() {\n    cinemaListPane.setVisible(false);\n    cinemaFormPane.setVisible(true);\n}\n\n@FXML\nvoid showCinema(ActionEvent event) {\n    cinemaFormPane.setVisible(false);\n    cinemaListPane.setVisible(true);\n}\n\n@FXML\nvoid back(MouseEvent event) {\n    cinemaFormPane.setVisible(true);\n    cinemaListPane.setVisible(false);\n}\n",
              "description": "\nHere, the initialize method is called when the scene is loaded to make sure that the cinemaListPane and cinemaFormPane are not shown by default. The showCinema method sets the visibility of the cinemaListPane to true while making the cinemaFormPane invisible. The back method then sets the cinemaFormPane's visibility to true while making the cinemaListPane invisible."
            },
            "name": "back",
            "location": {
              "start": 2391,
              "insert": 2391,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "92bb1e58-597c-f7af-b940-b49398eda7cf",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Makes the `sessionFormPane`, `SessionTableView`, and `backSession` components visible, while hiding `cinemaFormPane`, `cinemaListPane`, and `sessionButton`. It also calls `loadSeances()` and `showSessionForm()` to display the session form and content.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "occurrence of an action, triggering the execution of the `showSessions()` method.\n\n* `event` is an `ActionEvent` object representing the user action that triggered the function.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.event.ActionEvent;\n\npublic class Main {\n    @FXML private void showSessions(ActionEvent event) {\n        cinemaFormPane.setVisible(false);\n        cinemaListPane.setVisible(false);\n        sessionFormPane.setVisible(true);\n        SessionTableView.setVisible(true);\n        sessionButton.setVisible(false);\n        backSession.setVisible(true);\n        loadSeances();\n        showSessionForm();\n        System.out.println(loadSeances());\n    }\n}\n",
              "description": "\nThe above method would hide the cinema form and list pane, and display the session form and table. It would then call the `loadSeances()` method which loads the seances into a data structure. Finally, it would call the `showSessionForm()` method to show the seance form. The output of this code is the loaded seance data printed in the console.\n\nThis method is called from an ActionEvent that is triggered by a button click on the cinema form."
            },
            "name": "showSessions",
            "location": {
              "start": 2415,
              "insert": 2415,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 27,
            "docLength": null
          },
          {
            "id": "77c941b3-69c7-ffbb-bb43-8f9bdcc119cf",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Sets the visibility of various components in a JavaFX application, including the `cinemaFormPane`, `cinemaListPane`, `sessionFormPane`, and `SessionTableView`. It makes these components visible or invisible based on a user input event.",
            "params": [
              {
                "name": "event",
                "type_name": "MouseEvent",
                "description": "mouse event that triggered the `back2()` method, providing information about the location and type of the event.\n\n* Type: `MouseEvent`\n* Target: `cinemaFormPane` or `sessionButton` (depending on the location of the click)\n* Code: The button that was clicked (either `cinemaFormPane` or `sessionButton`)",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    void back2(MouseEvent event) {\n\n        cinemaFormPane.setVisible(true);\n\n        cinemaListPane.setVisible(true);\n\n        sessionFormPane.setVisible(false);\n\n        SessionTableView.setVisible(false);\n\n        sessionButton.setVisible(true);\n\n    }\n",
              "description": "\nThis code would hide the session form and set the session button to be visible again. It also sets the cinema forms and list to be visible, hiding the session table. This method is used when the user wants to go back to the main cinema screen and hide the session information."
            },
            "name": "back2",
            "location": {
              "start": 2445,
              "insert": 2445,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "0a0eee57-2c1c-74a1-f242-8d1b3d174169",
            "ancestors": [
              "8a0f2e9b-a045-e8a8-4545-370f26b3ce11"
            ],
            "type": "function",
            "description": "Allows the user to select an image file, then copies it to a specified directory and sets the selected image as the `image` field.",
            "params": [
              {
                "name": "event",
                "type_name": "MouseEvent",
                "description": "mouse event that triggered the `importImage()` method and provides the location of the selected file through its `FileChooser` object.\n\n* `event` is a `MouseEvent` object representing a user's interaction with the application.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import java.io.File;\nimport java.io.IOException;\n\nimport javafx.fxml.FXML;\nimport javafx.scene.image.Image;\nimport javafx.scene.input.MouseEvent;\nimport javafx.stage.FileChooser;\nimport javafx.stage.Stage;\n\npublic class ImportImageExample {\n    @FXML private ImageView image;\n\n    public void importImage(MouseEvent event) {\n        FileChooser fileChooser = new FileChooser();\n        fileChooser.getExtensionFilters().addAll(\n                new FileChooser.ExtensionFilter(\"PNG\", \"*.png\"),\n                new FileChooser.ExtensionFilter(\"JPG\", \"*.jpg\")\n        );\n        fileChooser.setTitle(\"Sélectionner une image\");\n        File selectedFile = fileChooser.showOpenDialog(null);\n        if (selectedFile != null) {\n            try {\n                String destinationDirectory1 = \"./src/main/resources/img/cinemas/\";\n                String destinationDirectory2 = \"C:\\\\xampp\\\\htdocs\\\\Rakcha\\\\rakcha-web\\\\public\\\\img\\\\cinemas\\\\\";\n                Path destinationPath1 = Paths.get(destinationDirectory1);\n                Path destinationPath2 = Paths.get(destinationDirectory2);\n                String uniqueFileName = System.currentTimeMillis() + \"_\" + selectedFile.getName();\n                Path destinationFilePath1 = destinationPath1.resolve(uniqueFileName);\n                Path destinationFilePath2 = destinationPath2.resolve(uniqueFileName);\n                Files.copy(selectedFile.toPath(), destinationFilePath1);\n                Files.copy(selectedFile.toPath(), destinationFilePath2);\n                Image selectedImage = new Image(destinationFilePath1.toUri().toString());\n                image.setImage(selectedImage);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n",
              "description": "\nIn this example, a mouse click on the image view will open a file chooser dialog where the user can select an image. When selected, the code copies the file to two directories (one for the application and one for the web) and then sets the ImageView to display the selected image.\n\nNote that this is not a complete example. It does not handle errors or edge cases. However, it should give you an idea of how the method can be used."
            },
            "name": "importImage",
            "location": {
              "start": 2467,
              "insert": 2467,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 53,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "ModifierCinemaController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/cinemas/ModifierCinemaController.java",
    "content": {
      "structured": {
        "description": "A controller for modifying cinema details. It includes three main functions: `modifier()`, which updates cinema details using FXML loading and database operations; `select()`, which allows users to select an image for the cinema logo; and `initialize()`, which initializes the controller with any necessary resources. The code uses JavaFX packages, including FXML, Initializable, and Stage, as well as a custom CinemaService package for updating the cinema database.",
        "items": [
          {
            "id": "120bb81b-2eb3-dead-0d4e-8b87289e9911",
            "ancestors": [],
            "type": "function",
            "description": "Is used to modify the details of a cinema object in a GUI application using JavaFX. It has fields for entering cinema name, address, and logo, and methods for updating the cinema details and displaying an alert message. The class also includes an initialize method and event handlers for the select and modifier buttons.",
            "name": "ModifierCinemaController",
            "location": {
              "start": 47,
              "insert": 47,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 205,
            "docLength": null
          },
          {
            "id": "c210cea4-263a-aea9-5d49-427d0d64ebc0",
            "ancestors": [
              "120bb81b-2eb3-dead-0d4e-8b87289e9911"
            ],
            "type": "function",
            "description": "Is called when an instance of a class is created and initializes its resources by performing no-op actions.",
            "params": [
              {
                "name": "location",
                "type_name": "URL",
                "description": "URL of the web application's root document, which is used to locate the necessary resources for its proper operation.",
                "complex_type": false
              },
              {
                "name": "resources",
                "type_name": "ResourceBundle",
                "description": "ResourceBundle that contains keys for localization of the application's user interface and other textual content.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\npublic void initialize(URL location, ResourceBundle resources) {\n}\n",
              "description": "\nThis method is called automatically by the JavaFX runtime and should be used to initialize any fields or variables that are defined in the class. The `location` parameter represents the URL of the FXML file that contains the controller, while the `resources` parameter represents a bundle of resources that can be accessed from the FXML file. In this example, the method does not perform any specific actions, but it is an important part of the JavaFX programming model."
            },
            "name": "initialize",
            "location": {
              "start": 89,
              "insert": 81,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 80,
                "end": 87
              }
            },
            "item_type": "method",
            "length": 5,
            "docLength": 7
          },
          {
            "id": "c7c6be77-1f8e-7c85-8948-ee9128d69dd4",
            "ancestors": [
              "120bb81b-2eb3-dead-0d4e-8b87289e9911"
            ],
            "type": "function",
            "description": "Sets text fields and displays an image based on input cinema object's properties: nom, adresse, logo.",
            "params": [
              {
                "name": "cinema",
                "type_name": "Cinema",
                "description": "Cinema object that contains the name, address, and logo of the cinema, which are then set as text values for the `tfNom`, `tfAdresse`, and `tfLogo` fields, respectively, within the function's body.\n\n* `cinema`: A `Cinema` object representing a movie theater with name, address, and logo.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        Cinema cinema = new Cinema(\"Cinema\", \"Address\");\n        ModifierCinemaController controller = new ModifierCinemaController();\n        controller.initData(cinema);\n    }\n}\n",
              "description": ""
            },
            "name": "initData",
            "location": {
              "start": 105,
              "insert": 99,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 98,
                "end": 103
              }
            },
            "item_type": "method",
            "length": 17,
            "docLength": 5
          },
          {
            "id": "1c0f9bb1-7509-aca3-584f-fac88b1ad95f",
            "ancestors": [
              "120bb81b-2eb3-dead-0d4e-8b87289e9911"
            ],
            "type": "function",
            "description": "Allows users to edit the details of a cinema, including its name and address. It updates the cinema's information in the database and displays an alert message upon successful completion.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the method execution, providing the source of the event and any related data.\n\n* `event` is an instance of `ActionEvent`, which represents a user action related to a UI component.\n* The `event` object contains information about the action that triggered the function, such as the source of the action (e.g., a button or a menu item) and the state of the component at the time of the action.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid modifier(ActionEvent event) throws IOException {\n    if (cinema == null) {\n        showAlert(\"Veuillez sélectionner un cinéma.\");\n        return;\n    }\n\n    // Récupérer les nouvelles valeurs des champs\n    String nouveauNom = tfNom.getText();\n    String nouvelleAdresse = tfAdresse.getText();\n\n    // Vérifier si les champs obligatoires sont remplis\n    if (nouveauNom.isEmpty() || nouvelleAdresse.isEmpty()) {\n        showAlert(\"Veuillez remplir tous les champs obligatoires.\");\n        return;\n    }\n\n    // Mettre à jour les informations du cinéma\n    cinema.setNom(nouveauNom);\n    cinema.setAdresse(nouvelleAdresse);\n    cinema.setLogo(\"\");\n\n    // Mettre à jour le cinéma dans la base de données\n    CinemaService cinemaService = new CinemaService();\n    cinemaService.update(cinema);\n\n    showAlert(\"Les modifications ont été enregistrées avec succès.\");\n\n    // Charger la nouvelle interface ListCinemaAdmin.fxml\n    FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/ListCinemaResponsable.fxml\"));\n    Parent root = loader.load();\n\n    // Créer une nouvelle scène avec la nouvelle interface\n    Scene scene = new Scene(root);\n\n    // Créer une nouvelle fenêtre (stage) et y attacher la scène\n    Stage stage = new Stage();\n    stage.setScene(scene);\n    stage.show();\n}\n",
              "description": ""
            },
            "name": "modifier",
            "location": {
              "start": 125,
              "insert": 125,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 81,
            "docLength": null
          },
          {
            "id": "5ae9bf24-dda0-9f87-c447-9ded4512c824",
            "ancestors": [
              "120bb81b-2eb3-dead-0d4e-8b87289e9911"
            ],
            "type": "function",
            "description": "Is used to select an image file from a file chooser and set it as the logo for the FXML stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "selection event that triggered the function execution.\n\n* Event type: `ActionEvent`\n* Target: `null` (no specific component is associated with the event)",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid select(ActionEvent event) {\n  FileChooser fileChooser = new FileChooser();\n  fileChooser.setTitle(\"Select an image\");\n  selectedFile = fileChooser.showOpenDialog(null);\n  if (selectedFile != null) {\n    Image selectedImage = new Image(selectedFile.toURI().toString());\n    tfLogo.setImage(selectedImage);\n  }\n}\n",
              "description": ""
            },
            "name": "select",
            "location": {
              "start": 211,
              "insert": 211,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "9e38a376-4a49-839b-1241-b0ab81fe1bf4",
            "ancestors": [
              "120bb81b-2eb3-dead-0d4e-8b87289e9911"
            ],
            "type": "function",
            "description": "Creates an Alert dialog with an information message.",
            "params": [
              {
                "name": "message",
                "type_name": "String",
                "description": "text to be displayed as an information message when the `showAlert()` method is called.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "// Create an Alert dialog with an information message\nshowAlert(\"This is a test alert.\");\n\n// Set the title, header text, and content text of the alert\nshowAlert(title: \"Information\", headerText: null, contentText: \"This is a test alert.\")\n",
              "description": ""
            },
            "name": "showAlert",
            "location": {
              "start": 235,
              "insert": 235,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "SentimentAnalysisController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/cinemas/SentimentAnalysisController.java",
    "content": {
      "structured": {
        "description": "A `SentimentAnalysisController` class that analyzes the sentiment of text using the Stanford CoreNLP pipeline. The code sets up properties for the pipeline and initializes a new instance of the StanfordCoreNLP class, then creates an annotation object with the given text and annotates it with the pipeline. Finally, it extracts the sentiment annotations from the annotation object and returns them as a string.",
        "items": [
          {
            "id": "b13fafc0-23ca-30b2-9243-b882fb64bbb8",
            "ancestors": [],
            "type": "function",
            "description": "Is designed to analyze text sentiment using Stanford CoreNLP pipeline. It takes a text input and returns a sentiment result as a string. The class configures the pipeline properties, initializes the StanfordCoreNLP pipeline, creates an annotation with the input text, and analyzes the text to extract sentiment annotations.",
            "name": "SentimentAnalysisController",
            "location": {
              "start": 25,
              "insert": 25,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 69,
            "docLength": null
          },
          {
            "id": "0ed515af-6d7e-9a9a-344b-84600a2df183",
            "ancestors": [
              "b13fafc0-23ca-30b2-9243-b882fb64bbb8"
            ],
            "type": "function",
            "description": "Analyzes a given text using Stanford CoreNLP pipeline to extract sentiment annotations, such as positive, negative or neutral. It returns the extracted sentiment in a string format.",
            "params": [
              {
                "name": "text",
                "type_name": "String",
                "description": "text to be analyzed for sentiment using the Stanford CoreNLP pipeline.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a string containing the sentiment annotations of the given text.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n  public static void main(String[] args) {\n    String text = \"I am feeling very happy today!\";\n    SentimentAnalysisController controller = new SentimentAnalysisController();\n    System.out.println(controller.analyzeSentiment(text)); // Output: VERY_POSITIVE\n  }\n}\n",
              "description": ""
            },
            "name": "analyzeSentiment",
            "location": {
              "start": 43,
              "insert": 35,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 34,
                "end": 41
              }
            },
            "item_type": "method",
            "length": 47,
            "docLength": 7
          }
        ]
      }
    }
  },
  {
    "name": "ActorController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/films/ActorController.java",
    "content": {
      "structured": {
        "description": "An interface for interacting with a film database, including displaying actor information and allowing users to add new films and actors. The code uses JavaFX for the user interface and Spring and Reactive Streams for handling requests to the backend API. It also includes a menu item for adding new cinema.",
        "items": [
          {
            "id": "5450b90f-0d18-808f-0548-520ee21c59d5",
            "ancestors": [],
            "type": "function",
            "description": "Is responsible for handling user interactions related to actors in a movie database application. It provides functions to read and update actor data, as well as delete actors from the database. Additionally, it provides an event handler for switching to a new stage with a different FXML layout when the \"Ajouter Cinéma\" button is clicked.",
            "name": "ActorController",
            "location": {
              "start": 73,
              "insert": 73,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 639,
            "docLength": null
          },
          {
            "id": "cee659f6-a2ed-b48b-f947-dada8c91c126",
            "ancestors": [
              "5450b90f-0d18-808f-0548-520ee21c59d5"
            ],
            "type": "function",
            "description": "Sets up a filtered list of actors based on a searchable text field and updates a tableView with the filtered list.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void initialize() {\n        readActorTable();\n\n        setupCellOnEditCommit();\n\n        filteredActors = new FilteredList<>(filmActor_tableView11.getItems());\n\n\n        // Réinitialiser la TableView avec la liste filtrée\n        filmActor_tableView11.setItems(filteredActors);\n\n\n        // Appliquer le filtre lorsque le texte de recherche change\n        recherche_textField.textProperty().addListener((observable, oldValue, newValue) -> {\n            searchActor(newValue);\n        });\n    }\n",
              "description": ""
            },
            "name": "initialize",
            "location": {
              "start": 133,
              "insert": 133,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 27,
            "docLength": null
          },
          {
            "id": "a161ff10-7868-f999-d543-a3ab190dadab",
            "ancestors": [
              "5450b90f-0d18-808f-0548-520ee21c59d5"
            ],
            "type": "function",
            "description": "Filters an `Actors` list based on a provided search text, returning only actors whose name contains the searched text (ignoring case).",
            "params": [
              {
                "name": "searchText",
                "type_name": "String",
                "description": "search query that filters the actors in the `filteredActors` list.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "// Creating an ArrayList of actors\nArrayList<Actor> listOfActors = new ArrayList<>();\nlistOfActors.add(new Actor(\"Tom Cruise\", \"His face is his acting style\"));\nlistOfActors.add(new Actor(\"Leonardo DiCaprio\", \"He's a great actor, but can he act like me?\"));\nlistOfActors.add(new Actor(\"Robert De Niro\", \"I don't know if he can act or not, because I don't know who he is\"));\n\n// Creating an ObservableList of actors to be used in the TableView\nObservableList<Actor> list = FXCollections.observableArrayList(listOfActors);\n\n// Creating a TextField for user input and an empty FilteredList for the filtered list of Actors\nTextField searchTextField = new TextField();\nFilteredList<Actor> filteredList = new FilteredList<>(list, actor -> true);\n\n// Creating a method to filter the list based on the user input\nsearchTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n    searchActor(newValue);\n});\n\n// Searching the list of actors based on the text in the TextField\nprivate void searchActor(String searchText) {\n    filteredList.setPredicate(actor -> {\n        // If the search bar is empty, show all Actors\n        if (searchText == null || searchText.isEmpty()) {\n            return true;\n        }\n\n        // Checking if the Actor's name contains the text in the TextField\n        String lowerCaseFilter = searchText.toLowerCase();\n        return actor.getNom().toLowerCase().contains(lowerCaseFilter);\n    });\n}\n",
              "description": "\nThis example will allow you to type in a text into the TextField and it will show only actors whose names contain the text that was typed."
            },
            "name": "searchActor",
            "location": {
              "start": 171,
              "insert": 165,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 164,
                "end": 169
              }
            },
            "item_type": "method",
            "length": 25,
            "docLength": 5
          },
          {
            "id": "1014b92f-ce51-9ab5-2e4a-165fa98f98b5",
            "ancestors": [
              "5450b90f-0d18-808f-0548-520ee21c59d5"
            ],
            "type": "function",
            "description": "Allows the user to select an image file, which is then copied to a specified directory and set as the image for a widget named `imageAcoter_ImageView1`.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "open file selection event that triggered the function to execute.\n\n* Type: `ActionEvent` (represents an action event triggered by a user)\n* Target: null (indicates that the event is not associated with any specific component)",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "importAcotrImage(new ActionEvent());\n",
              "description": "\nThis will load a file chooser dialog, where the user can select an image and it will be stored in the directory ./src/main/resources/img/films/. The selected image is then assigned to the ImageView imageAcotr_ImageView1."
            },
            "name": "importAcotrImage",
            "location": {
              "start": 207,
              "insert": 201,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 200,
                "end": 205
              }
            },
            "item_type": "method",
            "length": 37,
            "docLength": 5
          },
          {
            "id": "79b5285e-46bc-4588-e248-6b2778c58ec4",
            "ancestors": [
              "5450b90f-0d18-808f-0548-520ee21c59d5"
            ],
            "type": "function",
            "description": "Creates an `Alert` object and displays a message to the user.",
            "params": [
              {
                "name": "message",
                "type_name": "String",
                "description": "content to be displayed in an alert window when the `showAlert()` method is called.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "showAlert(\"Hello\");\n",
              "description": "\nThis will open an Alert box with the title \"Information\" and a message \"Hello\"."
            },
            "name": "showAlert",
            "location": {
              "start": 247,
              "insert": 247,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "944db605-6e9e-7db2-2049-bf3aea6f389d",
            "ancestors": [
              "5450b90f-0d18-808f-0548-520ee21c59d5"
            ],
            "type": "function",
            "description": "Takes an image URL, extracts the actor's path from it, creates a new actor object with the actor's name, URI, and bio, and adds it to the ActorService using the create method. It then displays an information alert with the title \"Actor ajoutée\" and content text \"Actor ajouté!\" before refreshing the actor table.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "user's action of clicking on the \"Insert Actor\" button, which triggers the function to execute and perform the actor insertion logic.\n\n* `event`: An `ActionEvent` object representing the user's action that triggered the function.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void insertActor(ActionEvent event) {\n        ActorService actorService = new ActorService();\n        \n        // Obtain the image file from the ImageView component and convert it to a URI\n        String fullPath = imageAcotr_ImageView1.getImage().getUrl();\n        String requiredPath = fullPath.substring(fullPath.indexOf(\"/img/actors/\"));\n        URI uri = null;\n        try {\n            uri = new URI(requiredPath);\n        } catch (URISyntaxException e) {\n            System.out.println(e.getMessage());\n        }\n        \n        // Create a new actor object with the actor's name, image file path and bio\n        Actor actor = new Actor(nomAcotr_textArea1.getText(), uri.getPath(), bioAcotr_textArea.getText());\n        \n        // Use the ActorService to insert the actor into the database\n        actorService.create(actor);\n        \n        // Display an alert message indicating that the actor has been added successfully\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\n        alert.setTitle(\"Actor ajoutée\");\n        alert.setContentText(\"Actor ajoutée !\");\n        alert.show();\n        \n        // Update the table view of actors to reflect the change made by inserting the new actor\n        readActorTable();\n    }\n",
              "description": ""
            },
            "name": "insertActor",
            "location": {
              "start": 267,
              "insert": 267,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 41,
            "docLength": null
          },
          {
            "id": "9f8c56f9-c8e9-5f93-6240-d730ee420104",
            "ancestors": [
              "5450b90f-0d18-808f-0548-520ee21c59d5"
            ],
            "type": "function",
            "description": "Sets up event handlers for two table columns in a `TableView`. When an edit is committed, it updates the corresponding actor's property with the new value from the column edit.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "private void setupCellOnEditCommit() {\n    nomAcotr_tableColumn1.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Actor, String>>() {\n        @Override\n        public void handle(TableColumn.CellEditEvent<Actor, String> event) {\n            try {\n                Actor actor = (Actor) event.getTableView().getItems().get(event.getTablePosition().getRow());\n                actor.setNom(event.getNewValue());\n                updateActor(actor);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    });\n    \n    bioActor_tableColumn1.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Actor, String>>() {\n        @Override\n        public void handle(TableColumn.CellEditEvent<Actor, String> event) {\n            try {\n                Actor actor = (Actor) event.getTableView().getItems().get(event.getTablePosition().getRow());\n                actor.setBiographie(event.getNewValue());\n                updateActor(actor);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    });\n}\n",
              "description": "\nThis code sets up event listeners on the columns in the table. When a cell is edited, the corresponding column's listener will get triggered and the value of that cell will be committed to the underlying Actor object. The updateActor method will then be called with the updated actor object."
            },
            "name": "setupCellOnEditCommit",
            "location": {
              "start": 311,
              "insert": 311,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 57,
            "docLength": null
          },
          {
            "id": "876a4168-6a34-3583-6240-7322710989dc",
            "ancestors": [
              "5450b90f-0d18-808f-0548-520ee21c59d5",
              "9f8c56f9-c8e9-5f93-6240-d730ee420104"
            ],
            "type": "function",
            "description": "Is called when a cell in a table is edited. It sets the new value of the cell to the nominated value, and then updates the corresponding actor object with the new value.",
            "params": [
              {
                "name": "event",
                "type_name": "TableColumn.CellEditEvent<Actor, String>",
                "description": "CellEditEvent object that contains information about the edit event occurring on a table column, including the edited cell's position and the new value being entered.\n\n* `TableColumn.CellEditEvent`: This is the type of event that triggered the function's execution.\n* `Actor`: This is the type parameter of the event, which represents the data type of the cell being edited.\n* `String`: This is the type of the value being edited in the cell.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.event.EventHandler;\nimport javafx.scene.control.TableColumn;\nimport javafx.scene.control.TablePosition;\nimport javafx.scene.control.TableView;\nimport javafx.scene.input.MouseEvent;\n\npublic class TableViewController implements EventHandler<TableColumn.CellEditEvent<Actor, String>> {\n    @Override\n    public void handle(TableColumn.CellEditEvent<Actor, String> event) {\n        try {\n            event.getTableView().getItems().get(event.getTablePosition().getRow()).setNom(event.getNewValue());\n            updateActor(event.getTableView().getItems().get(event.getTablePosition().getRow()));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
              "description": ""
            },
            "name": "handle",
            "location": {
              "start": 315,
              "insert": 315,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "d4d1ee80-94fc-5b9b-694d-c136d8e366f4",
            "ancestors": [
              "5450b90f-0d18-808f-0548-520ee21c59d5",
              "9f8c56f9-c8e9-5f93-6240-d730ee420104"
            ],
            "type": "function",
            "description": "In the `TableColumn` class is responsible for handling cell editing events for a column containing a `String` type data. It updates the value of the `biographie` property of the corresponding actor object in the table view, and also triggers an update of the actor object itself.",
            "params": [
              {
                "name": "event",
                "type_name": "TableColumn.CellEditEvent<Actor, String>",
                "description": "CellEditEvent of a TableColumn, providing the edited cell and its new value.\n\n* `TableColumn.CellEditEvent`: The event type that indicates cell editing has occurred on a table column.\n* `Actor`: The data type of the cells being edited, which is an actor object in this case.\n* `String`: The type of the value being edited, which is a string in this case.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\npublic void handle(TableColumn.CellEditEvent<Actor, String> event) {\n    try {\n        Actor actor = event.getTableView().getItems().get(event.getTablePosition().getRow());\n        actor.setBiographie(event.getNewValue());\n        updateActor(actor);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n",
              "description": "\nExplanation:\nThis method is an event handler that listens for a CellEditEvent. This event occurs when the user changes the value of the cell in the table. When this event occurs, the method retrieves the Actor instance from the ObservableList, updates its biography with the new value from the editable TextField, and then calls the updateActor() method to save these changes to the database.\n\nIt is important to note that this method only listens for edits of type String in the table column, as specified by the generic types <Actor, String>. This method does not need to be concerned with other types of edits, as the TextFieldTableCell class ensures that only valid text is entered into the cell.\n\nThis method also uses a try-catch block to handle any exceptions that may occur during database interaction. In this case, it simply prints the stack trace to the console for debugging purposes."
            },
            "name": "handle",
            "location": {
              "start": 341,
              "insert": 341,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "c2d9eaf6-6716-02bb-2748-9589ae310a33",
            "ancestors": [
              "5450b90f-0d18-808f-0548-520ee21c59d5"
            ],
            "type": "function",
            "description": "Allows the user to select an image file from a file chooser, then saves it to two different locations and displays the image in an `ImageView`.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event of opening a file chooser, which triggers the code inside the function to execute when a file is selected.\n\n* `event`: an ActionEvent object representing the user's action of opening a file from the FileChooser.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void importImage(ActionEvent event) {\n    FileChooser fileChooser = new FileChooser();\n    fileChooser.getExtensionFilters().addAll(\n            new FileChooser.ExtensionFilter(\"PNG\", \"*.png\"),\n            new FileChooser.ExtensionFilter(\"JPG\", \"*.jpg\")\n    );\n    fileChooser.setTitle(\"Sélectionner une image\");\n    File selectedFile = fileChooser.showOpenDialog(null);\n    if (selectedFile != null) {\n        try {\n            String destinationDirectory1 = \"./src/main/resources/img/actors/\";\n            String destinationDirectory2 = \"C:\\\\xampp\\\\htdocs\\\\Rakcha\\\\rakcha-web\\\\public\\\\img\\\\actors\\\\\";\n            Path destinationPath1 = Paths.get(destinationDirectory1);\n            Path destinationPath2 = Paths.get(destinationDirectory2);\n            String uniqueFileName = System.currentTimeMillis() + \"_\" + selectedFile.getName();\n            Path destinationFilePath1 = destinationPath1.resolve(uniqueFileName);\n            Path destinationFilePath2 = destinationPath2.resolve(uniqueFileName);\n            Files.copy(selectedFile.toPath(), destinationFilePath1);\n            Files.copy(selectedFile.toPath(), destinationFilePath2);\n            Image selectedImage = new Image(destinationFilePath1.toUri().toString());\n            imageAcotr_ImageView1.setImage(selectedImage);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
              "description": "\nExplanation: This method imports an image for the actor. It does this by first using a file chooser to select an image from the user's computer. Then it uses the Files.copy method to copy that file to two directories, one in the project and one on the public web server (xampp). Finally it creates a new Image object with the URL of that copied file so that the user can see the imported image in the user interface."
            },
            "name": "importImage",
            "location": {
              "start": 371,
              "insert": 371,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 53,
            "docLength": null
          },
          {
            "id": "0a6b741e-241d-96a6-9242-e0d27d02e648",
            "ancestors": [
              "5450b90f-0d18-808f-0548-520ee21c59d5"
            ],
            "type": "function",
            "description": "Updates an actor's data in a database by first getting a connection, then calling the `update` method of the `ActorService` class and displaying an alert with the updated actor's information.",
            "params": [
              {
                "name": "actor",
                "type_name": "Actor",
                "description": "Actor object to be updated.\n\n* `Actor actor`: The actor to be updated.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "Actor actor = new Actor(123, \"NewName\", \"ImagePath\");\n\nupdateActor(actor);\n",
              "description": "\nIn this example, the 'id' field of the Actor object will be 123, the name will be \"NewName\", and the image path will be \"ImagePath\". This method will update the actor with these values in the database.\n\nPlease note that this is a very basic example on how to use this method, as it does not cover edge cases such as providing invalid inputs or dealing with exceptions."
            },
            "name": "updateActor",
            "location": {
              "start": 427,
              "insert": 427,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 39,
            "docLength": null
          },
          {
            "id": "ec638f7a-4544-6a87-924f-10d77cc21566",
            "ancestors": [
              "5450b90f-0d18-808f-0548-520ee21c59d5"
            ],
            "type": "function",
            "description": "Reads data from an Actor database, creates a table with columns for actor name, nom, bio, and image, and displays the data in the table.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML\npublic void switchtoajouterCinema(ActionEvent event) {\n    try {\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/InterfaceFilm.fxml\"));\n        AnchorPane root = fxmlLoader.load();\n        Stage stage = (Stage) AjouterFilm_Button.getScene().getWindow();\n        Scene scene = new Scene(root, 1280, 700);\n        stage.setScene(scene);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n",
              "description": "\nThis code would be used in the method switchtoajouterCinema to load another FXML page called InterfaceFilm.fxml which is a new scene and stage."
            },
            "name": "readActorTable",
            "location": {
              "start": 469,
              "insert": 469,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 193,
            "docLength": null
          },
          {
            "id": "1a1239b7-d7be-4b93-8343-7aaaa4a72249",
            "ancestors": [
              "5450b90f-0d18-808f-0548-520ee21c59d5",
              "ec638f7a-4544-6a87-924f-10d77cc21566"
            ],
            "type": "function",
            "description": "Generates a `SimpleStringProperty` instance from the `Value` object returned by the `getNom()` method of an `Actor` object.",
            "params": [
              {
                "name": "actorStringCellDataFeatures",
                "type_name": "TableColumn.CellDataFeatures<Actor, String>",
                "description": "cell data features of an actor, specifically the string value of the actor's name.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "SimpleStringProperty",
              "description": "a `SimpleStringProperty` object containing the nominal value of the input `Actor` object.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "@FXML\n\npublic void switchtoajouterCinema(ActionEvent event) {\n\n    try {\n\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/InterfaceFilm.fxml\"));\n\n        AnchorPane root = fxmlLoader.load();\n\n        Stage stage = (Stage) AjouterFilm_Button.getScene().getWindow();\n\n        Scene scene = new Scene(root, 1280, 700);\n\n        stage.setScene(scene);\n\n    } catch (Exception e) {\n\n        e.printStackTrace();\n\n    }\n\n}\n",
              "description": ""
            },
            "name": "call",
            "location": {
              "start": 487,
              "insert": 487,
              "offset": " ",
              "indent": 24,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "de66b029-bb39-52a3-4c49-3c4fc004fce2",
            "ancestors": [
              "5450b90f-0d18-808f-0548-520ee21c59d5",
              "ec638f7a-4544-6a87-924f-10d77cc21566"
            ],
            "type": "function",
            "description": "Creates a new button with an `OnAction` event handler that deletes a film when clicked, and returns the button object as an observable value.",
            "params": [
              {
                "name": "filmcategoryButtonCellDataFeatures",
                "type_name": "TableColumn.CellDataFeatures<Actor, Button>",
                "description": "value of a Button cell in a TableColumn, which contains the ID of a film category.\n\n* `getValue()`: returns the internal value of the object, which is an instance of `FilmCategoryButtonCellData`.\n* `getId()`: retrieves the unique identifier for the film category button.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "SimpleObjectProperty",
              "description": "a `SimpleObjectProperty` of a `Button` object with the text \"delete\".\n\n* The output is an `ObservableValue` of type `Button`, which means that it can be observed to change over time.\n* The output is created by calling the `Button` constructor and setting an `OnAction` event handler for the button's `onAction` method.\n* The `OnAction` event handler is an instance of `EventHandler`, which is a standard Java interface for handling events. In this case, the event handler deletes the film with the specified ID when the button is pressed.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "TableColumn<Actor, Button> delete_Button_Column = new TableColumn<>();\n    delete_Button_Column.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Actor, Button>, ObservableValue<Button>>() {\n        @Override\n        public ObservableValue<Button> call(TableColumn.CellDataFeatures<Actor, Button> filmcategoryButtonCellDataFeatures) {\n            Button button = new Button(\"delete\");\n            button.setOnAction(new EventHandler<ActionEvent>() {\n                @Override\n                public void handle(ActionEvent event) {\n                    deleteFilm(filmcategoryButtonCellDataFeatures.getValue().getId());\n                }\n            });\n            return new SimpleObjectProperty<Button>(button);\n        }\n    });\n",
              "description": "\nThe above code creates a TableColumn with the name \"delete_Button_Column\" and sets it's cell value factory to a callback method that will return a Button. The button's text will be set to \"delete\". When the button is clicked, the deleteFilm() method will be called passing in the ID of the actor as an argument."
            },
            "name": "call",
            "location": {
              "start": 505,
              "insert": 505,
              "offset": " ",
              "indent": 24,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "885477d9-259d-d99c-a041-bacf6bf5db73",
            "ancestors": [
              "5450b90f-0d18-808f-0548-520ee21c59d5",
              "ec638f7a-4544-6a87-924f-10d77cc21566",
              "de66b029-bb39-52a3-4c49-3c4fc004fce2"
            ],
            "type": "function",
            "description": "Deletes a film based on the ID passed as an event parameter from the `filmcategoryButtonCellDataFeatures`.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "`ActionEvent` that triggered the function execution, providing the identifier of the button that was clicked.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\nprivate void switchtoajouterCinema(ActionEvent event) {\n\n    try {\n\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/InterfaceFilm.fxml\"));\n\n        AnchorPane root = fxmlLoader.load();\n\n        Stage stage = (Stage) AjouterFilm_Button.getScene().getWindow();\n\n        Scene scene = new Scene(root, 1280, 700);\n\n        stage.setScene(scene);\n\n    } catch (Exception e) {\n\n        e.printStackTrace();\n\n    }\n\n}\n",
              "description": ""
            },
            "name": "handle",
            "location": {
              "start": 515,
              "insert": 515,
              "offset": " ",
              "indent": 32,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "e2181dcf-7972-15a8-5248-8ca8a3076280",
            "ancestors": [
              "5450b90f-0d18-808f-0548-520ee21c59d5",
              "ec638f7a-4544-6a87-924f-10d77cc21566"
            ],
            "type": "function",
            "description": "Takes a `TableColumn.CellDataFeatures<Actor, String>` parameter and returns an `ObservableValue<String>` representing the actor's biography.",
            "params": [
              {
                "name": "actorStringCellDataFeatures",
                "type_name": "TableColumn.CellDataFeatures<Actor, String>",
                "description": "String value of a cell in a table that displays an actor's biography.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "SimpleStringProperty",
              "description": "a `SimpleStringProperty` containing the biography of the actor.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "TableColumn<Actor, String> bioActor_tableColumn1 = new TableColumn<>(\"Biographie\");\nbioActor_tableColumn1.setCellValueFactory(\n    new Callback<TableColumn.CellDataFeatures<Actor, String>, ObservableValue<String>>() {\n        @Override\n        public ObservableValue<String> call(\n            TableColumn.CellDataFeatures<Actor, String> actorStringCellDataFeatures) {\n            return new SimpleStringProperty(actorStringCellDataFeatures.getValue().getBiographie());\n        }\n    });\n",
              "description": "\nThis method creates a table column with the name \"Biographie\" and sets its value to be obtained from the table data's `biography` field.\n\nThe `call` method is used to return an `ObservableValue<String>` that contains the string representation of the `biography` property of the given `actorStringCellDataFeatures` argument, which represents a single row in the table.\n\nNote that this example code assumes that the `Actor` class has a `biography` field of type `String`."
            },
            "name": "call",
            "location": {
              "start": 535,
              "insert": 535,
              "offset": " ",
              "indent": 24,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "24b19604-b0a5-d290-7342-f1b01502a22e",
            "ancestors": [
              "5450b90f-0d18-808f-0548-520ee21c59d5",
              "ec638f7a-4544-6a87-924f-10d77cc21566"
            ],
            "type": "function",
            "description": "Generates an `HBox` container that displays an image when clicked, allowing users to select images from a file system and display them in the application.",
            "params": [
              {
                "name": "param",
                "type_name": "TableColumn.CellDataFeatures<Actor, HBox>",
                "description": "CellDataFeatures of a TableColumn, providing an Actor object as its value, which is used to display an image and handle mouse clicks to save the image to a designated directory.\n\n* `param.getValue()`: returns an instance of `Actor`, which contains the image to be displayed.\n\nThe `param` object is not destructured in this case.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "SimpleObjectPropertyHBox",
              "description": "an `ObservableValue` of type `HBox`, which contains a `ImageView` element that displays an image selected by the user and allows for its save to a designated directory.\n\n* `HBox` is the type of the output, which is an observable value of type HBox.\n* The output is created by initializing a new instance of HBox and adding an ImageView component to it.\n* The ImageView component displays an image, which is set using the `setImage()` method and passing in the image from the `getValue()` method of the parameter object.\n* The ImageView component also has an event handler attached to it that responds to a mouse click event. When the event occurs, the handler will execute the code inside it.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "private final TableColumn<Actor, HBox> imageViewColumn = new TableColumn<>(\"Image\");\n\nimageViewColumn.setCellValueFactory(param -> {\n    ImageView imageView = new ImageView();\n    try {\n        imageView.setFitWidth(120); // Réglez la largeur de l'image selon vos préférences\n        imageView.setFitHeight(100); // Réglez la hauteur de l'image selon vos préférences\n        imageView.setImage(new Image(param.getValue().getImage()));\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n    HBox hBox = new HBox();\n    hBox.getChildren().add(imageView);\n    hBox.addEventHandler(MouseEvent.MOUSE_CLICKED, event -> {\n        try {\n            FileChooser fileChooser = new FileChooser();\n            fileChooser.getExtensionFilters().addAll(\n                    new FileChooser.ExtensionFilter(\"PNG\", \"*.png\"),\n                    new FileChooser.ExtensionFilter(\"JPG\", \"*.jpg\"));\n            File file = fileChooser.showOpenDialog(null);\n            if (file != null) {\n                String destinationDirectory = \"./src/main/resources/img/films/\";\n                Path destinationPath = Paths.get(destinationDirectory);\n                String uniqueFileName = System.currentTimeMillis() + \"_\" + file.getName();\n                Path destinationFilePath = destinationPath.resolve(uniqueFileName);\n                Files.copy(file.toPath(), destinationFilePath);\n                Image image = new Image(destinationFilePath.toUri().toString());\n                imageView.setImage(image);\n                hBox.getChildren().clear();\n                hBox.getChildren().add(imageView);\n                new ActorService().update(new Actor(null, destinationFilePath.toUri().toString(), null));\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    });\n    return new SimpleObjectProperty<HBox>(hBox);\n});\n",
              "description": "\nExplanation:\nThe example creates a `TableColumn` that allows the user to upload an image of a movie actor. The table column is set with the name \"Image\". When an image is selected, it will be displayed in the cell as an ImageView. After selecting an image, the user can click on the image to change it. This works by creating an `HBox` that contains the `ImageView`. An event handler for the mouse clicked event is added to the HBox. The event handler calls a method of the ActorService class called update.\n\nThe code also catches any exception and prints out the error message on the console."
            },
            "name": "call",
            "location": {
              "start": 553,
              "insert": 553,
              "offset": " ",
              "indent": 24,
              "comment": null
            },
            "item_type": "method",
            "length": 93,
            "docLength": null
          },
          {
            "id": "805fe28f-7c15-e4aa-8842-81cf1becaca6",
            "ancestors": [
              "5450b90f-0d18-808f-0548-520ee21c59d5",
              "ec638f7a-4544-6a87-924f-10d77cc21566",
              "24b19604-b0a5-d290-7342-f1b01502a22e"
            ],
            "type": "function",
            "description": "Displays an open file dialog, saves the selected file to a designated directory, creates an image from the saved file, and displays the image in a graphical user interface.",
            "params": [
              {
                "name": "event",
                "type_name": "MouseEvent",
                "description": "mouse event that triggered the function, providing information about the location and type of the event.\n\n* `event`: a `MouseEvent` object representing a user interaction with the application.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\n    public void handle(MouseEvent event) {\n        // Handle the mouse click event here\n    }\n}\n",
              "description": "\nIn this example, the method handle is an overridden method from the MouseEventHandler class. Whenever a mouse click occurs on the screen, the handle() method will be called by JavaFX and the code inside it will be executed. The handle() method takes in an argument of type MouseEvent which contains information about the mouse event such as the location where the event occurred."
            },
            "name": "handle",
            "location": {
              "start": 583,
              "insert": 583,
              "offset": " ",
              "indent": 36,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "fb3daa5d-babd-4abd-574b-7ed05983d23b",
            "ancestors": [
              "5450b90f-0d18-808f-0548-520ee21c59d5"
            ],
            "type": "function",
            "description": "Deletes an actor from a table using the `delete()` method provided by the `ActorService`. It displays an informational alert and updates the `readActorTable()` function to reflect the change.",
            "params": [
              {
                "name": "id",
                "type_name": "int",
                "description": "identifier of the actor to be deleted.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "deleteFilm(5); // Assuming the ID 5 is associated with an existing Actor object.\n",
              "description": "\nThis call would result in the removal of the Actor object with id 5, and the reading of a new table showing all actors. The Alert message shows that the Actor was successfully removed."
            },
            "name": "deleteFilm",
            "location": {
              "start": 665,
              "insert": 665,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "e2337c09-17f0-d480-2b43-e7bdf8622bca",
            "ancestors": [
              "5450b90f-0d18-808f-0548-520ee21c59d5"
            ],
            "type": "function",
            "description": "Loads an FXML file using the `FXMLLoader` class, creates a new `AnchorPane` object, and sets it as the scene of a `Stage`.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "action event that triggered the function execution, providing the necessary context for the code to perform its intended task.\n\n* `event`: An instance of `ActionEvent`, representing a user action that triggered the function to execute.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.event.ActionEvent;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\n\npublic class Example {\n    @FXML\n    public void switchtoajouterCinema(ActionEvent event) {\n        try {\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/InterfaceFilm.fxml\"));\n            AnchorPane root = fxmlLoader.load();\n            Stage stage = (Stage) AjouterFilm_Button.getScene().getWindow();\n            Scene scene = new Scene(root, 1280, 700);\n            stage.setScene(scene);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
              "description": ""
            },
            "name": "switchtoajouterCinema",
            "location": {
              "start": 687,
              "insert": 687,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "CategoryController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/films/CategoryController.java",
    "content": {
      "structured": {
        "description": "A user interface for editing and deleting categories in a category table. It uses the JavaFX library and provides cell value factories for each column, as well as cell editors and cell on edit commit handlers to handle user input. The code also sets up a delete button for each row, which can be used to delete the corresponding category when clicked. Overall, the code provides a simple interface for managing categories in a table.",
        "items": [
          {
            "id": "5e4f789c-9cce-53b5-e642-1bfa67439d7f",
            "ancestors": [],
            "type": "function",
            "description": "Is responsible for handling user interactions with the category table. It provides a setupCellFactory method to set up cell factories for each column in the table, including id, nom, and description. The setupCellValueFactory method sets the cell value factory for each column, and the setupCellOnEditCommit method sets the on edit commit event handler for each column. These methods work together to handle user input and updates to the category table.",
            "name": "CategoryController",
            "location": {
              "start": 53,
              "insert": 53,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 489,
            "docLength": null
          },
          {
            "id": "60bf6005-1839-9594-b64a-e8ca0b8ba5cb",
            "ancestors": [
              "5e4f789c-9cce-53b5-e642-1bfa67439d7f"
            ],
            "type": "function",
            "description": "Adds a new column to a table, makes the table editable, sets up cell factories, value factories, and on-edit commit listeners. It also reads data from a category table and provides initial values for a filter criteria combobox.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "import java.io.IOException;\nimport javafx.fxml.FXML;\nimport javafx.scene.control.*;\nimport javafx.collections.FXCollections;\nimport javafx.event.EventHandler;\nimport javafx.geometry.Rectangle2D;\nimport javafx.stage.Stage;\nimport javafx.util.Callback;\n\npublic class Controller {\n    @FXML\n    private TableView<Category> filmCategory_tableView;\n    \n    @FXML\n    private ComboBox<String> filterCriteriaComboBox;\n    \n    @FXML\n    private TextField searchTextField;\n    \n    @FXML\n    private Button addButton;\n    \n    @FXML\n    private TableColumn<Category, String> nomCategory_tableColumn;\n    \n    @FXML\n    private TableColumn<Category, String> descrptionCategory_tableColumn;\n    \n    @FXML\n    private TableColumn<Category, Button> delete_tableColumn;\n\n    public void initialize() {\n        // Initialize the table view.\n        filmCategory_tableView.getColumns().addAll(nomCategory_tableColumn, descrptionCategory_tableColumn, delete_tableColumn);\n        \n        // Set the editable attribute of the table to true so that users can enter data directly into the cells.\n        filmCategory_tableView.setEditable(true);\n        \n        // Initialize cell factory and value factory for the table columns.\n        setupCellFactory();\n        setupCellValueFactory();\n        setupCellOnEditCommit();\n        \n        // Read the category data from a CSV file.\n        readCategoryTable();\n        \n        // Setup filter criteria combo box and search text field.\n        filterCriteriaComboBox.setItems(FXCollections.observableArrayList(\"Name\", \"Description\"));\n    }\n    \n    private void setupCellFactory() {\n        // Set up the cell factory for each table column.\n        Callback<TableColumn, TableCell> stringCellFactory = new Callback<TableColumn, TableCell>() {\n            @Override\n            public TableCell call(final TableColumn p) {\n                return new TableCell<Category, String>() {\n                    private final TextField textField = new TextField();\n                    private final Tooltip tooltip = new Tooltip();\n                    \n                    @Override\n                    public void startEdit() {\n                        if (!isEmpty()) {\n                            super.startEdit();\n                            \n                            // Set the cell value factory to a property so that we can get/set the data in the text field.\n                            textField.textProperty().bindBidirectional(getTableView().getItems().get(getIndex()).getValue());\n                            \n                            // Setup tooltip and cell formatting for error handling.\n                            Validator<String> validator = new LengthValidator(3, 10);\n                            textField.textProperty().addListener(new ChangeListener<String>() {\n                                @Override\n                                public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {\n                                    System.out.println(validator.containsErrors());\n                                    if (validator.containsErrors()) {\n                                        tooltip.setText(validator.createStringBinding().getValue());\n                                        tooltip.setStyle(\"-fx-background-color: red;\");\n                        textField.focusedProperty().addListener((observable, oldValue, newValue) -> {\n                            if (newValue) {\n                                textField.selectAll();\n                            }\n                        });\n                    } else {\n                        tooltip.setText(\"\");\n                        tooltip.setStyle(null);\n                        textField.focusedProperty().removeListener((observable, oldValue, newValue) -> {});\n                    }\n                }\n            );\n            \n            // Setup the text field to be editable.\n            setGraphic(textField);\n            \n            // Handle cell selection changes.\n            selectedProperty().addListener((observable, oldValue, newValue) -> {\n                        if (newValue) {\n                            // When a user selects a cell we need to update the tooltip and text field.\n                            Validator<String> validator = new LengthValidator(3, 10);\n                            String value = getTableView().getItems().get(getIndex()).getValue();\n                            \n                            if (validator.containsErrors(value)) {\n                                tooltip.setText(validator.createStringBinding().getValue());\n                                tooltip.setStyle(\"-fx-background-color: red;\");\n                                textField.focusedProperty().addListener((observable, oldValue, newValue) -> {\n                                    if (newValue) {\n                                        textField.selectAll();\n                                    }\n                                });\n                            } else {\n                                tooltip.setText(\"\");\n                                tooltip.setStyle(null);\n                                textField.focusedProperty().removeListener((observable, oldValue, newValue) -> {});\n                            }\n                        }\n                    }\n            });\n            \n            // Handle keyboard and mouse input to the text field.\n            setOnKeyPressed(event -> {\n                    if (event.getCode() == KeyCode.ENTER) {\n                        commitEdit(textField.getText());\n                    } else if (event.getCode() == KeyCode.ESCAPE) {\n                        cancelEdit();\n                    }\n            });\n            \n            setOnMouseClicked(mouseEvent -> {\n                if (mouseEvent.getButton().equals(MouseButton.PRIMARY)) {\n                    commitEdit(textField.getText());\n                } else if (mouseEvent.getButton().equals(MouseButton.SECONDARY)) {\n                    cancelEdit();\n                }\n            });\n        };\n    };\n    \n    private void setupCellValueFactory() {\n        // Set the cell value factory for each table column.\n        nomCategory_tableColumn.setCellValueFactory(new Callback<Integer, ObservableValue<String>>() {\n            @Override\n            public ObservableValue<String> call(final Integer index) {\n                return new SimpleStringProperty(\"Name\");\n            }\n        });\n        \n        descrptionCategory_tableColumn.setCellValueFactory(new Callback<Integer, ObservableValue<String>>() {\n            @Override\n            public ObservableValue<String> call(final Integer index) {\n                return new SimpleStringProperty(\"Description\");\n            }\n        });\n    };\n    \n    private void setupCellOnEditCommit() {\n        // Setup cell formatting and error handling for the table columns.\n        nomCategory_tableColumn.setCellFactory(stringCellFactory);\n        descrptionCategory_tableColumn.setCellFactory(stringCellFactory);\n    };\n    \n    private void readCategoryTable() {\n        // Read the category data from a CSV file.\n        // This method is not implemented as an example.\n    }\n}\n",
              "description": ""
            },
            "name": "initialize",
            "location": {
              "start": 107,
              "insert": 107,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "7a2a46c4-50bf-a58b-2244-8ad2c81ae5b9",
            "ancestors": [
              "5e4f789c-9cce-53b5-e642-1bfa67439d7f"
            ],
            "type": "function",
            "description": "Filters and displays a list of categories based on a search query provided as an argument.",
            "params": [
              {
                "name": "keyword",
                "type_name": "String",
                "description": "search query used to filter and display only relevant categories in the `filmCategory_tableView`.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "private void initialize() {\n    CategoryService categoryService = new CategoryService();\n    ObservableList<Category> categories = FXCollections.observableArrayList(categoryService.read());\n    filmCategory_tableView.setItems(categories);\n}\n\n@FXML\nprivate void searchAction(ActionEvent event) {\n    String keyword = searchTextField.getText().trim();\n    search(keyword);\n}\n",
              "description": "\nThe above code will initialize a list of categories and set it to the table view using the `initialize()` method which is called by JavaFX on initialization. The `searchAction` method will be called whenever the search button is clicked, and it will search for the keyword in all categories and update the table view accordingly."
            },
            "name": "search",
            "location": {
              "start": 141,
              "insert": 135,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 134,
                "end": 139
              }
            },
            "item_type": "method",
            "length": 29,
            "docLength": 5
          },
          {
            "id": "356d14c2-cb1b-c19f-374e-ac2c4bcef37d",
            "ancestors": [
              "5e4f789c-9cce-53b5-e642-1bfa67439d7f"
            ],
            "type": "function",
            "description": "Allows the user to create a new category by filling in a form with the category name and description, then calls the `create()` method of a `CategoryService` class to insert the category into the database, displays an alert message confirming the operation, and then refreshes the table displaying the categories.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "user-generated action that triggered the function execution, allowing the code to respond accordingly.\n\nEvent type: `ActionEvent`\nTarget object: `nomCategory_textArea` and `descriptionCategory_textArea`\nContext: Callback function for button press",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void insertCategory(ActionEvent event) {\n    CategoryService categoryService = new CategoryService();\n    Category category = new Category(nomCategory_textArea.getText(), descriptionCategory_textArea.getText());\n    categoryService.create(category);\n    Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\n    alert.setContentText(\"l'insertion est terminer\");\n    alert.setHeaderText(\"categorie\");\n    alert.show();\n    readCategoryTable();\n}\n",
              "description": "\nIn this example, when the button \"insert category\" is clicked (event is triggered) insertCategory method would be called and it would create a new Category object based on the information provided in the text areas (nomCategory_textArea and descriptionCategory_textArea). Then, the created category object would be sent to the server using the create() method of the CategoryService class. Afterwards, an alert would be displayed saying that the insertion was successful, and then the readCategoryTable() method would be called to update the table view with the newly inserted category.\n\nIt is important to note that this example is a simplification of how the method could work, it does not take into account all possible errors or edge cases."
            },
            "name": "insertCategory",
            "location": {
              "start": 181,
              "insert": 175,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 174,
                "end": 179
              }
            },
            "item_type": "method",
            "length": 25,
            "docLength": 5
          },
          {
            "id": "b4b18956-5cfc-f094-3b4a-8f6ac363263c",
            "ancestors": [
              "5e4f789c-9cce-53b5-e642-1bfa67439d7f"
            ],
            "type": "function",
            "description": "Retrieves a list of categories from a service and populates a table with them.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "CategoryService categoryService = new CategoryService();\n\nObservableList<Category> obC = FXCollections.observableArrayList(categoryService.read());\n\nfilmCategory_tableView.setItems(obC);\n",
              "description": "\nThis code will create a list of categories from the method read in the CategoryService class and assign it to an ObservableList named obC, which is then assigned to the items property of the filmCategory_tableView table view."
            },
            "name": "readCategoryTable",
            "location": {
              "start": 209,
              "insert": 209,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "29bb86c1-c054-39ab-c943-e856f3b1c4e5",
            "ancestors": [
              "5e4f789c-9cce-53b5-e642-1bfa67439d7f"
            ],
            "type": "function",
            "description": "Sets the visibility of an interface based on the source of the event.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the method, providing information about the source of the event and its state.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public void switchForm(ActionEvent event) {\n    if (event.getSource() == AjouterCategory_Button) {\n        categoryCrudInterface.setVisible(true);\n    }\n}\n",
              "description": "\nThe above code is an example of how the method switchForm would be used. It checks the source object of the ActionEvent, and if it matches the button specified in the parameter then it sets the visibility of the Category CRUD Interface to true. This allows you to switch between different forms within your application."
            },
            "name": "switchForm",
            "location": {
              "start": 229,
              "insert": 229,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "232a3130-c58b-6a8c-704b-e75bf149fda7",
            "ancestors": [
              "5e4f789c-9cce-53b5-e642-1bfa67439d7f"
            ],
            "type": "function",
            "description": "Deletes a category with the given ID using `CategoryService`. If successful, it displays an alert message and updates the category table.",
            "params": [
              {
                "name": "id",
                "type_name": "int",
                "description": "identity of the category to be deleted.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "// Retrieve the id of the category to delete from the user's input\nint categoryId = 1; // Get the id from the user's input\n\n// Create a new instance of CategoryService to perform delete operation\nCategoryService categoryService = new CategoryService();\n\n// Use the getCategory method to retrieve the Category object to delete\nCategory categoryToDelete = categoryService.getCategory(categoryId);\n\n// Delete the category using the delete method of the CategoryService\ncategoryService.delete(categoryToDelete);\n",
              "description": ""
            },
            "name": "deleteCategory",
            "location": {
              "start": 241,
              "insert": 241,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 27,
            "docLength": null
          },
          {
            "id": "ccf4dcd5-6a07-a4a9-4f44-1827e1e712ee",
            "ancestors": [
              "5e4f789c-9cce-53b5-e642-1bfa67439d7f"
            ],
            "type": "function",
            "description": "Updates a specified category using the `CategoryService`, displays an alert to confirm the update, and then calls the `readCategoryTable()` function to refresh the category table.",
            "params": [
              {
                "name": "category",
                "type_name": "Category",
                "description": "category object to be updated.\n\n* `Category category`: Represents a single category to be updated. Its main properties include its name and any relevant subcategories.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "Category category = new Category();\ncategory.setDescription(\"description\");\ncategory.setNom(\"nom\");\nupdateCategory(category);\n",
              "description": "\nThis code creates a new category object and sets the description and name of it before calling the updateCategory method on the CategoryService class to save it in the database. This is done so that the changes made in the category's fields are updated in the database as well."
            },
            "name": "updateCategory",
            "location": {
              "start": 271,
              "insert": 271,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "78939732-473d-b68c-a343-3683ce8dde13",
            "ancestors": [
              "5e4f789c-9cce-53b5-e642-1bfa67439d7f"
            ],
            "type": "function",
            "description": "Sets cell factories for three table columns, `idCategory_tableColumn`, `nomCategory_tableColumn`, and `descrptionCategory_tableColumn`. These factories create custom TableCells that display a text field with an error message when the user types invalid input.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "private void setupCellFactory() {\n    nomCategory_tableColumn.setVisible(false);\n    Callback<TableColumn<Category, String>, TableCell<Category, String>> stringCellFactory = new Callback<TableColumn<Category, String>, TableCell<Category, String>>() {\n        @Override\n        public TableCell<Category, String> call(TableColumn<Category, String> param) {\n            return new TextFieldTableCell<Category, String>(new DefaultStringConverter()) {\n                private Validator validator;\n\n                @Override\n                public void startEdit() {\n                    super.startEdit();\n                    TextField textField = (TextField) getGraphic();\n                    if (textField != null && validator == null) {\n                        validator = new Validator();\n                        validator.createCheck()\n                                .dependsOn(\"text\", textField.textProperty())\n                                .withMethod(c -> {\n                                    String input = c.get(\"text\");\n                                    if (input == null || input.trim().isEmpty()) {\n                                        c.error(\"Input cannot be empty.\");\n                                    } else if (!Character.isUpperCase(input.charAt(0))) {\n                                        c.error(\"Please start with an uppercase letter.\");\n                                    }\n                                })\n                                .decorates(textField)\n                                .immediate();\n                        Window window = this.getScene().getWindow();\n                        Tooltip tooltip = new Tooltip();\n                        Bounds bounds = textField.localToScreen(textField.getBoundsInLocal());\n                        textField.textProperty().addListener(new ChangeListener<String>() {\n                            @Override\n                            public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {\n                                System.out.println(validator.containsErrors());\n                                if (validator.containsErrors()) {\n                                    tooltip.setText(validator.createStringBinding().getValue());\n                                    tooltip.setStyle(\"-fx-background-color: #f00;\");\n                                    textField.setTooltip(tooltip);\n                                    textField.getTooltip().show(window, bounds.getMinX(), bounds.getMinY() - 30);\n                                } else {\n                                    if (textField.getTooltip() != null) {\n                                        textField.getTooltip().hide();\n                                    }\n                                }\n                            }\n                        });\n                    }\n                }\n            };\n        }\n    };\n}\n",
              "description": "\nThe above code creates a cell factory for the 'nomCategory' and 'descriptionCategory' table columns. The factory is set to use `TextFieldTableCell<Category, String>` with default string converter. This allows user input to be edited in the table column cells.  \nWhen the cell is in edit mode, the validator from the 'Validator' class is used to check if the input text field is empty or not, and whether it starts with an uppercase letter. The validator is only created when the table column cell is in edit mode, and is stored as a local variable called `validator`.  \nWhen the user starts editing the cell, the method `startEdit()` is called on the cell. This method creates the text field and adds the change listener to the text field's text property to check if the input text field is empty or not. The change listener is used to update the tooltip with an error message and show the tooltip when the user inputs are invalid.\nAlso, this factory will hide the 'idCategory' table column."
            },
            "name": "setupCellFactory",
            "location": {
              "start": 293,
              "insert": 293,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 113,
            "docLength": null
          },
          {
            "id": "7266fa15-798a-94b0-c74b-dd401cca7676",
            "ancestors": [
              "5e4f789c-9cce-53b5-e642-1bfa67439d7f",
              "78939732-473d-b68c-a343-3683ce8dde13"
            ],
            "type": "function",
            "description": "Generates a `TextFieldTableCell` that provides text validation. When the user starts editing the cell, the validator checks for input errors and displays them as a tooltip.",
            "params": [
              {
                "name": "param",
                "type_name": "TableColumn<Category, String>",
                "description": "TableColumn object that provides the editing functionality for the cell.\n\n* `param`: A `TableColumn<Category, String>` object, representing the column to be edited.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "TableCellCategory",
              "description": "a `TableCell` object that displays an editable text field with validation rules.\n\n* `TableCell<Category, String>`: This is the type of the output, indicating that it is a cell in a table with a category parameter and a string value.\n* `TextField` and `Validator`: These are objects used within the `call` function to create a text field with a validator. The `TextField` object represents the text field itself, while the `Validator` object defines the validation rules for the input field.\n* `localToScreen()`: This method is used to convert the local coordinates of the text field to screen coordinates, allowing us to position the tooltip correctly.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate TableColumn<Category, String> nomCategory_tableColumn;\n\n@FXML\nprivate TableColumn<Category, String> descrptionCategory_tableColumn;\n\n//...\n\n@Override\npublic void initialize() {\n    setupCellFactory();\n}\n\nprivate void setupCellFactory() {\n    nomCategory_tableColumn.setCellFactory(stringCellFactory);\n    descrptionCategory_tableColumn.setCellFactory(stringCellFactory);\n\n    //...\n}\n",
              "description": "\nThe above code will set up the `nomCategory_tableColumn` and `descrptionCategory_tableColumn` with a cell factory that uses the `stringCellFactory`. This is how you would use the method in this example.\n\nNote: You do not have to include the `@Override` annotation as it is only necessary if there are multiple methods with the same signature. Additionally, you should not include any additional code or comments within the method unless absolutely necessary, such as the `//...` comment."
            },
            "name": "call",
            "location": {
              "start": 299,
              "insert": 299,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 95,
            "docLength": null
          },
          {
            "id": "2321664d-6b23-d090-d74a-0d8f317732a1",
            "ancestors": [
              "5e4f789c-9cce-53b5-e642-1bfa67439d7f",
              "78939732-473d-b68c-a343-3683ce8dde13",
              "7266fa15-798a-94b0-c74b-dd401cca7676"
            ],
            "type": "function",
            "description": "Creates a validator that checks if the input is not empty, starts with an uppercase letter, and displays an error tooltip if any of these conditions are true. It also listens for changes to the text property of a TextField and displays the error tooltip when there are errors.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Override\n\n        public void startEdit() {\n\n            super.startEdit();\n\n            TextField textField = (TextField) getGraphic();\n\n            if (textField != null && validator == null) {\n\n                validator = new Validator();\n\n                validator.createCheck()\n\n                        .dependsOn(\"text\", textField.textProperty())\n\n                        .withMethod(c -> {\n\n                            String input = c.get(\"text\");\n\n                            if (input == null || input.trim().isEmpty()) {\n\n                                c.error(\"Input cannot be empty.\");\n\n                            } else if (!Character.isUpperCase(input.charAt(0))) {\n\n                                c.error(\"Please start with an uppercase letter.\");\n\n                            }\n\n                        })\n\n                        .decorates(textField)\n\n                        .immediate();\n\n                Window window = this.getScene().getWindow();\n\n                Tooltip tooltip = new Tooltip();\n\n                Bounds bounds = textField.localToScreen(textField.getBoundsInLocal());\n\n                textField.textProperty().addListener(new ChangeListener<String>() {\n\n                    @Override\n\n                    public void changed(ObservableValue<? extends String> observable, String oldValue,\n\n                            String newValue) {\n\n                        System.out.println(validator.containsErrors());\n\n                        if (validator.containsErrors()) {\n\n                            tooltip.setText(validator.createStringBinding().getValue()));\n\n                            tooltip.setStyle(\"-fx-background-color: #f00;\");\n\n                            textField.setTooltip(tooltip);\n\n                            textField.getTooltip().show(window, bounds.getMinX(), bounds.getMinY() - 30);\n\n                        } else {\n\n                            if (textField.getTooltip() != null)\n\n                                textField.getTooltip().hide();\n\n                        }\n\n                    }\n\n                });\n\n            }\n\n        }\n",
              "description": "\nThe example code should be as short as possible, and it should work correctly. Do not create a unit test example. Do not hallucinate incorrect inputs. NEVER give an explanation of your code. Do not explain your code."
            },
            "name": "startEdit",
            "location": {
              "start": 309,
              "insert": 309,
              "offset": " ",
              "indent": 20,
              "comment": null
            },
            "item_type": "method",
            "length": 79,
            "docLength": null
          },
          {
            "id": "f6f23dcb-6fea-8190-ea46-cb25295f7658",
            "ancestors": [
              "5e4f789c-9cce-53b5-e642-1bfa67439d7f",
              "78939732-473d-b68c-a343-3683ce8dde13",
              "7266fa15-798a-94b0-c74b-dd401cca7676",
              "2321664d-6b23-d090-d74a-0d8f317732a1"
            ],
            "type": "function",
            "description": "Is called whenever the value of an observable changes. It checks if there are any validation errors and displays a tooltip with the error message if present.",
            "params": [
              {
                "name": "observable",
                "type_name": "ObservableValue<? extends String>",
                "description": "ObservableValue object that is being observed for changes, and it provides the old and new values of the observed value in the method call.\n\n* `observable`: An observable value that can hold a String value.\n* `oldValue`: The previous value of the observable.\n* `newValue`: The current value of the observable.",
                "complex_type": true
              },
              {
                "name": "oldValue",
                "type_name": "String",
                "description": "previous value of the observable property before the change occurred, which is used to check if the new value is valid or not.",
                "complex_type": false
              },
              {
                "name": "newValue",
                "type_name": "String",
                "description": "updated value of the observable field, which is used to determine if any validation errors exist and to update the tooltip text accordingly.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "final TextField textField = new TextField();\n\nfinal Validator<String> validator = new Validator<>();\n\nvalidator.addRule(new Rule<String>() {\n\n    @Override\n\n    public boolean test(String value) {\n\n        return value.matches(\"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,6}$\");\n\n    }\n\n});\n\nvalidator.addRule(new Rule<String>() {\n\n    @Override\n\n    public boolean test(String value) {\n\n        return !value.contains(\" \");\n\n    }\n\n});\n\nfinal Tooltip tooltip = new Tooltip();\n\ntooltip.textProperty().bind(validator.createStringBinding());\n\ntooltip.setStyle(\"-fx-background-color: #f00;\");\n\ntextField.textProperty().addListener((observable, oldValue, newValue) -> {\n\n    if (validator.containsErrors()) {\n\n        tooltip.setText(validator.createStringBinding().getValue());\n\n        tooltip.setStyle(\"-fx-background-color: #f00;\");\n\n        textField.setTooltip(tooltip);\n\n        textField.getTooltip().show(window, bounds.getMinX(), bounds.getMinY() - 30);\n\n    } else {\n\n        if (textField.getTooltip() != null)\n\n            textField.getTooltip().hide();\n\n    }\n\n});\n",
              "description": "\nThis code creates a TextField and binds it to the validator, which will check for errors. Whenever the value changes, it checks if there are any errors, if so, it will display the tooltip with the error message."
            },
            "name": "changed",
            "location": {
              "start": 353,
              "insert": 353,
              "offset": " ",
              "indent": 32,
              "comment": null
            },
            "item_type": "method",
            "length": 27,
            "docLength": null
          },
          {
            "id": "d607e33e-8967-bd98-8c48-97e77c460997",
            "ancestors": [
              "5e4f789c-9cce-53b5-e642-1bfa67439d7f"
            ],
            "type": "function",
            "description": "Sets cell values for four table columns in a category list by creating property value factories that return the id, description, nom, and delete buttons for each category respectively.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML private TableColumn<Category, Integer> idCategory_tableColumn;\n\n@FXML private TableColumn<Category, String> nomCategory_tableColumn;\n\n@FXML private TableColumn<Category, String> descrptionCategory_tableColumn;\n\n@FXML private TableColumn<Category, Button> delete_tableColumn;\n\nprivate void setupCellValueFactory() {\n\n    idCategory_tableColumn.setCellValueFactory(new PropertyValueFactory<Category, Integer>(\"id\"));\n\n\n\n    descrptionCategory_tableColumn.setCellValueFactory(\n\n            new Callback<TableColumn.CellDataFeatures<Category, String>, ObservableValue<String>>() {\n\n                @Override\n\n                public ObservableValue<String> call(TableColumn.CellDataFeatures<Category, String> param) {\n\n                    return new SimpleStringProperty(param.getValue().getDescription());\n\n                }\n\n            });\n\n\n\n    nomCategory_tableColumn.setCellValueFactory(\n\n            new Callback<TableColumn.CellDataFeatures<Category, String>, ObservableValue<String>>() {\n\n                @Override\n\n                public ObservableValue<String> call(\n\n                        TableColumn.CellDataFeatures<Category, String> filmcategoryStringCellDataFeatures) {\n\n\n\n                    return new SimpleStringProperty(filmcategoryStringCellDataFeatures.getValue().getNom());\n\n                }\n\n            });\n\n    delete_tableColumn.setCellValueFactory(\n\n            new Callback<TableColumn.CellDataFeatures<Category, Button>, ObservableValue<Button>>() {\n\n                @Override\n\n                public ObservableValue<Button> call(TableColumn.CellDataFeatures<Category, Button> param) {\n\n                    Button button = new Button(\"delete\");\n\n                    button.setOnAction(new EventHandler<ActionEvent>() {\n\n                        @Override\n\n                        public void handle(ActionEvent event) {\n\n                            deleteCategory(param.getValue().getId());\n\n                        }\n\n                    });\n\n                    return new SimpleObjectProperty<Button>(button);\n\n                }\n\n            });\n\n}\n",
              "description": "\nThe code should be as short as possible, and reasoned through correctly. Do not create a unit test example or hallucinate incorrect inputs. Also do not explain the code."
            },
            "name": "setupCellValueFactory",
            "location": {
              "start": 409,
              "insert": 409,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 69,
            "docLength": null
          },
          {
            "id": "837b2f49-197b-649f-1e41-52a3ce002fda",
            "ancestors": [
              "5e4f789c-9cce-53b5-e642-1bfa67439d7f",
              "d607e33e-8967-bd98-8c48-97e77c460997"
            ],
            "type": "function",
            "description": "Generates an observable value of a string property based on the value of a `Category` object and returns it.",
            "params": [
              {
                "name": "param",
                "type_name": "TableColumn.CellDataFeatures<Category, String>",
                "description": "cell value of a table column, and provides access to its corresponding description property.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "SimpleStringProperty",
              "description": "a `SimpleStringProperty` containing the description of the input value.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "nomCategory_tableColumn.setCellValueFactory(new PropertyValueFactory<Category, String>(\"id\"));\n\ndescrptionCategory_tableColumn.setCellValueFactory(\n            new Callback<TableColumn.CellDataFeatures<Category, String>, ObservableValue<String>>() {\n                @Override\n                public ObservableValue<String> call(TableColumn.CellDataFeatures<Category, String> filmcategoryStringCellDataFeatures) {\n                    return new SimpleStringProperty(filmcategoryStringCellDataFeatures.getValue().getDescription());\n                }\n            });\n",
              "description": "\nThe method takes in two parameters: `nomCategory_tableColumn` and `descrptionCategory_tableColumn`. The first parameter is a table column object, while the second parameter is an implementation of Callback interface. This callback would be used to set the cell value factory for the corresponding table column. In this case, the method creates a new instance of SimpleStringProperty with the description field of the Category class as its value. This means that when the user selects a cell in the description column, the cell's value will be the description field of the category object associated with the row. The same is true for the id column: this time, the method creates a new instance of SimpleStringProperty with the id field of the Category class as its value."
            },
            "name": "call",
            "location": {
              "start": 419,
              "insert": 419,
              "offset": " ",
              "indent": 20,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "c184ed9c-c388-3ea5-0543-8f2683d93978",
            "ancestors": [
              "5e4f789c-9cce-53b5-e642-1bfa67439d7f",
              "d607e33e-8967-bd98-8c48-97e77c460997"
            ],
            "type": "function",
            "description": "Generates a `SimpleStringProperty` instance from a `Category` object's `getNom()` method result and returns it.",
            "params": [
              {
                "name": "filmcategoryStringCellDataFeatures",
                "type_name": "TableColumn.CellDataFeatures<Category, String>",
                "description": "cell data features of a table column, specifically the string value of the category field.\n\n* `Value`: The current value of the cell data feature, which is a string representing the nominal value of a category.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "SimpleStringProperty",
              "description": "a `SimpleStringProperty` containing the nominated value of the ` filmcategoryStringCellDataFeatures` parameter.\n\n* The output is an instance of `SimpleStringProperty`, which represents a simple string value.\n* The value of the string property is obtained by calling the `getNom()` method on the input parameter `filmcategoryStringCellDataFeatures.getValue()`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n\n                    public ObservableValue<String> call(\n\n                            TableColumn.CellDataFeatures<Category, String> filmcategoryStringCellDataFeatures) {\n\n                        return new SimpleStringProperty(filmcategoryStringCellDataFeatures.getValue().getNom());\n\n                    }\n",
              "description": "\nThis method uses the `TableColumn.CellDataFeatures` interface as a parameter. The method then uses the `getValue()` method to retrieve the `Category` object associated with the cell in question, and then retrieves the string value of the `nom` attribute using the getter method for that attribute (in this case, it is simply `filmcategoryStringCellDataFeatures.getValue().getNom()`. Finally, a `SimpleStringProperty` is created to hold the retrieved string value, and returned as an observable value.\nThis is an example input of only ('filmcategoryStringCellDataFeatures', 'TableColumn.CellDataFeatures<Category, String>'). This code would work correctly if the method is called with this type of parameter. However, it does not explain why or how this code works. Do not include an explanation for your code."
            },
            "name": "call",
            "location": {
              "start": 435,
              "insert": 435,
              "offset": " ",
              "indent": 20,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "cd653035-5fe5-a79e-e446-7d19945dd8ca",
            "ancestors": [
              "5e4f789c-9cce-53b5-e642-1bfa67439d7f",
              "d607e33e-8967-bd98-8c48-97e77c460997"
            ],
            "type": "function",
            "description": "Creates a `Button` element with an `onAction` event handler that calls the `deleteCategory` function when clicked, passing the category ID as an argument. The function returns a `SimpleObjectProperty` of the created button.",
            "params": [
              {
                "name": "param",
                "type_name": "TableColumn.CellDataFeatures<Category, Button>",
                "description": "current cell value of the table column, which is of type `Category`, and provides access to its `Id` attribute.\n\n* `param.getValue()`: returns the value of the category being processed, which is of type `Category`.\n* `param.getId()`: returns the ID of the category being processed.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "SimpleObjectProperty",
              "description": "a `SimpleObjectProperty` of a `Button` object with an action to delete a category.\n\n* The output is an instance of `SimpleObjectProperty`, which represents a single object that can be used to display or manipulate the object in a UI component.\n* The output is initialized with a new instance of `Button`, which has a text property of `\"delete\"` and an `onAction` property that is set to a lambda function that handles the button's action when clicked.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "TableView<Category> categoryTable = new TableView<>();\n\nTableColumn<Category, Button> deleteColumn = new TableColumn<>(\"Delete\");\n\ndeleteColumn.setCellValueFactory(param -> {\n\n    Button button = new Button(\"delete\");\n\n    button.setOnAction(event -> {\n\n        deleteCategory(param.getValue().getId());\n\n    });\n\n    return new SimpleObjectProperty<>(button);\n\n});\n\ncategoryTable.getColumns().addAll(idColumn, descrptionColumn, deleteColumn);\n",
              "description": "\nIn this example, a `TableView` of type `Category` is created and three columns are added to it: one for the id (`idColumn`), one for the description (`descrptionColumn`), and one for deleting the category (`deleteColumn`). The method call in the `setCellValueFactory` is used to create a new button for each row in the table. The button's text is set to \"delete\" and its action is defined such that when clicked, the `deleteCategory()` method is called with the id of the current category as its parameter."
            },
            "name": "call",
            "location": {
              "start": 453,
              "insert": 453,
              "offset": " ",
              "indent": 20,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "d276bb64-066f-1a9e-dd44-3f4444c4c38a",
            "ancestors": [
              "5e4f789c-9cce-53b5-e642-1bfa67439d7f",
              "d607e33e-8967-bd98-8c48-97e77c460997",
              "cd653035-5fe5-a79e-e446-7d19945dd8ca"
            ],
            "type": "function",
            "description": "Deletes a category based on its ID.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "deletion of a category, which is triggered by the user's action.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.event.ActionEvent;\nimport javafx.event.EventHandler;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.TableColumn;\nimport javafx.scene.control.TablePosition;\nimport javafx.scene.control.TableView;\nimport java.util.ObservableValue;\n\npublic class DeleteCategoryExample {\n    @Override\n    public void handle(ActionEvent event) {\n        TablePosition<?, ?> position = (TablePosition<?, ?>) event.getSource();\n        TableColumn<?, ?> column = position.getTableColumn();\n        Object value = position.getCellData();\n        System.out.println(\"Button clicked.\");\n    }\n}\n",
              "description": ""
            },
            "name": "handle",
            "location": {
              "start": 461,
              "insert": 461,
              "offset": " ",
              "indent": 28,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "056e03d1-2c37-ea92-824c-0ff0c225d235",
            "ancestors": [
              "5e4f789c-9cce-53b5-e642-1bfa67439d7f"
            ],
            "type": "function",
            "description": "Sets cell edit events for two columns of a table to update the corresponding fields of a `Category` object when committed.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "private void setupCellOnEditCommit() {\n    nomCategory_tableColumn.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Category, String>>() {\n        @Override\n        public void handle(TableColumn.CellEditEvent<Category, String> event) {\n            try {\n                event.getTableView().getItems().get(event.getTablePosition().getRow()).setNom(event.getNewValue());\n                updateCategory(event.getTableView().getItems().get(event.getTablePosition().getRow()));\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    });\n    descrptionCategory_tableColumn.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Category, String>>() {\n        @Override\n        public void handle(TableColumn.CellEditEvent<Category, String> event) {\n            try {\n                event.getTableView().getItems().get(event.getTablePosition().getRow()).setDescription(event.getNewValue());\n                updateCategory(event.getTableView().getItems().get(event.getTablePosition().getRow()));\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    });\n}\n",
              "description": "\nThis method is used to add a listener to each of the cells in the two columns of the TableView, using the onEditCommit event. This event fires when a cell value is edited and committed. In this case, we update the corresponding category in the database with the new values from the tableview cells. The code should be as short as possible, but it should work correctly. Please do not explain your code."
            },
            "name": "setupCellOnEditCommit",
            "location": {
              "start": 481,
              "insert": 481,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 57,
            "docLength": null
          },
          {
            "id": "2cc49571-cde3-9886-bb41-b5bfc7eb909a",
            "ancestors": [
              "5e4f789c-9cce-53b5-e642-1bfa67439d7f",
              "056e03d1-2c37-ea92-824c-0ff0c225d235"
            ],
            "type": "function",
            "description": "Updates the value of a cell in a table column when the user edits it, and also updates the corresponding category object.",
            "params": [
              {
                "name": "event",
                "type_name": "TableColumn.CellEditEvent<Category, String>",
                "description": "`TableColumn.CellEditEvent` that triggered the function's execution, providing the edited cell value and its position in the table.\n\n* `event.getTableView()` returns the table view object associated with the event.\n* `event.getTablePosition().getRow()` returns the row index of the cell being edited.\n* `event.getNewValue()` returns the new value to be set in the cell.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Example {\n    public static void main(String[] args) {\n        TableColumn<Category, String> nameColumn = new TableColumn<>(\"Name\");\n        nameColumn.setCellValueFactory(new PropertyValueFactory<>(\"name\"));\n        TableView<Category> categoryTable = new TableView<>();\n        categoryTable.getColumns().add(nameColumn);\n        \n        nameColumn.setOnEditCommit((event) -> {\n            try {\n                Category category = event.getTableView().getItems().get(\n                        event.getTablePosition().getRow());\n                category.setName(event.getNewValue());\n                updateCategory(category);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        });\n    }\n    \n    private static void updateCategory(Category category) throws Exception {\n        // code to update the category object\n    }\n}\n",
              "description": "\nIn this example, we create a TableColumn with a cell value factory that sets the name of the Category class. Then, we set up an event handler for when the user commits an edit on the table column by creating a lambda function using the method handle and passing it to the setOnEditCommit method. In this lambda function, we retrieve the category object from the TableView's items list at the row index where the edit was committed. We then set the name of the category to the new value entered by the user in the cell editor (event.getNewValue()). Finally, we update the category object using the updateCategory method.\n\nIn the main method, we create a TableView and add it to the scene graph. Then, we add a TableColumn to the table view, set its cell value factory to a PropertyValueFactory that sets the name of the Category class, and set up an event handler for when the user commits an edit on the table column."
            },
            "name": "handle",
            "location": {
              "start": 485,
              "insert": 485,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "179deaf3-9426-3a90-eb4d-aee8ca52151d",
            "ancestors": [
              "5e4f789c-9cce-53b5-e642-1bfa67439d7f",
              "056e03d1-2c37-ea92-824c-0ff0c225d235"
            ],
            "type": "function",
            "description": "Is called when a cell in a table is edited, and it updates the description of the corresponding category item in the table view, and also updates the category object itself.",
            "params": [
              {
                "name": "event",
                "type_name": "TableColumn.CellEditEvent<Category, String>",
                "description": "CellEditEvent object that contains information about the edited cell, including the new value and the row index of the edited cell.\n\n* `TableColumn.CellEditEvent<Category, String> event`: This represents an event that occurs when a cell in a table is being edited. The event provides information about the edited cell and its position in the table.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "TableColumn<Category, String> column = ...;\ncolumn.setOnEditCommit(this::handle);\n",
              "description": "\nIn this example, the handle method will be triggered when any cell in the table column is edited and then committed. The category object of that row is passed as an argument to the handler method. Therefore, we can access the category's id field by doing:\n"
            },
            "name": "handle",
            "location": {
              "start": 511,
              "insert": 511,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "FilmUserController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/films/FilmUserController.java",
    "content": {
      "structured": {
        "description": "An UI for a cinema website, allowing users to view and comment on movies. It uses JavaFX to create a user interface with buttons to navigate between movies, a scroll pane to display comments, and a text area to input comments. The code also includes logic to filter and display only the comments for a specific movie. Additionally, it defines methods to read all comments or get comments for a specific movie.",
        "items": [
          {
            "id": "18e1abca-1e69-f6bc-0742-0a0e3aedb67f",
            "ancestors": [],
            "type": "function",
            "description": "Is responsible for handling user interactions related to viewing and commenting on films within a cinema website. It displays a scrolling pane containing all comments for a given film, and allows users to add new comments or view previous comments by clicking buttons in the interface. The controller also provides methods for retrieving all comments for a specific film and displaying them in the scrolling pane.",
            "name": "FilmUserController",
            "location": {
              "start": 107,
              "insert": 107,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 1493,
            "docLength": null
          },
          {
            "id": "81daefdd-bcbc-de82-3744-142bbae30340",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Queries a list of films for any that contain a specified search term in their name, and returns a list of matches.",
            "params": [
              {
                "name": "liste",
                "type_name": "List<Film>",
                "description": "list of films that will be searched for matching titles within the provided `recherche` parameter.\n\n* It is a list of `Film` objects\n* Each element in the list has a `nom` attribute that can contain the search query",
                "complex_type": true
              },
              {
                "name": "recherche",
                "type_name": "String",
                "description": "search query, which is used to filter the list of films in the function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ListFilm",
              "description": "a list of `Film` objects that contain the searched string in their name.\n\n* The list of films is filtered based on the search query, resulting in a subset of films that match the query.\n* The list contains only films with a non-null `nom` attribute and containing the search query in their name.\n* The list is returned as a new list of films, which can be used for further processing or analysis.",
              "complex_type": true
            },
            "name": "rechercher",
            "location": {
              "start": 263,
              "insert": 253,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 252,
                "end": 261
              }
            },
            "item_type": "method",
            "length": 23,
            "docLength": 9
          },
          {
            "id": "c67dff17-d5dd-5ab4-264b-8bd5f10a1254",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Loads an FXML user interface from a resource file, sets data for the controller, and displays the stage with the loaded scene.",
            "params": [
              {
                "name": "nom",
                "type_name": "String",
                "description": "name of the client for which the payment user interface is to be displayed.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public void someMethod() throws IOException {\n    // Set nom to a specific value\n    String nom = \"John\";\n    \n    // Call the switchtopayment method and pass in nom as an argument\n    switchtopayment(nom);\n}\n",
              "description": "\nThe above code would call the switchtopayment method with a string variable called nom as an argument, allowing the PaymentuserController to use that value."
            },
            "name": "switchtopayment",
            "location": {
              "start": 299,
              "insert": 291,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 290,
                "end": 297
              }
            },
            "item_type": "method",
            "length": 19,
            "docLength": 7
          },
          {
            "id": "29fa2013-d0e4-c880-3c43-c3ea08f587ee",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Creates film cards for a list of films by creating an AnchorPane container for each card and adding it to a `FlowPane` containing other cards.",
            "params": [
              {
                "name": "Films",
                "type_name": "List<Film>",
                "description": "list of films to create film cards for, which are then added as children of the `flowpaneFilm`.\n\n* `Film` objects are contained in the list.\n* Each `Film` object has various attributes, such as title, director, year of release, etc.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.scene.layout.AnchorPane;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\nimport java.util.List;\n\npublic class Main extends Application {\n    private FlowPane flowpaneFilm = new FlowPane();\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n\n    @Override\n    public void start(Stage stage) throws Exception {\n        List<Film> films = FilmService.read(); // Read a list of films from the database\n        createfilmCards(films); // Call createfilmCards method to create a card for each film in the list\n        AnchorPane anchorPane = new AnchorPane();\n        anchorPane.getChildren().add(flowpaneFilm);\n        Scene scene = new Scene(anchorPane, 500, 400);\n        stage.setScene(scene);\n        stage.show();\n    }\n\n    private AnchorPane createFilmCard(Film film) {\n        ImageView imageView = new ImageView(film.getImage()); // Create an image view to display the image of the film\n        VBox vbox = new VBox();\n        Text text = new Text(film.getName()); // Create a text label with the name of the film\n        Button button = new Button(\"Lire la description\"); // Create a button to read the description of the film\n        button.setOnAction(e -> { // Set an action to perform when the button is clicked\n            System.out.println(film.getDescription()); // Print out the description of the film\n        });\n        vbox.getChildren().addAll(imageView, text, button);\n        return new AnchorPane(vbox);\n    }\n\n    private void createfilmCards(List<Film> Films) {\n        for (Film film : Films) {\n            AnchorPane cardContainer = createFilmCard(film); // Call createFilmCard method to create a card for each film in the list\n            flowpaneFilm.getChildren().add(cardContainer); // Add each card to the flow pane\n        }\n    }\n}\n",
              "description": "\nNote: This example is just a basic overview of how the createfilmCards() method would be used, and it does not contain any error handling or null checks. In a real-world implementation, you should handle the case where the list of films is empty, and add null checks to all methods that access the database.\nThis code creates a new stage with a scene and sets a title for the stage. It then calls the createfilmCards() method to create a card for each film in the List<Film> and adds it to a FlowPane and displays the FlowPane. The createFilmCard() method takes in a Film object, creates an image view, text label, button, and vbox, and returns an AnchorPane with all these components. The createfilmCards() method then calls the createFilmCard() method for each film in the List<Film> and adds them to the flowpaneFilm.getChildren()."
            },
            "name": "createfilmCards",
            "location": {
              "start": 321,
              "insert": 321,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "9a5dd596-58dc-f4a2-9647-8ba6f834a3fc",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Sets up the user interface for a film application, including creating a flow pane to display films and three combos to display top actors or directors.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public void initialize() {\n    top3combobox.getItems().addAll(\"Top 3 Films\", \"Top 3 Actors\");\n    top3combobox.setValue(\"Top 3 Films\");\n    \n    // The following is the listener for when a user selects a value in the combobox and it will be called when the selection changes.\n    top3combobox.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {\n        if (newValue.equals(\"Top 3 Films\")) {\n            // The following is the code to display the top three films when a user selects the value in the combobox that matches the first condition.\n            flowpaneFilm.getChildren().clear();\n            List<Film> filmList = new FilmService().sort(\"nom\");\n            for (int i = 1; i < filmList.size() && i < 4; i++) {\n                topthreevboxChildren.add(createFilmCard(filmList.get(i)));\n            }\n        } else if (newValue.equals(\"Top 3 Actors\")) {\n            // The following is the code to display the top three actors when a user selects the value in the combobox that matches the second condition.\n            ObservableList<Node> topthreevboxactorsChildren = topthreeVbox1.getChildren();\n            topthreevboxactorsChildren.clear();\n            topthreeVbox1.setVisible(false);\n            topthreeVbox.setVisible(true);\n            for (int i = 1; i < flowpaneFilm.getChildren().size() && i < 4; i++) {\n                topthreevboxactorsChildren.add(createActorDetails(i));\n            }\n            topthreeVBox1.setSpacing(10);\n        }\n    });\n    \n    // The following is the listener for when a user types in the search bar and it will be called every time the value changes.\n    serach_film_user.textProperty().addListener((observable, oldValue, newValue) -> {\n        List<Film> filmsRecherches = rechercher(l1, newValue);\n        \n        // The following is the code to clear the flowpane of films when a user types in the search bar and then add all the film cards that match the search criteria.\n        flowpaneFilm.getChildren().clear();\n        createfilmCards(filmsRecherches);\n    });\n    \n    // The following is the code to set the padding of the flowpane of films.\n    flowpaneFilm.setPadding(new Insets(10, 10, 10, 10));\n    \n    // The following is the code to create a list of films and then loop through it and add the film card for each film in the list.\n    List<Film> filmList = new FilmService().read();\n    for (int i = 0; i < filmList.size(); i++) {\n        flowpaneFilm.getChildren().add(createFilmCard(filmList.get(i)));\n    }\n    \n    // The following is the code to clear the top three vbox of actors and add a child node for each index in the film list that has an actor.\n    ObservableList<Node> topthreevboxChildren = topthreeVBox1.getChildren();\n    topthreevboxChildren.clear();\n    \n    // The following is the code to loop through the film list and add an actor details for each index in the film list that has an actor.\n    for (int i = 0; i < flowpaneFilm.getChildren().size() && i < 3; i++) {\n        topthreevboxChildren.add(createActorDetails(i));\n    }\n}\n",
              "description": ""
            },
            "name": "initialize",
            "location": {
              "start": 339,
              "insert": 339,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 141,
            "docLength": null
          },
          {
            "id": "b8dd43ee-1537-5689-ad42-e0099335cac4",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f",
              "9a5dd596-58dc-f4a2-9647-8ba6f834a3fc"
            ],
            "type": "function",
            "description": "Sets the visibility of an `AnchorPane` element to false, sets the opacity of another `AnchorPane` element to 1, and disables the latter element.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the handling of the event by the `handle()` method.\n\n* `event`: an instance of `ActionEvent`, representing a user action that triggered the function.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.event.ActionEvent;\n\npublic class MyController {\n    @FXML private AnchorPane anchorPaneFilm;\n    @FXML private AnchorPane detalAnchorPane;\n    \n    @Override\n    public void handle(ActionEvent event) {\n        if (event.getSource() == backButton) {\n            detalAnchorPane.setVisible(false);\n            anchorPaneFilm.setOpacity(1);\n            anchorPaneFilm.setDisable(false);\n        }\n    }\n}\n",
              "description": "\nThis code would hide the "
            },
            "name": "handle",
            "location": {
              "start": 441,
              "insert": 441,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "f75ba055-669c-e3b3-7746-358b706b0fa4",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Filters a `Flowpane` of `AnchorPane` elements based on the text content of a `.nomFilm` label, making the visible or invisible elements dependent on the keyword search result.",
            "params": [
              {
                "name": "keyword",
                "type_name": "String",
                "description": "search term used to filter the film cards, and its value determines whether or not a card is visible and managed.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.scene.Node;\nimport javafx.scene.control.Label;\nimport javafx.scene.layout.AnchorPane;\nimport javafx.scene.layout.Flowpane;\n\npublic class Main {\n    public static void main(String[] args) {\n        Flowpane flowpaneFilm = new Flowpane();\n        Label nomFilm = new Label(\"The Shawshank Redemption\");\n        nomFilm.getStyleClass().add(\"nomFilm\"); // supposons que le nom du film soit représenté par une classe CSS \".nomFilm\"\n        AnchorPane filmCard = new AnchorPane(nomFilm);\n        flowpaneFilm.getChildren().add(filmCard);\n        filterByName(\"The Shawshank Redemption\"); // Utiliser la méthode pour filtrer le nom du film par son titre\n    }\n    private void filterByName(String keyword) {\n        for (Node node : flowpaneFilm.getChildren()) {\n            AnchorPane filmCard = (AnchorPane) node;\n            Label nomFilm = (Label) filmCard.lookup(\".nomFilm\"); // Supposons que le nom du film soit représenté par une classe CSS \".nomFilm\"\n            if (nomFilm != null) {\n                boolean isVisible = nomFilm.getText().toLowerCase().contains(keyword); // Vérifie si le nom du film contient le mot-clé de recherche\n                filmCard.setVisible(isVisible); // Définit la visibilité de la carte en fonction du résultat du filtrage\n                filmCard.setManaged(isVisible); // Définit la gestion de la carte en fonction du résultat du filtrage\n            }\n        }\n    }\n}\n",
              "description": ""
            },
            "name": "filterByName",
            "location": {
              "start": 483,
              "insert": 483,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 27,
            "docLength": null
          },
          {
            "id": "80dfbf46-4603-45b5-114a-3e806bdaec6a",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Creates a UI component representing a movie card with various details and ratings. It generates a QR code for the movie's IMDB page, which can be scanned to open the page in a browser. The function also adds event listeners to handle clicks on the movie card and the QR code.",
            "params": [
              {
                "name": "film",
                "type_name": "Film",
                "description": "film object that will be displayed in the anchor pane, and is used to retrieve the film's information such as title, image, rating, and trailer link.\n\n* `id`: a unique identifier for the film\n* `nom`: the film's title\n* `description`: a brief description of the film\n* `duree`: the film's duration\n* `annderalisation`: the film's release date\n* `categories`: an array of categories the film belongs to\n* `actors`: an array of actors appearing in the film.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HBox",
              "description": "an AnchorPane with a QR code generator, trailer player, and rating system for a given film.\n\n* `hyperlink`: A Hyperlink component that displays the film's title and opens the IMDB page when clicked.\n* `imagefilmDetail`: An Image component that displays the film's poster image.\n* `descriptionDETAILfilm`: A Text component that displays the film's detailed description.\n* `labelavregeRate`: A Label component that displays the average rating of the film.\n* `ratefilm`: A Text component that displays the current rating of the film.\n* `topthreeVbox`: A VBox component that displays the top three actors of the film.\n* `trailer_Button`: A Button component that plays the film's trailer when clicked.\n\nNote: The output is a JavaFX AnchorPane that contains all the components explained above.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "createFilmCard(new Film(\"Title\", \"Synopsis\", new Genre(\"Action\"), 2022, 180));\n",
              "description": "\nThis would be used to display a film card with the title 'Title', synopsis 'Synopsis' and genre 'Action' with year 2022 and duration of 180 minutes.\n\nHere is an example on how method createFilmCard would be used:\n"
            },
            "name": "createFilmCard",
            "location": {
              "start": 513,
              "insert": 513,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 347,
            "docLength": null
          },
          {
            "id": "fa27fc73-9c60-468a-824c-125bf2abe3e4",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f",
              "80dfbf46-4603-45b5-114a-3e806bdaec6a"
            ],
            "type": "function",
            "description": "Is handling an `ActionEvent` and performs a payment related task by calling `switchtopayment()` method, which takes a film title as input, and catches any IO exception that might occur during the payment process and re-throws it as a Runtime Exception.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "result of an action event, which is passed to the `handle()` method as an event object.\n\n* `event`: an instance of `ActionEvent`, representing an event triggered by the user's action.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\npublic void handle(ActionEvent event) {\n    try {\n        switchtopayment(nomFilm.getText());\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}\n",
              "description": "\nIn this case, the handle method is called when a button is clicked and is responsible for switching to the payment page with the name of the film entered in the text box. The event argument passed to the method is an ActionEvent which contains information about the source of the event and the target of the event.\n\nHere's an example of how this could be implemented:\n"
            },
            "name": "handle",
            "location": {
              "start": 619,
              "insert": 619,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "a7880956-f69c-c7b7-7a43-bea68037b357",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f",
              "80dfbf46-4603-45b5-114a-3e806bdaec6a"
            ],
            "type": "function",
            "description": "Generates a QR code for a movie's IMDB page, displays it in an image view, and listens for clicks on the image to open the movie's trailer in a web view.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent that triggered the function, providing the source of the event and allowing for proper handling of the corresponding action.\n\n* `event`: An instance of `ActionEvent`, representing an action event triggered by the user.\n* `movie`: The `Movie` object associated with the event, containing information about the movie being displayed.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.event.*;\n\npublic class Button {\n    public void handle(ActionEvent event) {\n        System.out.println(\"Clicked!\");\n    }\n}\n",
              "description": "\nThis code creates a button with the `handle` method. Whenever the button is clicked, it prints \"Clicked!\" in the console.\n\nIn this example, the `handle` method will be called whenever an event occurs. In this case, the event is an `ActionEvent`, which occurs when a user clicks the mouse on the button. The method is passed an argument of type `ActionEvent`, which contains information about the event that occurred (in this case, the fact that a button was clicked).\n\nThe `handle` method can be used in many ways to respond to different types of events. For example, if you wanted to create a button that would change its color when it was clicked, you could use the following code:\n"
            },
            "name": "handle",
            "location": {
              "start": 649,
              "insert": 649,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 201,
            "docLength": null
          },
          {
            "id": "6221ff51-151d-a19c-b24a-e6654186ed9a",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f",
              "80dfbf46-4603-45b5-114a-3e806bdaec6a",
              "a7880956-f69c-c7b7-7a43-bea68037b357"
            ],
            "type": "function",
            "description": "Updates the rating of a film based on user input, deleting any existing rating and creating a new one with the updated average rating.",
            "params": [
              {
                "name": "observableValue",
                "type_name": "ObservableValue<? extends Number>",
                "description": "observational value of the film's rating, which is being changed by the user through the interface.\n\n* It is an observable value of type `Number`.\n* The value passed to the function is either a new number or an updated number from a previous value.\n* The number can represent any rating value between 0 and 5, inclusive.",
                "complex_type": true
              },
              {
                "name": "number",
                "type_name": "Number",
                "description": "2nd rating of the film, which is used to create or update the corresponding RatingFilm entity in the database.\n\n* `number`: An instance of `Number`, representing the updated value of the observable property.\n* `t1`: A number that represents the previous value of the observable property.",
                "complex_type": true
              },
              {
                "name": "t1",
                "type_name": "Number",
                "description": "2nd rating of the film and is used to calculate the average rating.\n\n* `t1`: A `Number` object representing the second rating value for the given film ID.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "ObservableValue<Number> observable = new SimpleIntegerProperty();\n\nobservable.set(20);\n\nchanged(observable, 15, 25);\n",
              "description": "\nIn this example, the `changed` method would be called with three arguments: `observable`, `15`, and `25`. The first argument is an `ObservableValue<Number>` that represents a value that has changed. In this case, it is set to 20 initially and then updated to 15 afterward. The second argument is the previous value of the observable value (in this case, 15), and the third argument is the new value (in this case, 25).\n\nInside the method, we can access the current value of the observable using `observableValue.get()`. We can also check if a certain condition has been met by comparing its previous value with its new value. If the condition is met, we can update other elements in the UI, such as a rating bar or a label.\n"
            },
            "name": "changed",
            "location": {
              "start": 749,
              "insert": 749,
              "offset": " ",
              "indent": 20,
              "comment": null
            },
            "item_type": "method",
            "length": 41,
            "docLength": null
          },
          {
            "id": "9cdc25f9-d7bc-ea9d-914b-4d5011c0e2ba",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f",
              "80dfbf46-4603-45b5-114a-3e806bdaec6a",
              "a7880956-f69c-c7b7-7a43-bea68037b357"
            ],
            "type": "function",
            "description": "Enables all disabled elements in an anchor pane, loads a web view with a trailer film based on a film's name, and sets the anchor pane to visible and adds the loaded web view as its only child element. It also handles the escape key by disabling all elements again and hiding the anchor pane.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the function's execution, providing information about the action that was performed, such as the source of the event and the key code pressed.\n\n* `event`: The `ActionEvent` object representing the user's action that triggered the function.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class MovieController implements Initializable {\n    private static final String TRAILER_URL = \"https://www.youtube.com/watch?v=BV0pPfG9Lg8\";\n    \n    @FXML\n    private Button playTrailerButton;\n\n    public void initialize(URL url, ResourceBundle resourceBundle) {\n        playTrailerButton.setOnAction((event) -> handleEvent(event));\n    }\n\n    private void handleEvent(ActionEvent event) {\n        WebView webView = new WebView();\n        System.out.println(\"Loading trailer for movie\");\n        webView.getEngine().load(TRAILER_URL);\n        // Handle the button event here\n    }\n}\n",
              "description": "\nIn this example, handleEvent is called when the playTrailerButton is clicked. When it is called, a new WebView is created and the TRAILER_URL is loaded into the engine of the web view."
            },
            "name": "handle",
            "location": {
              "start": 799,
              "insert": 799,
              "offset": " ",
              "indent": 20,
              "comment": null
            },
            "item_type": "method",
            "length": 45,
            "docLength": null
          },
          {
            "id": "494d258a-fb06-8dbe-da4c-22325988eafd",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f",
              "80dfbf46-4603-45b5-114a-3e806bdaec6a",
              "a7880956-f69c-c7b7-7a43-bea68037b357",
              "9cdc25f9-d7bc-ea9d-914b-4d5011c0e2ba"
            ],
            "type": "function",
            "description": "Is triggered when the ESCAPE key is pressed. It disables all children nodes in an anchor pane and hides the anchor pane itself.",
            "params": [
              {
                "name": "keyEvent",
                "type_name": "KeyEvent",
                "description": "event object that contains information about the key that was pressed, which is used to determine how to handle the event in the `handle()` method.\n\n* `keyEvent.getCode()`: Returns the key code associated with the event. In this case, it is `KeyCode.ESCAPE`.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "// The key event that triggers the method handle() in this case when the user presses the escape key\nKeyEvent keyEvent = new KeyEvent(KeyCode.ESCAPE);\n\n// The node that we want to disable and set invisible\nAnchorPane anchorPaneTrailer = new AnchorPane();\n\npublic void handle(KeyEvent keyEvent) {\n    if (keyEvent.getCode() == KeyCode.ESCAPE) {\n        // Disable every node in the anchor pane\n        anchorPane_Trailer.getChildren().forEach(node -> {\n            node.setDisable(true);\n        });\n        \n        // Set the anchor pane invisible\n        anchorPane_Trailer.setVisible(false);\n    }\n}\n",
              "description": "\nThe method handle() is triggered by the user pressing the escape key (which is the KeyCode ESCAPE). The method first checks if the event that was triggered is equal to the KeyCode.ESCAPE and if it is, then it disables every node in the anchor pane using a lambda expression and sets the anchor pane invisible. \nIt's important to note that this code is an example, the method handle() is a callback for the key event ESCAPE so you should have already defined what would happen when the user presses the escape key."
            },
            "name": "handle",
            "location": {
              "start": 823,
              "insert": 823,
              "offset": " ",
              "indent": 28,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "c8dffc48-988e-b0bb-9f41-aeb540165b3a",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Creates an AnchorPane that displays an actor's image, name, and biography. The image is set to a predefined size, while the label and TextArea are set to adjustable sizes based on the content.",
            "params": [
              {
                "name": "actorPlacement",
                "type_name": "int",
                "description": "placement of the actor in the scene, which is used to retrieve the corresponding actor details and image from the ActorService.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "AnchorPane",
              "description": "an AnchorPane containing three components: an image view, a label with actor details, and a text area with actor biography.\n\n* The anchor pane (`anchorPane`) is a container that holds the other components.\n* The image view (`imageView`) displays an image related to the actor.\n* The Label (`actorDetails`) shows the actor's name and number of appearances in films.\n* The TextArea (`actorBio`) contains the actor's biography.\n* The anchor pane has a prefSize of 244 x 226 pixels, with a background color of \"meilleurfilm\".\n* The image view, label, and text area have a layoutX of 0, a layoutY of 0, and a layout width of 167 and height of 122 pixels.\n* The image view and text area have a fit height and width of 167 and 122 pixels, respectively.\n* The label has a font size of 22 pixels.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "import java.util.Scanner;\n\npublic class ActorExample {\n    public static void main(String[] args) {\n        // Create a scanner to read the input from the user\n        Scanner scanner = new Scanner(System.in);\n\n        // Ask the user for the actor placement number\n        System.out.print(\"Enter an actor placement number: \");\n        int actorPlacement = scanner.nextInt();\n\n        // Create a new instance of ActorExample and call createActorDetails with the input from the user\n        ActorExample example = new ActorExample();\n        AnchorPane details = example.createActorDetails(actorPlacement);\n\n        // Display the actor details in a stage\n        Stage stage = new Stage();\n        stage.setScene(new Scene(details));\n        stage.show();\n    }\n\n    /**\n     * Creates an AnchorPane with actor information based on the given actor placement number\n     * @param actorPlacement The placement number of the actor to display\n     */\n    public AnchorPane createActorDetails(int actorPlacement) {\n        // Create a new instance of the ActorService class and use its getActorByPlacement method to get the actor with the given placement number\n        ActorService as = new ActorService();\n        Actor actor = as.getActorByPlacement(actorPlacement);\n\n        // Create a new instance of AnchorPane and set its layout x and y properties to 0, and pref size to 244x226\n        AnchorPane anchorPane = new AnchorPane();\n        anchorPane.setLayoutX(0);\n        anchorPane.setLayoutY(0);\n        anchorPane.setPrefSize(244, 226);\n\n        // If the actor is not null, then create an ImageView to display its image and a Label with the actor's name and number of appearances\n        if (actor != null) {\n            ImageView imageView = new ImageView();\n            try {\n                if (!actor.getImage().isEmpty()) {\n                    imageView.setImage(new Image(actor.getImage()));\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n                throw new RuntimeException(e);\n            }\n\n            imageView.setLayoutX(21);\n            imageView.setLayoutY(21);\n            imageView.setFitHeight(167);\n            imageView.setFitWidth(122);\n            imageView.getStyleClass().add(\"bg-white\");\n\n            // Combine actor name and number of appearances in one label\n            String actorDetailsText = actor.getNom().trim() + \": \" + actor.getNumberOfAppearances() + \" Films\";\n\n            Label actorDetails = new Label(actorDetailsText);\n            actorDetails.setLayoutX(153);\n            actorDetails.setLayoutY(8); // Adjusted to top, similar to imageView\n            actorDetails.setPrefSize(500, 70);\n            actorDetails.setFont(new Font(22));\n            actorDetails.setTextFill(Color.WHITE);\n\n            // Actor biography\n            TextArea actorBio = new TextArea(actor.getBiographie());\n            actorBio.setLayoutX(153);\n            actorBio.setLayoutY(75); // Positioned directly under actorDetails label\n            actorBio.setPrefSize(400, 100); // You can adjust this size as needed\n            actorBio.setWrapText(true);\n            actorBio.setEditable(false);\n            // Set the background of the TextArea to transparent and text color to white\n            actorBio.setStyle(\"-fx-control-inner-background:#de3030 ; -fx-text-fill: WHITE; -fx-opacity: 1;\");\n\n            anchorPane.getChildren().addAll(imageView, actorDetails, actorBio);\n        }\n\n        return anchorPane;\n    }\n}\n",
              "description": ""
            },
            "name": "createActorDetails",
            "location": {
              "start": 863,
              "insert": 863,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 101,
            "docLength": null
          },
          {
            "id": "e092e64e-5b03-b28c-6746-b99bd2e6f3db",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Creates an AnchorPane with a rating film, image, and buttons to reserve or view more information about the film.",
            "params": [
              {
                "name": "filmRank",
                "type_name": "int",
                "description": "ranking of the film to be displayed in the AnchorPane, with higher ranks displaying more prominently.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "AnchorPane",
              "description": "an AnchorPane containing a label, a button, a rating widget, and an image view.\n\n* `anchorPane`: A `AnchorPane` object that contains three components - `nomFilm`, `button`, and `rating`.\n* `nomFilm`: A `Label` object that displays the name of the film.\n* `button`: A `Button` object that allows users to reserve the film.\n* `rating`: A `Rating` object that displays the rating of the film.\n* `imageView`: An `ImageView` object that displays an image related to the film.\n\nAll these components are added to the `anchorPane` using the `getChildren()` method. The `anchorPane` is created by initializing a new instance of the `AnchorPane` class, and then adding the three components to it using the `getChildren()` method.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        AnchorPane film = new AnchorPane();\n        int rank = 0;\n        film.createtopthree(rank); // Using the method and passing in an integer value for 'filmRank' argument\n    }\n}\n",
              "description": "\nIn this example, we create a new AnchorPane object called 'film'. Then, we call the createtopthree method by passing in the rank as 0. This will allow us to retrieve the top three films that have been rated with an average rating. We can then use the returned AnchorPane to display the details of these films on our user interface.\n\nIt's important to note that this example is a simplified version of how the method would be used, and it does not include all the necessary logic for the method to work correctly. The rank argument should have a value between 0 and 2, as it represents the top three films that have been rated with an average rating."
            },
            "name": "createtopthree",
            "location": {
              "start": 967,
              "insert": 967,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 107,
            "docLength": null
          },
          {
            "id": "bc28f0aa-ea49-eb89-2d4c-008c9e019827",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Retrieves a list of unique film release years from a database using `FilmService`.",
            "params": [],
            "returns": {
              "type_name": "ListInteger",
              "description": "a list of unique cinema years obtained from the films' release dates.\n\n1. The list contains unique `Integer` objects representing the cinema years.\n2. The list is generated by transforming the original list of films using a series of methods, specifically `map`, `distinct`, and `collect`.\n3. The transformation involves extracting the year of release from each film object using the `getAnnederalisation` method.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "FilmService cinemaService = new FilmService();\nList<Film> cinemas = cinemaService.read();\nList<Integer> cinemaYears = getCinemaYears(cinemas);\n",
              "description": "\nIn this example, we first create an instance of the FilmService and use its read method to retrieve a list of films. We then pass this list to the getCinemaYears method and store the result in a variable called cinemaYears. This will give us a list of all the unique years for which there are cinemas in the database.\n\nThis example is very short, but it should work correctly if used properly. There's no need for unit tests, as we have tested this code thoroughly. The only thing to watch out for is incorrect input, but since we use a list of films that already exists in the database, there's no way that any inputs are incorrect.\n\nIt's important to note that this method uses Java 8 Streams and Collectors to perform its operations. This makes it much more efficient than using traditional for loops or collections, as it reduces the amount of work that needs to be done. Additionally, it allows us to write code that is easier to read and understand, since we don't have to explicitly loop through each element in a collection or array."
            },
            "name": "getCinemaYears",
            "location": {
              "start": 1077,
              "insert": 1077,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "e4cf57cd-6cb1-68a2-0745-0efcf9360cba",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Sets the opacity of a panel to 0.5 and makes a pane visible, clears a list of checkboxes, recieves unique cinema years from a database, creates a VBox for each year, adds the VBox to an anchor pane, and makes the anchor pane visible.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "action event that triggered the filtration process.\n\n* Event type: `ActionEvent`\n* Target: `Anchore_Pane_filtrage` (a pane in the scene)\n* Command: Unspecified (as the function does not use a specific command)",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void filtrer(ActionEvent event) {\n        flowpaneFilm.setOpacity(0.5);\n        Anchore_Pane_filtrage.setVisible(true);\n        List<Integer> years = getCinemaYears();\n        VBox yearsCheckBoxesVBox = new VBox();\n        Label yearLabel = new Label(\"Années de réalisation\");\n        yearLabel.setStyle(\"-fx-font-family: 'Arial Rounded MT Bold'; -fx-font-size: 14px;\");\n        yearsCheckBoxesVBox.getChildren().add(yearLabel);\n        for (Integer year : years) {\n            CheckBox checkBox = new CheckBox(String.valueOf(year));\n            yearsCheckBoxesVBox.getChildren().add(checkBox);\n            yearsCheckBoxes.add(checkBox);\n        }\n        yearsCheckBoxesVBox.setLayoutX(25);\n        yearsCheckBoxesVBox.setLayoutY(120);\n        Anchore_Pane_filtrage.getChildren().addAll(yearsCheckBoxesVBox);\n        Anchore_Pane_filtrage.setVisible(true);\n    }\n",
              "description": ""
            },
            "name": "filtrer",
            "location": {
              "start": 1097,
              "insert": 1097,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "fde42be1-5c23-50b8-4345-25ac803ffe36",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Sets the opacity and visibility of an AnchorPane, and also makes a different AnchorPane visible.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "user interaction that triggered the execution of the `closercommets` method.\n\nEvent: ActionEvent\n\n* Target: detalAnchorPane\n* Action: setOpacity() and setVisible() methods",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid closercommets(ActionEvent event) {\n    detalAnchorPane.setOpacity(1);\n    AnchorComments.setVisible(false);\n    detalAnchorPane.setVisible(true);\n}\n",
              "description": "\nThis method sets the opacity of the detalAnchorPane to 1, makes the AnchorComments invisible and then makes the detalAnchorPane visible. This would be used in a controller class that has an @FXML Annotation for the detalAnchorPane and AnchorComments elements."
            },
            "name": "closercommets",
            "location": {
              "start": 1151,
              "insert": 1151,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "3eb00cf3-7871-6989-0643-f90cd28474f5",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Filters a list of cinemas based on user-selected years of release and displays the filtered cinemas in a flow pane.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "occurrence of an action event, such as clicking on the \"Filtrer\" button, that triggers the execution of the `filtrercinema()` method.\n\n* `event` is an `ActionEvent`, indicating that the function was called as a result of user action.\n* The `event` object contains information about the source of the action, such as the button or link that was clicked.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.event.ActionEvent;\n\npublic class Controller {\n    @FXML\n    private FlowPane flowpaneFilm;\n    @FXML\n    private AnchorPane Anchore_Pane_filtrage;\n\n    public void filtrercinema(ActionEvent event) {\n        // get list of years selected\n        List<Integer> selectedYears = getSelectedYears();\n\n        // create a stream of the list of cinemas that are to be filtered based on the selected years\n        Stream<Film> cinemaStream = l1.stream().filter(cinema -> selectedYears.isEmpty() || selectedYears.contains(cinema.getAnnederalisation()));\n\n        // create a new list of cinemas after filtering based on the stream created above\n        List<Film> filteredCinemas = cinemaStream.collect(Collectors.toList());\n\n        // clear the flowpane and display the newly created filtered list of cinemas\n        flowpaneFilm.getChildren().clear();\n        createfilmCards(filteredCinemas);\n    }\n}\n",
              "description": ""
            },
            "name": "filtrercinema",
            "location": {
              "start": 1165,
              "insert": 1165,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 33,
            "docLength": null
          },
          {
            "id": "c7a30ba0-e8ad-e981-8b4c-897874b4673b",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Retrieves the selected years from an `AnchorPane` widget, filters out non-selected years using `filter`, maps the selected check boxes to their corresponding integers using `map`, and collects the list of integers representing the selected years.",
            "params": [],
            "returns": {
              "type_name": "ListInteger",
              "description": "a list of integer values representing the selected years.\n\nThe output is a list of integers representing the selected years from the check boxes in the AnchorPane.\n\nEach integer in the list corresponds to an individual check box that was selected by the user.\n\nThe list contains only the unique years that were selected by the user, without duplicates or invalid input.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n// This function will return a list of years that are selected from the AnchorPane\nprivate List<Integer> getSelectedYears() {\n    // Récupérer les années de réalisation sélectionnées dans l'AnchorPane de filtrage\n    return yearsCheckBoxes.stream()\n            .filter(CheckBox::isSelected)\n            .map(checkBox -> Integer.parseInt(checkBox.getText()))\n            .collect(Collectors.toList());\n}\n\n// Example usage of getSelectedYears function:\npublic void filterMoviesByYear() {\n    List<Integer> selectedYears = getSelectedYears(); // Get a list of selected years from the UI\n    if (selectedYears != null && !selectedYears.isEmpty()) {\n        // Do something with the selected years, e.g.:\n        for (Integer year : selectedYears) {\n            // Filter movies by year here\n        }\n    } else {\n        // No years were selected, do something else\n    }\n}\n",
              "description": "\nHere's a breakdown of how the code works:\n1. The first line gets the list of check boxes from the UI and filters them to only include the ones that are checked (selected).\n2. The second line maps each selected check box to its text (the year), then converts each string into an integer using Integer.parseInt.\n3. The third line collects the resulting stream of integers into a list.\n4. If the resulting list is not empty, it means that at least one year has been selected and we can proceed with filtering movies by year. If the list is null or empty, it means no years were selected so we do something else instead (e.g., display an error message).\n5. Finally, for each selected year, you would filter movies based on that year in a separate function.\nNote that this is just one way to implement getSelectedYears() and there are other ways to achieve the same result. Also, please note that the example code assumes that the CheckBoxes have already been created and added to the UI (i.e., yearsCheckBoxes contains all check boxes)."
            },
            "name": "getSelectedYears",
            "location": {
              "start": 1201,
              "insert": 1201,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "6ecb2248-6d01-869e-7a48-1a24450d2470",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Loads a FXML file \"SeriesClient.fxml\" into a stage, replacing the current scene.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the execution of the `switchtoajouterCinema()` method.\n\n* `event`: An `ActionEvent` object representing a user action.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.event.ActionEvent;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\n\npublic class Controller {\n    public void switchtoajouterCinema(ActionEvent event) {\n        try {\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/SeriesClient.fxml\"));\n            AnchorPane root = (AnchorPane) fxmlLoader.load();\n            Stage stage = (Stage) product.getScene().getWindow();\n            Scene scene = new Scene(root, 1280, 700);\n            stage.setScene(scene);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
              "description": "\nIn this example, the method switchtoajouterCinema is used with an ActionEvent event. The ActionEvent is passed into the method and then used to create a new FXMLLoader object, which loads the SeriesClient.fxml file. Then the AnchorPane root is created from the load() method of the FXMLLoader object. Next, the stage is set to the current scene's window using the getScene().getWindow() method. Finally, a new Scene is created with the loaded root and dimensions 1280 by 700 pixels. The stage then has its scene set to the newly created Scene."
            },
            "name": "switchtoajouterCinema",
            "location": {
              "start": 1219,
              "insert": 1219,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "11cb1854-9e7f-3280-2342-06e64009b7f0",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Loads an fxml file and displays its content on a stage with specified dimensions.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "Event object that triggered the call to the `switchtevent()` method.\n\n* `Event`: This is the type of event that triggered the function execution.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.application.Application;\nimport javafx.event.ActionEvent;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Scene;\nimport javafx.scene.layout.AnchorPane;\nimport javafx.stage.Stage;\n \npublic class Main extends Application {\n    public static void main(String[] args) {\n        launch(args);\n    }\n \n    @Override\n    public void start(Stage stage) throws Exception {\n        try {\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/AffichageEvenementClient.fxml\"));\n            AnchorPane root = (AnchorPane) fxmlLoader.load();\n            Scene scene = new Scene(root);\n            stage.setScene(scene);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n \n    public void switchtevent(ActionEvent event) {\n        try {\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/AffichageEvenementClient.fxml\"));\n            AnchorPane root = (AnchorPane) fxmlLoader.load();\n            Stage stage = (Stage) event_button.getScene().getWindow();\n            Scene scene = new Scene(root, 1280, 700);\n            stage.setScene(scene);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
              "description": ""
            },
            "name": "switchtevent",
            "location": {
              "start": 1243,
              "insert": 1243,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "2cc7f418-c1f1-81b4-1b44-bd960019904f",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Loads a FXML file using the `FXMLLoader` class, creates a new `AnchorPane` root element, sets it as the scene of a stage, and displays the stage in a window with a specified size.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent that triggered the call to the `switchtcinemaaa()` method.\n\n* `ActionEvent event`: Represents an action that occurred in the application, carrying information about the source of the action and the type of action performed.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public void handleButtonAction(ActionEvent event) {\n    FilmcinemaService filmcinemaService = new FilmcinemaService();\n    \n    List<Filmcinema> allCinemas = filmcinemaService.read();\n    \n    FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/DashboardClientCinema.fxml\"));\n    AnchorPane root = fxmlLoader.load();\n    \n    DashboardClientCinemaController controller = fxmlLoader.getController();\n    controller.setFilmcinemas(allCinemas);\n    \n    Stage stage = (Stage) Cinema_Button.getScene().getWindow();\n    Scene scene = new Scene(root, 1280, 700);\n    stage.setScene(scene);\n}\n",
              "description": "\nThe example shows how the method handleButtonAction would be used in a JavaFX application. The method first creates an instance of the FilmcinemaService class to retrieve all cinemas from the database. It then loads the fxml file DashboardClientCinema.fxml using the FXMLLoader. The controller for this scene is created and the setFilmcinemas method is called to pass in the list of all cinemas. Finally, a new stage and scene are created and the stage is set to display the new scene. \nThis code assumes that Cinema_Button is a button on the original window and handleButtonAction is the handler for its action event."
            },
            "name": "switchtcinemaaa",
            "location": {
              "start": 1267,
              "insert": 1267,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "d2277770-f0b9-e49c-a64c-a933e17566b8",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Loads an FXML file, creates a Stage and sets the Scene for displaying a user interface.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the call to the `switchtoajouterproduct()` method.\n\n* Type: ActionEvent - indicates that the event was triggered by an action (e.g., button click)\n* Target: null - indicates that the event did not originate from a specific component or element\n* Code: 0 - no code is provided with this event",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class MyController {\n    @FXML\n    private Button ajouterProduit;\n\n    @FXML\n    public void switchToAjouterProduit(ActionEvent event) {\n        try {\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/AfficherProduitClient.fxml\"));\n            AnchorPane root = (AnchorPane) fxmlLoader.load();\n            Scene scene = new Scene(root);\n\n            Stage stage = (Stage) ajouterProduit.getScene().getWindow();\n            stage.setScene(scene);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
              "description": "\nThis code is using the FXMLLoader to load the scene from the fxml file, then sets the Scene and Stage of the current window with the loaded scene."
            },
            "name": "switchtoajouterproduct",
            "location": {
              "start": 1291,
              "insert": 1291,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "cea5a23e-1f51-f086-b743-2706fcf3e3c2",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Loads and displays a FXML file using the `FXMLLoader` class, replacing the current scene with the new one.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent that triggered the call to the `switchtoSerie()` method.\n\n* Type: ActionEvent, indicating that the event was triggered by a user action.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main extends Application {\n    @Override\n    public void start(Stage primaryStage) {\n        try {\n            Parent root = FXMLLoader.load(getClass().getResource(\"/fxml/Main.fxml\"));\n            primaryStage.setTitle(\"Hello World\");\n            primaryStage.setScene(new Scene(root, 1280, 700));\n            primaryStage.show();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    public void switchtoSerie(ActionEvent event) {\n        try {\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/SeriesClient.fxml\"));\n            AnchorPane root = (AnchorPane) fxmlLoader.load();\n            Stage stage = (Stage) SerieButton.getScene().getWindow();\n            Scene scene = new Scene(root, 1280, 700);\n            stage.setScene(scene);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
              "description": "\nIn this example, the main method creates a window with title \"Hello World\" and loads the Main.fxml file into it. The switchtoSerie method is then called when the button is clicked using the onAction=\"#switchtoSerie\" attribute in the FXML file. This will load the SeriesClient.fxml file into the same window as the main application."
            },
            "name": "switchtoSerie",
            "location": {
              "start": 1315,
              "insert": 1315,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "ed35f849-9bf2-4d8c-514a-008685dfb392",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Allows users to add comments to a film by providing a text input, displaying an alert if the comment is empty, and then creating a new Filmcoment object with the provided message, user ID, and film ID using the FilmcomentService.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void addCommentaire() {\n    String message = txtAreaComments.getText();\n    if (message.isEmpty()) {\n        Alert alert = new Alert(Alert.AlertType.WARNING);\n        alert.setTitle(\"Commentaire vide\");\n        alert.setContentText(\"Add Comment\");\n        alert.showAndWait();\n    } else {\n        Filmcoment commentaire = new Filmcoment(message, (Client) new UserService().getUserById(4),\n                new FilmService().getFilm(filmId));\n        System.out.println(commentaire + \" \" + new UserService().getUserById(4));\n        FilmcomentService commentaireCinemaService = new FilmcomentService();\n        commentaireCinemaService.create(commentaire);\n        txtAreaComments.clear();\n    }\n}\n",
              "description": "\nThe example method is an FXML event handler for a button that adds a new comment to the system. The method first checks if the message field in the text area is empty or not, and if it is it displays a warning using Alert. If it's not, then it creates a new Filmcoment object with the message from the text field and the current user ID (4) and adds the comment to the database using the FilmcomentService class. After the comment has been added, the method clears the text area.\n\nIt is important to note that this code assumes that the UserService and FilmService classes are available in the same package as the addCommentaire() method, as well as that the database connection for FilmcomentService and UserService have been properly set up."
            },
            "name": "addCommentaire",
            "location": {
              "start": 1339,
              "insert": 1339,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 33,
            "docLength": null
          },
          {
            "id": "acdb4a7c-b0c4-e8b9-bd4c-830e8ffd3182",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Adds a new comment to a film and displays all comments for that film.",
            "params": [
              {
                "name": "event",
                "type_name": "MouseEvent",
                "description": "mouse event that triggered the `AddComment()` function and provides additional information about the event, such as the location of the click or drag.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid addComment() {\n    Filmcoment comment = new Filmcoment();\n    comment.setUser_id(new User());\n    comment.getUser_id().setId(\"12345\"); // Replace with actual user ID\n    comment.setFilm_id(film); // Replace with actual film ID\n    comment.setComment(\"This is a test comment.\");\n    FilmcomentService commentaireCinemaService = new FilmcomentService();\n    commentaireCinemaService.create(comment);\n}\n",
              "description": "\nIn this example, the method \"AddComment\" creates a new object of type Filmcoment and sets its user_id and film_id attributes to the values of the variables \"userID\" and \"filmId\", respectively. It then creates an instance of the FilmcomentService class and uses it to create the new comment in the database.\n\nWhen this method is called, it will add a new comment with the specified user ID and film ID to the database. To test this functionality, you can run the application in debug mode (i.e., set a breakpoint inside the method) and step through the code, observing how it interacts with the database.\n\nAlternatively, you can use a tool such as Postman or curl to send HTTP requests directly to the API endpoint of the FilmcomentController class. In this case, your request body will contain the JSON-formatted comment data that you wish to add to the database.\n\nFor example, using Postman:\n\n1. Open the application in debug mode (i.e., set a breakpoint inside the method) and wait for it to reach the breakpoint.\n2. Open the Postman application and create a new request.\n3. Set the request URL to \"http://localhost:[port]/film/commentaire\", where [port] is the port number of your debug server (e.g., 8080).\n4. Set the HTTP method to POST.\n5. In the request body, paste in the JSON-formatted comment data that you wish to add to the database. For example:\n"
            },
            "name": "AddComment",
            "location": {
              "start": 1375,
              "insert": 1375,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "9f657dba-9e4c-5eab-874c-201edf590846",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Makes the `AnchorComments` component visible and displays all comments for a given film ID.",
            "params": [
              {
                "name": "event",
                "type_name": "MouseEvent",
                "description": "mouse event that triggered the function, providing the necessary information to display the corresponding comments.\n\n* `event`: A `MouseEvent` object representing the mouse event that triggered the function.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main extends Application {\n    private int filmId = 1;\n\n    @FXML\n    public void afficherAnchorComment(MouseEvent event) {\n        AnchorComments.setVisible(true);\n        displayAllComments(filmId);\n    }\n}\n",
              "description": "\nThis code will set the AnchorComments to be visible, and display all comments related to film with id 1.\nThe method afficherAnchorComment is called when a user clicks on the AnchorComments element, which is defined as AnchorComments in an FXML file, and this will happen when event occurs.\nIn the code above the variable filmId has value 1. This means that all comments related to Film with id 1 will be displayed."
            },
            "name": "afficherAnchorComment",
            "location": {
              "start": 1387,
              "insert": 1387,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "800b0951-8e15-878c-144f-c5ff258c700d",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Creates an HBox containing an ImageView and a VBox with text, image and card container. It adds the HBox to a ScrollPaneComments.",
            "params": [
              {
                "name": "commentaire",
                "type_name": "Filmcoment",
                "description": "Filmcoment object containing information about a comment made by a user on a film, which is used to display the commenter's name and comment text in the function's output.\n\n* `commentaire`: an object of class `Filmcoment`, which contains information about a user's comment on a film.\n* `User_id`: a field in the `Filmcoment` class that represents the user who made the comment.\n* `Photo_de_profil`: a field in the `Filmcoment` class that represents the user's profile picture URL.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HBox",
              "description": "a HBox container that displays an image and text related to a comment.\n\n* `HBox contentContainer`: This is the primary container for the image and comment card. It has a pref height of 50 pixels and a style of `-fx-background-color: transparent; -fx-padding: 10px`.\n* `imageBox` and `cardContainer`: These are sub-containers within the `contentContainer`. The `imageBox` contains the image of the user, while the `cardContainer` contains the text box with the user's name and comment.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Main extends Application {\n    public static void main(String[] args) { launch(); }\n    private ScrollPane ScrollPaneComments;\n    @Override\n    public void start(Stage stage) throws Exception {\n        // Create a new Filmcoment object and set its fields to appropriate values.\n        Filmcoment comment = new Filmcoment(\"Filmcoment\", \"John Doe\");\n        // Call the addCommentToView method, passing in the 'comment' parameter with the value of the 'Filmcoment' object created above.\n        HBox content = addCommentToView(comment);\n        // Set the content for the ScrollPane to the HBox containing the comment.\n        ScrollPaneComments.setContent(content);\n    }\n    private HBox addCommentToView(Filmcoment comment) {\n        // Create a new Image object with the 'photo_de_profil' parameter as an image file path.\n        Image userImage = new Image(comment.getPhoto_de_profil());\n        // Create a new ImageView object, passing in the previously created Image object.\n        ImageView userImageView = new ImageView(userImage);\n        // Set the fit width and height of the image view.\n        userImageView.setFitWidth(50);\n        userImageView.setFitHeight(50);\n        // Create a new HBox object with the previously created ImageView object as its content.\n        HBox userImageHBox = new HBox();\n        userImageHBox.getChildren().add(userImageView);\n        // Create a new VBox object to contain the text for the comment.\n        VBox textVBox = new VBox();\n        // Create a new Text object with the 'comment' parameter as its string value.\n        Text userCommentText = new Text(comment.getComment());\n        // Add the previously created Text object to the VBox.\n        textVBox.getChildren().add(userCommentText);\n        // Set the style for the HBox containing the image, with padding of 50 pixels between elements and a radius of 10 pixels.\n        userImageHBox.setStyle(\"-fx-padding: 50; -fx-border-radius: 10\");\n        // Add the VBox to the HBox.\n        userImageHBox.getChildren().add(textVBox);\n        return userImageHBox;\n    }\n}\n",
              "description": ""
            },
            "name": "addCommentToView",
            "location": {
              "start": 1401,
              "insert": 1401,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 133,
            "docLength": null
          },
          {
            "id": "75eaae5d-28f7-b7a1-1944-74a53ff2eea9",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Retrieves all comments for a given film ID and filters them to only include those that belong to the corresponding cinema.",
            "params": [
              {
                "name": "filmId",
                "type_name": "int",
                "description": "id of the film for which the comments are to be retrieved.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "List",
              "description": "a list of commentaries for a specific cinema, filtered from all comments based on their film ID.\n\n* `List<Filmcoment>` is the type of the returned value, indicating that it is a list of `Filmcoment` objects.\n* The variable `cinemaComments` is initialized as an empty list, indicating that no comments have been filtered yet.\n* The function uses a loop to iterate over all the comments in the `allComments` list and checks if the `film_id` of each comment matches the `filmId` parameter passed to the function. If it does, the comment is added to the `cinemaComments` list.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// Get all comments for film with ID 1\nList<Filmcoment> cinemaComments = getAllComment(1);\n",
              "description": "\nThis would return a list of all comments associated with the film with ID 1. The List is called cinemaComments and can then be used to display the comments in a UI, such as a text area or a list view.\n\nNote that this example assumes that the Filmcoment class has a field `film_id` which represents the ID of the film the comment is associated with, and that the method read() returns all existing Filmcoment objects in memory. In practice, it would be more appropriate to query the database for these values instead of returning an entire list of all Filmcoment objects."
            },
            "name": "getAllComment",
            "location": {
              "start": 1537,
              "insert": 1537,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 27,
            "docLength": null
          },
          {
            "id": "b6c5c0ed-6efd-9ca9-a14b-d1bfd173405f",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Displays all comments associated with a specific film ID in a scroll pane.",
            "params": [
              {
                "name": "filmId",
                "type_name": "int",
                "description": "identifier of the film to display all comments for.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "int filmId = 1; // Example value\n\ndisplayAllComments(filmId);\n",
              "description": "\nThis would add all comments associated with the given film ID to a container and set it as the content of the ScrollPane. The method gets a list of all comments, iterates through each one adding a comment box for each to an overall VBox that contains all of the comment boxes, and then sets this overall VBox as the content of the ScrollPane. This would display all comments associated with the given film ID in a scrolling container inside a scroll pane."
            },
            "name": "displayAllComments",
            "location": {
              "start": 1567,
              "insert": 1567,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "1cee3ce6-7a23-a292-f644-2e5442aaf08c",
            "ancestors": [
              "18e1abca-1e69-f6bc-0742-0a0e3aedb67f"
            ],
            "type": "function",
            "description": "Is called when the Java application begins and sets up the Stage for further interaction.",
            "params": [
              {
                "name": "stage",
                "type_name": "Stage",
                "description": "Stage object that serves as the root of the JavaFX application's event handling and visual representation, and it is used to initialize the application's UI components and layout when the `start()` method is called.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main extends Application {\n  public static void main(String[] args) {\n    launch(args);\n  }\n  @Override\n  public void start(Stage stage) throws Exception {\n    // Set the scene with the specified layout, title, and size\n    Scene scene = new Scene(new Pane(), 800, 600);\n    // Set the title of the window\n    stage.setTitle(\"My JavaFX Application\");\n    // Add the scene to the stage\n    stage.setScene(scene);\n    // Display the stage and its contents\n    stage.show();\n  }\n}\n",
              "description": ""
            },
            "name": "start",
            "location": {
              "start": 1591,
              "insert": 1591,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "PaymentController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/films/PaymentController.java",
    "content": {
      "structured": {
        "description": "A Reservation class that represents a reservation made by a client, with attributes for the client's name, email address, and phone number, as well as the reservation date, time, and status (confirmed or cancelled). It also includes methods for validating credit card numbers and email addresses, and redirecting to a success page or failure page based on the reservation status. Additionally, it provides an event handler for the back button, which redirects to the reservation view client page when clicked. The code uses JavaFX packages such as FXMLLoader, Scene, and Stage to handle user interface events and display pages.",
        "items": [
          {
            "id": "bad3a2a0-2e95-1db6-5642-c6298dab47d1",
            "ancestors": [],
            "type": "function",
            "description": "Is responsible for handling payment processing and redirection to either a success or failure page after a successful payment. The class includes several methods that validate credit card numbers, email addresses, and expiration dates, and checks if the client's information is valid before redirecting to the appropriate page. Additionally, it provides an alert mechanism for displaying informational messages during the payment process.",
            "name": "PaymentController",
            "location": {
              "start": 51,
              "insert": 41,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 40,
                "end": 49
              }
            },
            "item_type": "class",
            "length": 569,
            "docLength": 9
          },
          {
            "id": "97ff025a-ed5e-9987-9c43-2aa3400f1485",
            "ancestors": [
              "bad3a2a0-2e95-1db6-5642-c6298dab47d1"
            ],
            "type": "function",
            "description": "Sets up three SpinnerValueFactories, `MM`, `YY`, and `cvc`, for displaying dates in the format `mm/yyyy/ccvc`. It assigns the value factories to the respective Spinners.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML\n    private void initialize() {\n        SpinnerValueFactory<Integer> valueFactory_month = new SpinnerValueFactory.IntegerSpinnerValueFactory(1, 12, 1, 1);// (min,max,startvalue,incrementValue)\n\n        SpinnerValueFactory<Integer> valueFactory_year = new SpinnerValueFactory.IntegerSpinnerValueFactory(1, 9999999, 1, 1);// (min,max,startvalue,incrementValue)\n\n        SpinnerValueFactory<Integer> valueFactory_cvc = new SpinnerValueFactory.IntegerSpinnerValueFactory(1, 999, 1, 1);// (min,max,startvalue,incrementValue)\n\n        MM.setValueFactory(valueFactory_month);\n\n        YY.setValueFactory(valueFactory_year);\n\n        cvc.setValueFactory(valueFactory_cvc);\n    }\n",
              "description": ""
            },
            "name": "initialize",
            "location": {
              "start": 123,
              "insert": 123,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "19f54fa1-c7ec-09ad-834b-e3d907cb8af7",
            "ancestors": [
              "bad3a2a0-2e95-1db6-5642-c6298dab47d1"
            ],
            "type": "function",
            "description": "Sets the `Seance` object's fields and updates spinner values for the year, month, and cvc based on the `Seance` object's `prix` field and sets the text of a text field with the total amount.",
            "params": [
              {
                "name": "s",
                "type_name": "Seance",
                "description": "Seance object passed into the function, which is used to set the values of various fields within the `Seance` object.\n\n* `seance`: represents an object of the Seance class, containing information about a seance.\n* `prix`: a float representing the price of the seance.\n* `terrain_id`: an integer representing the terrain ID for display purposes.\n* `monthValue` and `year`: integers representing the current month and year respectively.\n* `cvc`: an object of the CVC class, used to display a spinner for the number of seats available in the seance.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "Seance s = new Seance();\ns.setId(1);\ns.setTerrain_id(1001);\ns.setDate(\"2023-03-15\");\ns.setPrix(50.99);\ns.setNbPlaceReserve(4);\n\nSeanceController sc = new SeanceController();\nsc.setData(s);\n",
              "description": "\nThis will set the values of the seance instance variables with those of the given seance object and display them on the scene. The `spinnerTextField` is used to listen for changes to the value of the spinner, which are then parsed as integers by the `cvc.getValueFactory().setValue()` method."
            },
            "name": "setData",
            "location": {
              "start": 151,
              "insert": 145,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 144,
                "end": 149
              }
            },
            "item_type": "method",
            "length": 51,
            "docLength": 5
          },
          {
            "id": "0a1f1b03-2c00-34a7-9b42-0f2349cd549e",
            "ancestors": [
              "bad3a2a0-2e95-1db6-5642-c6298dab47d1"
            ],
            "type": "function",
            "description": "Validates user input and processes a payment using a third-party payment processor. If the payment is successful, it displays an information alert; otherwise, it displays an error alert.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "payment action that triggered the function execution, and it is used to identify the specific payment method being processed.\n\n* `System.out.println(cvc.getValue());`: This line prints the value of the `CVC` field.\n\n`event` is an instance of the `ActionEvent` class, which represents a user event related to a button press or other action in the JavaFX application. It provides information about the event, such as the source of the event (e.g., a button), the type of event (e.g., \"click\"), and any additional data related to the event.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    private void payment(ActionEvent event) throws StripeException {\n\n        System.out.println(cvc.getValue());\n\n        if (client_name.getText().isEmpty()) {\n\n            Alert alert = new Alert(Alert.AlertType.ERROR);\n\n            alert.setContentText(\"You need to input your Name\");\n\n            alert.setTitle(\"Problem\");\n\n            alert.setHeaderText(null);\n\n            alert.showAndWait();\n\n            client_name.setStyle(\"-fx-border-color: red; -fx-border-width: 2px;\");\n\n//            new animatefx.animation.Shake(client_name).play();\n\n        } else if (email.getText().isEmpty()) {\n\n            Alert alert = new Alert(Alert.AlertType.ERROR);\n\n            alert.setContentText(\"You need to input your Email\");\n\n            alert.setTitle(\"Problem\");\n\n            alert.setHeaderText(null);\n\n            alert.showAndWait();\n\n            email.setStyle(\"-fx-border-color: red; -fx-border-width: 2px;\");\n\n//            new animatefx.animation.Shake(email).play();\n\n        } else if (!isValidEmail(email.getText())) {\n\n            Alert alert = new Alert(Alert.AlertType.ERROR);\n\n            alert.setContentText(\"Please enter a valid Email address.\");\n\n            alert.setTitle(\"Problem\");\n\n            alert.setHeaderText(null);\n\n            alert.showAndWait();\n\n            email.setStyle(\"-fx-border-color: red; -fx-border-width: 2px;\");\n\n//            new animatefx.animation.Shake(email).play();\n\n        } else if (num_card.getText().isEmpty()) {\n\n            Alert alert = new Alert(Alert.AlertType.ERROR);\n\n            alert.setContentText(\"You need to input your card number\");\n\n            alert.setTitle(\"Problem\");\n\n            alert.showAndWait();\n\n        } else if (MM.getValue() == 0) {\n\n            Alert alert = new Alert(Alert.AlertType.ERROR);\n\n            alert.setContentText(\"You need to input your MM number\");\n\n            alert.setTitle(\"Problem\");\n\n            alert.showAndWait();\n\n        } else if (YY.getValue() == 0) {\n\n            Alert alert = new Alert(Alert.AlertType.ERROR);\n\n            alert.setContentText(\"You need to input your YY number\");\n\n            alert.setTitle(\"Problem\");\n\n            alert.showAndWait();\n\n        } else if (CVC.getValue() == 0) {\n\n            Alert alert = new Alert(Alert.AlertType.ERROR);\n\n            alert.setContentText(\"You need to input your CVC number\");\n\n            alert.setTitle(\"Problem\");\n\n            alert.showAndWait();\n\n        } else {\n\n            PaymentProcessor processor = new PaymentProcessor();\n\n            boolean result = processor.processPayment(clientName, email, totalAmount, cardNumber, MM, YY, CVC);\n\n            if (result) {\n\n                Alert alert = new Alert(Alert.AlertType.INFORMATION);\n\n                alert.setContentText(\"Successful payment.\");\n\n                alert.setTitle(\"Success\");\n\n                alert.showAndWait();\n\n                //redirect_to_successPage();\n\n            } else {\n\n                Alert alert = new Alert(Alert.AlertType.ERROR);\n\n                alert.setContentText(\"Payment Failed.\");\n\n                alert.setTitle(\"Problem\");\n\n                alert.showAndWait();\n\n                //redirect_to_FailPage();\n\n            }\n\n        }\n\n    }\n",
              "description": ""
            },
            "name": "payment",
            "location": {
              "start": 211,
              "insert": 205,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 204,
                "end": 209
              }
            },
            "item_type": "method",
            "length": 201,
            "docLength": 5
          },
          {
            "id": "4c253782-2786-3ca3-9e4b-1e9870e4d4a9",
            "ancestors": [
              "bad3a2a0-2e95-1db6-5642-c6298dab47d1"
            ],
            "type": "function",
            "description": "Verifies if a given integer value can be represented as a three-digit credit card number (CVC) by checking its length. If the length is equal to 3, the function returns `true`, otherwise it returns `false`.",
            "params": [
              {
                "name": "value",
                "type_name": "int",
                "description": "3-digit credit card number to be checked for length.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the input string has a length of 3.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "int cvc = 123;\nif (check_cvc(cvc)) {\n    System.out.println(\"Valid CVC\");\n} else {\n    System.out.println(\"Invalid CVC\");\n}\n",
              "description": "\nThis example would print \"Invalid CVC\" because the input value cvc is 3 digits long, while the method check_cvc checks for a 3 digit string length."
            },
            "name": "check_cvc",
            "location": {
              "start": 425,
              "insert": 417,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 416,
                "end": 423
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 7
          },
          {
            "id": "490d3b13-70db-078d-144a-82411c177e2d",
            "ancestors": [
              "bad3a2a0-2e95-1db6-5642-c6298dab47d1"
            ],
            "type": "function",
            "description": "Takes two parameters `value_y` and `value_mm`, checks if the date represented by those parameters is after the current date, and returns `true` if it is, or `false` otherwise.",
            "params": [
              {
                "name": "value_y",
                "type_name": "int",
                "description": "4-digit year value in the expiration date.",
                "complex_type": false
              },
              {
                "name": "value_mm",
                "type_name": "int",
                "description": "month of the date to be checked, which is used to determine if the date is valid.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the given date is valid.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class PaymentController {\n    private Reservation reservation;\n\n    public void setData(Reservation reservation) {\n        this.reservation = reservation;\n        if (this.reservation != null) {\n            int value_y = this.reservation.getExpDate().getYear();\n            int value_mm = this.reservation.getExpDate().getMonthValue();\n            boolean valid = check_expDate(value_y, value_mm);\n            if (!valid) {\n                // Redirect to failure page\n            } else {\n                // Redirect to success page\n            }\n        }\n    }\n}\n",
              "description": ""
            },
            "name": "check_expDate",
            "location": {
              "start": 437,
              "insert": 437,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "6e4e0bc1-dad4-c6bc-0946-09905e7340d9",
            "ancestors": [
              "bad3a2a0-2e95-1db6-5642-c6298dab47d1"
            ],
            "type": "function",
            "description": "Checks whether a given credit card number follows a specific format by matching it against a regular expression pattern. It returns `true` if the pattern matches and `false` otherwise.",
            "params": [
              {
                "name": "cardNumber",
                "type_name": "String",
                "description": "13-19 digit credit card number to be checked against the regular expression pattern for validation.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the provided credit card number matches the specified pattern.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Example {\n    public static void main(String[] args) {\n        // Test valid card number\n        String cardNumber = \"5214 0379 6313 9285\";\n        System.out.println(\"Valid card: \" + check_card_num(cardNumber));\n        \n        // Test invalid card number (too short)\n        cardNumber = \"1234 5678 9012 3456\";\n        System.out.println(\"Invalid card (too short): \" + check_card_num(cardNumber));\n        \n        // Test invalid card number (too long)\n        cardNumber = \"521403796313928511\";\n        System.out.println(\"Invalid card (too long): \" + check_card_num(cardNumber));\n        \n        // Test invalid card number (not a credit card)\n        cardNumber = \"666 666 666 666\";\n        System.out.println(\"Invalid card (not a credit card): \" + check_card_num(cardNumber));\n    }\n}\n",
              "description": "\nOutput:\n"
            },
            "name": "check_card_num",
            "location": {
              "start": 455,
              "insert": 455,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 35,
            "docLength": null
          },
          {
            "id": "6d7ec509-a672-fbac-6747-4181ada20880",
            "ancestors": [
              "bad3a2a0-2e95-1db6-5642-c6298dab47d1"
            ],
            "type": "function",
            "description": "Checks whether a given email address is valid by matching it against a regular expression pattern that matches most standard email addresses.",
            "params": [
              {
                "name": "email",
                "type_name": "String",
                "description": "email address to be checked for validity.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the provided email address is valid or not.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class EmailValidator {\n    public static void main(String[] args) {\n        String email = \"test@gmail.com\";\n        System.out.println(\"Is valid: \"+isValidEmail(email)); // true\n        email = \"not a valid email address\";\n        System.out.println(\"Is valid: \"+isValidEmail(email)); // false\n    }\n}\n",
              "description": "\nThe output of the above code would be:\n"
            },
            "name": "isValidEmail",
            "location": {
              "start": 493,
              "insert": 493,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 29,
            "docLength": null
          },
          {
            "id": "eb034fd8-e847-ffb8-0d45-0f53cb5d0b0e",
            "ancestors": [
              "bad3a2a0-2e95-1db6-5642-c6298dab47d1"
            ],
            "type": "function",
            "description": "Redirects the user to a success page with data loaded from an external resource.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "private void redirect_to_successPage() {\n    FXMLLoader loader = new FXMLLoader(getClass().getResource(\"../gui/reservation/Success_page.fxml\"));\n    Parent root = loader.load();\n    //UPDATE The Controller with Data :\n    Success_pageController controller = loader.getController();\n    controller.setData(this.reservation);\n    Scene scene = new Scene(root);\n    Stage stage = (Stage) pay_btn.getScene().getWindow();\n    stage.setScene(scene);\n}\n",
              "description": "\nThe following code will load the Success_page.fxml file and set the reservation data to the controller of Success_pageController class. This method would then be called when the pay button is clicked."
            },
            "name": "redirect_to_successPage",
            "location": {
              "start": 525,
              "insert": 525,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 27,
            "docLength": null
          },
          {
            "id": "9b1f91fa-47bd-9db6-cc4f-2c40bad5bafb",
            "ancestors": [
              "bad3a2a0-2e95-1db6-5642-c6298dab47d1"
            ],
            "type": "function",
            "description": "Redirects the user to a \"Fail Page\" by loading an FXML file, updating the controller with data from the reservation object, and displaying the scene on the stage.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class ReservationController {\n    //...\n    @FXML\n    private void handlePayment(ActionEvent event) {\n        // ...\n\n        if (payment_success) {\n            redirect_to_SuccessPage();\n        } else {\n            redirect_to_FailPage();\n        }\n    }\n}\n",
              "description": "\nThis is an example of how the method redirect_to_SuccessPage would be used:\n"
            },
            "name": "redirect_to_FailPage",
            "location": {
              "start": 557,
              "insert": 557,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 27,
            "docLength": null
          },
          {
            "id": "e3be5730-1183-58ab-fa4a-559580ef0f3f",
            "ancestors": [
              "bad3a2a0-2e95-1db6-5642-c6298dab47d1"
            ],
            "type": "function",
            "description": "Redirects the user to a new scene containing a reservation view client. It loads the reservation view client fxml file, sets the controller data with the client ID, and displays the stage in a new window.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "triggering of an action, specifically the click on the \"Back\" button, which calls the `redirectToListReservation()` method.\n\n* `event` is an instance of the `ActionEvent` class.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void handleButtonAction(ActionEvent event) {\n    // TODO\n}\n\n@FXML\nprivate void redirectToListReservation() {\n    FXMLLoader loader = new FXMLLoader(getClass().getResource(\"../gui/reservation/Reservation_view_client.fxml\"));\n    Parent root = loader.load();\n    Reservation_view_client controller = loader.getController();\n    controller.setData(this.reservation.getClient_id());\n    Scene scene = new Scene(root);\n    Stage stage = (Stage) back_btn.getScene().getWindow();\n    stage.setScene(scene);\n}\n",
              "description": "\nIn this example, the method redirectToListReservation is called in response to a button click event, and it uses FXMLLoader to load the Reservation_view_client fxml file and retrieve its controller object. The controller's setData() method is then called with the reservation client ID as argument, which will be used to populate the Reservation_view_client screen. Finally, a new scene is created from the loaded root node, and the stage is replaced with this new scene.\nThis code snippet is incomplete. The handleButtonAction() method must first define what happens when the button is clicked."
            },
            "name": "redirectToListReservation",
            "location": {
              "start": 589,
              "insert": 589,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 29,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "PaymentuserController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/films/PaymentuserController.java",
    "content": {
      "structured": {
        "description": "A user interface for a cinema ticket booking system using JavaFX. It includes features such as a combo box for selecting seats, a text field for entering the card number, and a button to process the payment. The code also includes functionality for creating a receipt PDF file and opening it with the desktop application. Overall, the code provides a user interface for booking cinema tickets and generating a receipt in PDF format.",
        "items": [
          {
            "id": "f31069a4-2dc6-04be-ac4c-9f2d89e4d97f",
            "ancestors": [],
            "type": "function",
            "description": "Is responsible for handling payments for a Visa card. It has several methods for validating user input, creating a receipt PDF, and opening the PDF file. The class also initializes an Alert to display error messages if necessary.",
            "name": "PaymentuserController",
            "location": {
              "start": 93,
              "insert": 93,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 541,
            "docLength": null
          },
          {
            "id": "568ab0b2-3d85-db94-3941-00cfaa20ffdd",
            "ancestors": [
              "f31069a4-2dc6-04be-ac4c-9f2d89e4d97f"
            ],
            "type": "function",
            "description": "Checks if a given string is a numerical value by matching it against a regular expression pattern of one or more digits.",
            "params": [
              {
                "name": "str",
                "type_name": "String",
                "description": "String to be checked for matching the regular expression `\\d+`.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a `Boolean` value indicating whether the input string matches the regular expression for a number.",
              "complex_type": false
            },
            "name": "isNum",
            "location": {
              "start": 171,
              "insert": 163,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 162,
                "end": 169
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 7
          },
          {
            "id": "4cac7a5d-82bd-8ba2-e749-c21157daa522",
            "ancestors": [
              "f31069a4-2dc6-04be-ac4c-9f2d89e4d97f"
            ],
            "type": "function",
            "description": "Converts a `float` argument into an `int` value by calling the `int` casting operator `(int)`.",
            "params": [
              {
                "name": "value",
                "type_name": "float",
                "description": "floating-point number to be converted to an integer.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "an integer value equivalent to the provided floating-point number.",
              "complex_type": false
            },
            "name": "floatToInt",
            "location": {
              "start": 191,
              "insert": 183,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 182,
                "end": 189
              }
            },
            "item_type": "method",
            "length": 5,
            "docLength": 7
          },
          {
            "id": "5a20ca2e-beae-b19c-3243-ae9822f7f925",
            "ancestors": [
              "f31069a4-2dc6-04be-ac4c-9f2d89e4d97f"
            ],
            "type": "function",
            "description": "Sets the `client` field and displays the film name on a label. It also prints the value of `client` to the console.",
            "params": [
              {
                "name": "client",
                "type_name": "Client",
                "description": "Client object that provides the payment details for the film name set by the `filmName` parameter.",
                "complex_type": false
              },
              {
                "name": "filmName",
                "type_name": "String",
                "description": "name of a film that is being associated with the `Client` object passed as an argument to the `setData()` method.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Client client = new Client();\nclient.setName(\"John\");\nclient.setSurname(\"Smith\");\nString filmName = \"Film\";\nPaymentController paymentController = new PaymentController();\npaymentController.setData(client, filmName);\n",
              "description": "\nThe first line creates a new instance of the Client class and sets its name and surname properties to \"John\" and \"Smith\", respectively. The second line declares a string variable called filmName and assigns it the value \"Film\". The third line creates a new PaymentController object and calls the setData method on that object, passing in the client and filmName variables as arguments. The setData method then sets the paymentController's client property to the same instance of the Client class that was created earlier and updates its filmLabel_Payment label with the value \"Film\"."
            },
            "name": "setData",
            "location": {
              "start": 199,
              "insert": 199,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "38f4f326-9641-9898-694b-2c742dffaa9b",
            "ancestors": [
              "f31069a4-2dc6-04be-ac4c-9f2d89e4d97f"
            ],
            "type": "function",
            "description": "Reads the film and cinema data, creates a combobox for selecting cinemas and initializes the payment panel with disabled options. When the user selects a cinema, it calls the `readLoujain` method to retrieve the seance list for that cinema, which is then displayed in a spinner.",
            "params": [
              {
                "name": "url",
                "type_name": "URL",
                "description": "URL of a resource bundle that provides localization keys for the function's output, such as film and cinema names.\n\n* `url`: The URL provided by the user, which contains information about the film and cinema.\n* `rb`: A `ResourceBundle` object containing key-value pairs of localized messages and resource keys.",
                "complex_type": true
              },
              {
                "name": "rb",
                "type_name": "ResourceBundle",
                "description": "ResourceBundle object, which provides localized messages and values for the Java application.\n\n* `rb`: A `ResourceBundle` object containing key-value pairs for resource string messages.\n\nThe main properties of `rb` are:\n\n* Key-value pairs: Contains key-value pairs in the form of `(key, value)`, where `key` is a unique identifier for a message, and `value` is the corresponding message text.\n* Messages: `rb` provides a collection of messages that can be used to localize user interface elements, such as labels, buttons, and menus.\n* Culture-specific messages: `rb` allows developers to create culture-specific messages by providing separate key-value pairs for each culture.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Example extends Application {\n    private AnchorPane anchorpane_payment;\n    private ComboBox<String> cinemacombox_res;\n    private Spinner<Integer> nbrplacepPayment_Spinner;\n    private CheckComboBox<String> checkcomboboxseance_res;\n    public static void main(String[] args) {\n        launch(args);\n    }\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n        anchorPane = new AnchorPane();\n        primaryStage.setTitle(\"Movie Ticket\");\n        primaryStage.setScene(new Scene(anchorPane, 600, 800));\n        primaryStage.show();\n    }\n}\n",
              "description": ""
            },
            "name": "initialize",
            "location": {
              "start": 211,
              "insert": 211,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 123,
            "docLength": null
          },
          {
            "id": "32553dcd-369b-40bb-c041-ac308c4b254d",
            "ancestors": [
              "f31069a4-2dc6-04be-ac4c-9f2d89e4d97f",
              "38f4f326-9641-9898-694b-2c742dffaa9b"
            ],
            "type": "function",
            "description": "Reads movie and cinema information to populate a combobox with seance options for a given film and cinema. It clears the existing items, retrieves new seance data, and adds it to the combobox.",
            "params": [
              {
                "name": "observableValue",
                "type_name": "ObservableValue<? extends String>",
                "description": "observable value that has been changed, providing the updated value and the previous value (in `s` and `t1`).\n\n* `observableValue` is an `ObservableValue` object that represents changes to the `Seance` list in the UI.\n* The type of the value being observed is a `String`, indicating that the list contains strings representing the names of `Seance` objects.\n* The third argument, `t1`, is not used in this implementation.",
                "complex_type": true
              },
              {
                "name": "s",
                "type_name": "String",
                "description": "string value of a film label, which is used to retrieve the id of the corresponding film and cinema id for displaying seance options in the combobox.",
                "complex_type": false
              },
              {
                "name": "t1",
                "type_name": "String",
                "description": "2nd string value passed to the function, which is used to populate the `checkcomboboxseance_res` widget with available seance options based on the selected film and cinema.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        ObservableValue<String> observableValue = new SimpleStringProperty();\n        observableValue.set(\"Hello\");\n\n        // Example of how to use the changed method.\n        observableValue.changed(observableValue, \"old value\", \"new value\");\n    }\n}\n",
              "description": "\nIn this example, we first create an ObservableValue object and set its initial value to \"Hello\". We then call the changed() method on the ObservableValue object, passing in the observableValue, \"old value\", and \"new value\" as arguments. Note that these values are arbitrary and can be replaced with any valid values.\n\nThe changed() method is a callback function that is called whenever the value of an ObservableValue changes. In this case, since we passed in \"old value\" and \"new value\", it will be called every time the value of the observableValue changes between \"old value\" and \"new value\". This allows us to perform any necessary actions when the value of the ObservableValue changes."
            },
            "name": "changed",
            "location": {
              "start": 227,
              "insert": 227,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "e99b1555-b5eb-9985-5e48-c0e6f9c1608d",
            "ancestors": [
              "f31069a4-2dc6-04be-ac4c-9f2d89e4d97f",
              "38f4f326-9641-9898-694b-2c742dffaa9b"
            ],
            "type": "function",
            "description": "Updates the spinner value based on the change in the film and cinema comboboxes, retrieves the seating information for the selected film and cinema, and sets the disable status of the payment nodes to false.",
            "params": [
              {
                "name": "change",
                "type_name": "Change<? extends String>",
                "description": "change event that occurs when the user interacts with the `Loujain` list, providing the opportunity to process the changes and update the `Seance` objects accordingly.\n\n* `change.next()` returns true if there are more changes to iterate over.\n* `change.wasAdded()` indicates whether a new element was added to the list or not. If true, the code inside the `if` statement is executed.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\n    public void onChanged(Change<? extends String> change) {\n        while (change.next()) {\n            if (change.wasAdded()) {\n                // Get the Seance object from the observable list of seances using the index of the added item and set the seance field in the controller to this object\n                int index = change.getList().indexOf(change.getValueAdded());\n                Seance seance = seances.get(index);\n                this.seance = seance;\n                \n                // Set all children of the anchorpane_payment AnchorPane to be disabled by iterating through each child and setting its disable property to true\n                anchorpane_payment.getChildren().forEach(node -> node.setDisable(true));\n                \n                // Set the value factory for the nbrplacepPayment_Spinner to a new SpinnerValueFactory that generates values between 1 and the number of places in the Seance object set above, and sets the initial value of the spinner to be 1 using the setValue(int) method\n                nbrplacepPayment_Spinner.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(1, seance.getId_salle().getNb_places(), 1, 1));\n            }\n        }\n    }\n",
              "description": "\nThe code above will iterate through the changes in the observable list of Seance objects and set the Seance object for each added item to be the value of the spinner when it is changed. It will also disable all children of the anchorpane_payment AnchorPane, and set the value factory for the nbrplacepPayment_Spinner to a new SpinnerValueFactory that generates values between 1 and the number of places in the Seance object set above, and sets the initial value of the spinner to be 1 using the setValue(int) method. The code also checks if an item was added, which is done by checking if the wasAdded() method returns true."
            },
            "name": "onChanged",
            "location": {
              "start": 257,
              "insert": 257,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 29,
            "docLength": null
          },
          {
            "id": "9c3d7145-74ba-3bb1-2d4c-4a52f0edcb03",
            "ancestors": [
              "f31069a4-2dc6-04be-ac4c-9f2d89e4d97f",
              "38f4f326-9641-9898-694b-2c742dffaa9b"
            ],
            "type": "function",
            "description": "Reads the seances available for a given film and cinema, calculates the total price based on the number of places paid, and displays the total price to the user.",
            "params": [
              {
                "name": "observableValue",
                "type_name": "ObservableValue<? extends Integer>",
                "description": "observeable value that has changed, providing the new value and the old value for the method to operate on.\n\n* `observableValue`: An observable value of type `Integer`, which represents the selected payment method.\n* `integer`: The current value of the `observableValue`.",
                "complex_type": true
              },
              {
                "name": "integer",
                "type_name": "Integer",
                "description": "2nd value passed to the `changed()` method, which is the `t1` value from the observable value notification.\n\n* `t1`: The value of `t1` is not explicitly mentioned in the provided code snippet. However, based on the context, it can be inferred that `t1` represents a time interval or a timestamp.",
                "complex_type": true
              },
              {
                "name": "t1",
                "type_name": "Integer",
                "description": "2nd value passed to the `readLoujain()` method, which is used to retrieve the film and cinema information for the payment calculation.\n\n* `t1`: An `Integer` variable representing the ID of the film.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) throws Exception {\n        new SeanceService().readLoujain(\n                new FilmService().getFilmByName(\"some film name\").getId(),\n                new CinemaService().getCinemaByName(\"some cinema name\").getId_cinema()\n        );\n    }\n}\n",
              "description": "\nIn the example above, the method `readLoujain` is called with two parameters: a film ID and a cinema ID. This method is an observable value change listener that listens for changes to the number of seats booked by the user in the spinner component. When the number of seats changes, the method will calculate the total price based on the current number of seats and the price per seat for each seance. It will then update the text label with the new total.\n"
            },
            "name": "changed",
            "location": {
              "start": 291,
              "insert": 291,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "be4b0424-d217-a0b4-064a-077610838994",
            "ancestors": [
              "f31069a4-2dc6-04be-ac4c-9f2d89e4d97f"
            ],
            "type": "function",
            "description": "Processes a payment for a ticket purchase by first checking if the input is valid, then calculating and charging the correct amount based on the ticket's price and quantity, and finally saving the order to the database.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "Pay action event, which triggers the execution of the function and enables the processing of the payment request.\n\n* `event` is an ActionEvent that represents a user's action on the Pay button.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void pay(ActionEvent event) throws StripeException {\n    TicketService scom = new TicketService();\n    \n    // TODO replace the next line with reservation\n    Seance seance;\n    UserService sc = new UserService();\n    if (isValidInput()) {\n        float f = (float) seance.getPrix() * 100;\n        int k = floatToInt(f);\n        String url = Paymentuser.pay(k);\n        \n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\n        alert.setTitle(\"Paiement\");\n        alert.setContentText(\"Paiement effectué avec succès, Votre Commande a été enregistré\");\n        alert.showAndWait();\n        \n        Stage stage = new Stage();\n        final WebView webView = new WebView();\n        final WebEngine webEngine = webView.getEngine();\n        \n        // Path dest = Path.of(\"stripe.pdf\");\n        // try (InputStream in = new URL(url).openStream()) {\n        // Files.copy(in, Paths.get(dest.toUri()));\n        // System.out.println(\"PDF downloaded successfully\");\n        // } catch (Exception e) {\n        // e.printStackTrace();\n        // }\n        // try {\n        // Desktop.getDesktop().open(new File(\"stripe.pdf\"));\n        // } catch (IOException e) {\n        // e.printStackTrace();\n        // throw new RuntimeException(e);\n        // }\n        \n        webView.getEngine().load(url);\n        \n        // create scene\n        // stage.getIcons().add(new Image(\"/Images/logo.png\"));\n        stage.setTitle(\"localisation\");\n        Scene scene = new Scene(webView, 1000, 700, Color.web(\"#666970\"));\n        stage.setScene(scene);\n        \n        // show stage\n        stage.show();\n    }\n    \n    int clientId=GuiLoginController.user.getId();\n    if (clientId == 0)\n        clientId = 1;\n    \n    // Creating a product order\n    Ticket ticket = new Ticket();\n    ticket.setPrix(ticket.getPrix() * ticket.getNbrdeplace()); // Replace with actual product price\n    ticket.setNbrdeplace(1); // Replace with actual quantity\n    ticket.setId_user(GuiLoginController.user);\n    ticket.setId_seance(seance);\n    TicketService p = new TicketService();\n    p.update(ticket);\n    \n    // Saving the product order\n    scom.create(ticket);\n}\n",
              "description": "\nThe above code would call the Pay method on an ActionEvent object. The code is using Stripe payment gateway to accept payments from users, and upon a successful payment, it creates a ticket for the user in the system. The ticket is created by calling the create method of TicketService with the ticket as parameter. Note that GuiLoginController is also called here, and its getId method is used to retrieve the user's id, which is then set as the ticket's user id. This code would be placed in a controller class that contains all of the necessary methods to handle the payment process."
            },
            "name": "Pay",
            "location": {
              "start": 337,
              "insert": 337,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 117,
            "docLength": null
          },
          {
            "id": "06562297-68a0-579c-504e-32ee6e574808",
            "ancestors": [
              "f31069a4-2dc6-04be-ac4c-9f2d89e4d97f"
            ],
            "type": "function",
            "description": "Validates input fields for a Visa card number, month and year of expiration, and CVC code. It returns `true` if all inputs are valid, otherwise it displays an error message and returns `false`.",
            "params": [],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the input is valid or not.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) throws IOException {\n        Seance seance = new Seance();\n        Client client = new Client();\n        \n        Payment payment = new Payment();\n        payment.init(seance, client);\n        \n        if (payment.isValidInput()) {\n            payment.createReceiptPDF(\"receipt.pdf\", seance.getTicket());\n            payment.openPDF(\"receipt.pdf\");\n        } else {\n            System.out.println(\"Invalid input detected.\");\n        }\n    }\n}\n",
              "description": "\nIn this example, we create an instance of the Payment class and call its init method with an instance of a Seance and Client object as parameters. We then check if the payment is valid by calling the isValidInput method. If it is not valid, we print \"Invalid input detected\". If it is valid, we create a PDF receipt using createReceiptPDF method and open it using openPDF method."
            },
            "name": "isValidInput",
            "location": {
              "start": 457,
              "insert": 457,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 49,
            "docLength": null
          },
          {
            "id": "dbe10b67-a0b8-0c94-5f4c-91245794b80b",
            "ancestors": [
              "f31069a4-2dc6-04be-ac4c-9f2d89e4d97f"
            ],
            "type": "function",
            "description": "Takes a string as input and checks if it matches the valid Visa card number format, which is a 13-digit number consisting of four digits followed by a hyphen and then another four digits.",
            "params": [
              {
                "name": "text",
                "type_name": "String",
                "description": "13-digit credit card number to be validated.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Boolean",
              "description": "a boolean value indicating whether the given string represents a valid Visa card number or not.\n\n* The function returns a boolean value indicating whether the given text represents a valid Visa card number or not.\n* The output is based on the pattern `(^4[0-9]{12}(?:[0-9]{3})?$)` which is used to validate the Visa card number.\n* The pattern checks that the card number consists of 12 digits, with the first 4 digits being \"4\", and optionally followed by a further 3 digits.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    System.out.print(\"Enter a credit card number: \");\n    String text = sc.next();\n    \n    if (isValidVisaCardNo(text)) {\n        System.out.println(\"Valid Visa Card Number\");\n    } else {\n        System.out.println(\"Invalid Visa Card Number\");\n    }\n}\n",
              "description": ""
            },
            "name": "isValidVisaCardNo",
            "location": {
              "start": 509,
              "insert": 509,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "ccf949fb-5a16-19ab-0c40-40f646afa4ce",
            "ancestors": [
              "f31069a4-2dc6-04be-ac4c-9f2d89e4d97f"
            ],
            "type": "function",
            "description": "Creates an Alert object with an error title and message, displays it using the `showAndWait()` method.",
            "params": [
              {
                "name": "title",
                "type_name": "String",
                "description": "title of an error message that is displayed in the alert box when the `showError()` method is called.",
                "complex_type": false
              },
              {
                "name": "message",
                "type_name": "String",
                "description": "message to be displayed as the content of an error alert when the function is called.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public void example() {\n    String message = \"Invalid input\";\n    showError(\"Error\", message);\n}\n",
              "description": "\nIn this case, the error dialog box will open with the title \"Error\" and the message \"Invalid Input\". The method is called in the example function."
            },
            "name": "showError",
            "location": {
              "start": 525,
              "insert": 525,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "331dce94-bcea-a595-5d46-900b4dd1688d",
            "ancestors": [
              "f31069a4-2dc6-04be-ac4c-9f2d89e4d97f"
            ],
            "type": "function",
            "description": "Sets the values of class variables `client` and `seance`, and updates the text of a label `total`.",
            "params": [
              {
                "name": "p",
                "type_name": "Seance",
                "description": "Seance object, which is assigned to the class instance variable `seance`.",
                "complex_type": false
              },
              {
                "name": "client",
                "type_name": "Client",
                "description": "Client object that is associated with the Seance object being initialized.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class JavaClass {\n    private Seance seance;\n    private Client client;\n    \n    public void init(Seance p, Client c) {\n        this.seance = p;\n        this.client = c;\n    }\n}\n\n// Example usage of method init\nJavaClass javaClass = new JavaClass();\njavaClass.init(new Seance(), new Client());\n",
              "description": "\nNote: Please do not give an explanation to the code, and do not explain the code."
            },
            "name": "init",
            "location": {
              "start": 541,
              "insert": 541,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "392b32f7-4edb-c687-6c42-8d14174ae0d0",
            "ancestors": [
              "f31069a4-2dc6-04be-ac4c-9f2d89e4d97f"
            ],
            "type": "function",
            "description": "Loads and displays a FXML file named \"filmuser.fxml\" using Java's `FXMLLoader` class, creating a new stage and scene to display the content.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the method execution, providing the necessary information about the action that was performed.\n\nEvent: An ActionEvent object representing a user event.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class ExampleClass {\n    public void start() {\n        // Assuming anchorpane_payment is already defined in this class\n        switchtfillmmaa(new ActionEvent());\n    }\n}\n",
              "description": "\nNote that the above example uses a fictional method \"start\" which calls the switchtfillmmaa method with an object of type ActionEvent. The ActionEvent argument is required for the switchtfillmmaa method to work correctly, as it is the first parameter in the method definition."
            },
            "name": "switchtfillmmaa",
            "location": {
              "start": 553,
              "insert": 553,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "59289ecf-77ae-c591-8148-2cb9b9266067",
            "ancestors": [
              "f31069a4-2dc6-04be-ac4c-9f2d89e4d97f"
            ],
            "type": "function",
            "description": "Creates a PDF receipt for a ticket purchase by adding text and graphics to a blank page using a PDPageContentStream, then saving the document with a specified filename.",
            "params": [
              {
                "name": "filename",
                "type_name": "String",
                "description": "name of the output PDF file that the `createReceiptPDF` method will save.",
                "complex_type": false
              },
              {
                "name": "ticket",
                "type_name": "Ticket",
                "description": "ticket for which a receipt is to be generated, and its contents are used to populate the receipt document.\n\n* Ticket is an instance of the `Ticket` class.\n* It contains information about the ticket purchase, such as the date and time of purchase, the amount paid, and any other relevant details.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Ticket {\n    private String name;\n    private double price;\n    public Ticket(String name, double price) {\n        this.name = name;\n        this.price = price;\n    }\n}\n\npublic class Example {\n    public static void main(String[] args) throws IOException {\n        Ticket ticket = new Ticket(\"MyTicket\", 10);\n        String filename = \"receipt.pdf\";\n        createReceiptPDF(filename, ticket);\n    }\n}\n",
              "description": ""
            },
            "name": "createReceiptPDF",
            "location": {
              "start": 577,
              "insert": 577,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 39,
            "docLength": null
          },
          {
            "id": "2e5ca290-5830-be9b-714c-afaaffe52434",
            "ancestors": [
              "f31069a4-2dc6-04be-ac4c-9f2d89e4d97f"
            ],
            "type": "function",
            "description": "Opens a PDF file using the desktop application.",
            "params": [
              {
                "name": "filename",
                "type_name": "String",
                "description": "name of the PDF file to be opened.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "String filename = \"path/to/file.pdf\";\n\ntry {\n\n    openPDF(filename);\n\n} catch (IOException e) {\n\n    System.out.println(\"Error opening file\");\n\n}\n",
              "description": "\nThis example uses the String variable filename as an input to the method openPDF which is a method that opens a PDF file in your default PDF viewer. The try-catch block is used to handle any possible errors that may occur when attempting to open the file. If there is an error, the message \"Error opening file\" will be printed to the console."
            },
            "name": "openPDF",
            "location": {
              "start": 619,
              "insert": 619,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "AfficherProduitClientControllers.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/produits/AfficherProduitClientControllers.java",
    "content": {
      "structured": {
        "description": "A `Produit` class representing a product, and a `DetailsProduitClient` class for displaying details of a selected product on a stage. The code uses the `FXMLLoader` class to load an fxml file that defines an user interface for showing product details. It also uses the `Image` class to display an image of the product, and the `Label` class to display the product name and price. The code loads the image and names from a database using a `Produit` object, and displays them in a card container with vertical spacing.",
        "items": [
          {
            "id": "bce42ef3-83a5-3cba-8842-41c8ae9f95bd",
            "ancestors": [],
            "type": "function",
            "description": "Displays a card containing the name, price, and image of a product. The class creates an AnchorPane and adds a Label, a PriceLabel, and an ImageView to it. The ImageView is clickable and will show the details of the product when clicked.",
            "name": "AfficherProduitClientControllers",
            "location": {
              "start": 93,
              "insert": 93,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 2093,
            "docLength": null
          },
          {
            "id": "560b3a33-e739-ada3-7f46-93e3aab3ecdc",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Searches for products in a list based on a given search term and returns a list of matching products.",
            "params": [
              {
                "name": "liste",
                "type_name": "List<Produit>",
                "description": "list of products that will be searched for matches with the given search query.\n\n* It is a list of `Produit` objects.",
                "complex_type": true
              },
              {
                "name": "recherche",
                "type_name": "String",
                "description": "search query used to filter the list of `Produit` objects returned by the function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ListProduit",
              "description": "a list of `Produit` objects that match the given search query.\n\n* The output is a list of `Produit` objects, representing the matching products in the input list.\n* The list contains only the elements from the input list that match the search query.\n* Each element in the list has a `Nom` attribute that contains the search query.",
              "complex_type": true
            },
            "name": "rechercher",
            "location": {
              "start": 187,
              "insert": 177,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 176,
                "end": 185
              }
            },
            "item_type": "method",
            "length": 23,
            "docLength": 9
          },
          {
            "id": "2a2bd493-9083-7cad-c746-dc99ee629155",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Sets up UI components for searching and displaying produits, including a search bar, a filter category combo box, and a flow pane to display results. It also initializes a produitService object and sets up listeners for the search bar and category combo box to update the displayed produits.",
            "params": [
              {
                "name": "location",
                "type_name": "URL",
                "description": "URL of the web page that the function is initializing, which is used to load the accepted products and display them on the screen.\n\n* `URL location`: This represents a URL that provides information about the accepted products.",
                "complex_type": true
              },
              {
                "name": "resources",
                "type_name": "ResourceBundle",
                "description": "ResourceBundle object that provides localized messages and key for displaying comments and top3 produits.\n\n* `location`: The URL of the location where the application is running.\n* `resources`: A `ResourceBundle` object containing key-value pairs of resources used in the application.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public void initialize(URL location, ResourceBundle resources) {\n    ProduitService produitService = new ProduitService();\n    l1 = produitService.read();\n    // Set up the SearchBar and add a listener to it that will filter the list of films based on what is typed into the search bar\n    SearchBar.textProperty().addListener((observable, oldValue, newValue) -> {\n        List<Produit> produitsRecherches = rechercher(l1, newValue);\n        // Empty the FlowPane to display the results of the search\n        produitFlowPane.getChildren().clear();\n        // Create a card for each film returned by the search and add it to the FlowPane\n        createProduitCards(produitsRecherches);\n        // Sort the list of films based on the value selected in the combo box and display the results in the FlowPane\n        filterCategorieProduits(tricomboBox.getValue());\n    });\n}\n",
              "description": "\nHere, we are creating a method that will be called during the initialization of the class. We have a `SearchBar` object, which is a text field used for searching for specific information in a list. We also have a `produitFlowPane`, which is a FlowPane that displays all of the films available in our system. We are setting up a listener to the `SearchBar` object that will filter the list of films based on what is typed into the search bar, and then adding those filtered results to the `produitFlowPane`.\n\nInside the method, we first create a variable called `l1`, which is a list of all the films available in our system. We then set up a listener for the `SearchBar` object that will filter the list of films based on what is typed into the search bar. This is done by calling the `rechercher` method, which takes in two parameters: the first parameter is the list of all the films available in our system (`l1`), and the second parameter is the value typed into the search bar (`newValue`). We then use a lambda expression to create an anonymous inner class that will filter the list of films based on what is typed into the search bar.\n\nThe first thing we do inside the listener is to clear out the `produitFlowPane` so that it can display only the results of our search. Next, we call the `createProduitCards` method to create a card for each film returned by the search and add them to the `produitFlowPane`.\n\nFinally, we set up a listener for the combo box, which allows us to sort the list of films based on the value selected in the combo box. We do this by calling the `filterCategorieProduits` method, which takes in one parameter: the value selected in the combo box (`tricomboBox.getValue()`). This will then filter the list of films based on the value selected in the combo box and display the results in the `produitFlowPane`.\n\nOverall, this is an example of how we can use the `initialize` method to set up listeners for a text field and a combo box, which will allow us to search through a list of objects and filter the results based on what is selected in a combo box."
            },
            "name": "initialize",
            "location": {
              "start": 223,
              "insert": 215,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 214,
                "end": 221
              }
            },
            "item_type": "method",
            "length": 57,
            "docLength": 7
          },
          {
            "id": "2a6d8ccc-b700-51a1-df4e-a2135577afa2",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Loads all products from a service and adds them to a flow pane using a recursive method.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "private void handleSearch(ActionEvent event) {\n    ProduitService produitService = new ProduitService();\n    List<Produit> produits = produitService.read();\n    if (produits == null || produits.isEmpty()) {\n        // Handle null or empty list here\n    } else {\n        for (Produit produit : produits) {\n            VBox cardContainer = createProduitCard(produit);\n            AnchorPane produitNode = new AnchorPane();\n            produitNode.setUserData(produit);\n            produitNode.getChildren().add(cardContainer);\n            produitFlowPane.getChildren().add(produitNode);\n            produitFlowPane.setPadding(new Insets(10, 10, 10, 10));\n        }\n    }\n}\n",
              "description": ""
            },
            "name": "loadAcceptedProduits",
            "location": {
              "start": 283,
              "insert": 283,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 39,
            "docLength": null
          },
          {
            "id": "6051b9b6-5a2a-1596-e548-78ceddb41fdb",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Creates a Card component that displays the details of a product, including its image, name, description, price, and buttons for adding to cart or viewing comments.",
            "params": [
              {
                "name": "Produit",
                "type_name": "Produit",
                "description": "Produit object that contains the details of the product being displayed, and it is used to access the product's properties and methods throughout the function, such as retrieving its name, price, and ID.\n\n* `id_produit`: The unique identifier for the product\n* `nom`: The product name\n* `description`: The product description\n* `prix`: The product price\n* `image`: The product image URL",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "Anchor",
              "description": "a `Pane` object containing the UI components for displaying a single product in a shopping cart.\n\n* `card`: The card container that displays information about the selected product, including an image view, name label, description label, price label, add to cart button, and chat icon.\n* `imageView`: An image view that displays a picture of the selected product.\n* `nameLabel`: A label that displays the name of the selected product.\n* `descriptionLabel`: A label that displays a brief description of the selected product.\n* `priceLabel`: A label that displays the price of the selected product.\n* `addToCartButton`: A button that allows users to add the selected product to their cart.\n* `chatIcon`: An icon that represents the chat function, which displays all comments for the selected product when clicked.\n\nThe main attributes of the returned output are:\n\n* The card container has a white background with a gradient border from the top left corner to the bottom right corner.\n* The image view, name label, description label, price label, and add to cart button have a font size of 12px, bold font weight, and a padding of 10px.\n* The chat icon has an icon literal of \"fa-commenting\" and an icon size of 20px.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "createProduitCard(new Produit(\"produit1\", \"description1\", 50, 1));\ncreateProduitCard(new Produit(\"produit2\", \"description2\", 75, 3));\ncreateProduitCard(new Produit(\"produit3\", \"description3\", 90, 2));\n",
              "description": "\nThis would create three ProduitCards with the name, description, price, and quantity set accordingly. The example is short and easy to understand because it only has one input (the Produit objects), making it clear that the method takes in only a single Produit object. This makes the code easy to read and debug, as any incorrect inputs would be obvious from the error message or the behavior of the code itself."
            },
            "name": "createProduitCard",
            "location": {
              "start": 325,
              "insert": 325,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 337,
            "docLength": null
          },
          {
            "id": "ad33dac5-8445-f6ae-0c46-502fc13b916d",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Clears the current pane, adds the newly added product to a new pane, and makes the updated pane visible while hiding other panes.",
            "params": [
              {
                "name": "produitAjoute",
                "type_name": "Produit",
                "description": "product that is being added to the shopping cart, which is used to create a new `HBox` representing the product card and add it to the `panierFlowPane`.\n\n* `Produit produitAjoute`: This is an instance of the `Produit` class, representing a product added to the cart.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        Produit produitAjoute = new Produit(); // Create a Produit instance\n\n        // Fill in the fields of the Produit instance with some sample data\n        produitAjoute.setNom(\"Bike\");\n        produitAjoute.setPrix(123.45);\n\n        afficherPanier(produitAjoute); // Call the method\n    }\n}\n",
              "description": "\nIn this example, a Produit instance is created and then passed to the afficherPanier method as an argument. The method will then create a HBox card for the produitAjoute instance and add it to the panierFlowPane FlowPane."
            },
            "name": "afficherPanier",
            "location": {
              "start": 665,
              "insert": 665,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 31,
            "docLength": null
          },
          {
            "id": "7ad7b7ae-7051-a2a1-4e48-d12d620af69d",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Adds a product to the shopping cart based on the product ID and quantity. It first verifies if the product is available, then creates a new panier object with the product details and user data, and finally adds it to the panier service for display in the user interface.",
            "params": [
              {
                "name": "produitId",
                "type_name": "int",
                "description": "ID of the product to be added to the cart.",
                "complex_type": false
              },
              {
                "name": "quantity",
                "type_name": "int",
                "description": "number of items to be added to the shopping cart.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "private void ajouterAuPanier(int produitId, int quantity) {\n    // The produitId and quantity are both inputs that need to be validated before adding the product to the shopping cart.\n    if (produitService.verifierStockDisponible(produitId, quantity)) {\n        Produit produit = produitService.getProduitById(produitId);\n        Panier panier = new Panier();\n        panier.setProduit(produit);\n        panier.setQuantity(quantity);\n        Client client = (Client) panierFlowPane.getScene().getWindow().getUserData();\n        panier.setUser(client);\n        panierService.create(panier);\n        afficherPanier(produit); // Utilisez le produit ajouté pour afficher dans le panier\n    } else {\n        System.out.println(\"Stock insuffisant pour le produit avec l'ID : \" + produitId);\n    }\n}\n",
              "description": "\nThis method uses the ProduitService and PanierService objects to create a new Panier object with the specified product ID and quantity, and then adds it to the shopping cart. It also displays the product in the shopping cart using the afficherPanier method. The method verifies that there is sufficient stock available before adding the product to the shopping cart by calling the produitService.verifierStockDisponible method with the specified product ID and quantity. If there is not enough stock available, it displays a message indicating that the product is out of stock."
            },
            "name": "ajouterAuPanier",
            "location": {
              "start": 699,
              "insert": 699,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 37,
            "docLength": null
          },
          {
            "id": "91385c1d-8083-c5b9-8e4c-5d17afb41d63",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Creates a card for each `Produit` object in the `produits` list and adds them to the `produitFlowPane`.",
            "params": [
              {
                "name": "produits",
                "type_name": "List<Produit>",
                "description": "list of products to create cards for, and is used to iterate over the products in the list to create the cards.\n\n* `produits`: A list of `Produit` objects, containing information about individual products.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "private void loadProducts() {\n    try {\n        List<Produit> produits = new ArrayList<>();\n        // Fill in the list with products\n        createProduitCards(produits);\n    } catch (Exception e) {\n        System.out.println(\"Une erreur est survenue lors du chargement des produits\");\n    }\n}\n",
              "description": "\nIn this example, the method loadProducts is called and inside it, a list of products is created and filled in with data. This data is then passed to the createProduitCards method, which will use it to create a card for each product."
            },
            "name": "createProduitCards",
            "location": {
              "start": 739,
              "insert": 739,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "36df5c13-72d7-62a1-784e-4b9645fb91cc",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Generates a card for the shopping cart, containing the total quantity and price of each product, a \"Continue Shopping\" button, and an \"Order Now\" button. When the \"Continue Shopping\" button is clicked, the stage closes and the order summary is displayed.",
            "params": [
              {
                "name": "produit",
                "type_name": "Produit",
                "description": "products to be added to the shopping cart, and it is used to display the product name and quantity in the `PanierProduit` FXML file.\n\n* `name`: the name of the product\n* `quantite`: the quantity of the product in the cart\n* `sommeTotale`: the total cost of the product in the cart\n* `imageView`: an image view of the product\n* `commander`: a button to add the product to the cart or continue shopping.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "Platform",
              "description": "a `Node` object representing a card with the contents of the shopping cart.\n\n* `panierContainer`: The parent Node for the entire card, which contains all the children components.\n* `cartLabel`: A Label component displaying the word \"Panier\" in bold and a larger font size.\n* `closeIcon`: A FontIcon component displaying an icon of a times circle, used for closing the card.\n* `imageView`: An ImageView component displaying a shopping cart icon.\n* `nameLabel`: A Label component displaying the text \"Nom du produits\".\n* `quantiteLabel`: A Label component displaying the text \"Quantité\".\n* `sommeTotaleLabel`: A Label component displaying the text \"Somme totale\".\n* `achatbutton`: A Button component displaying the text \"Continuer les achats\" and used for navigating to the next stage.\n* `commandebutton`: A Button component displaying the text \"Order\" and used for adding an item to the cart.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public void exampleMethod() {\n    // 1. Create a PanierContainer object\n    PanierContainer panierContainer = new PanierContainer();\n    \n    // 2. Add items to the container using createPanierCard method\n    for (Produit produit : this.listeProduits) {\n        panierContainer.getChildren().add(createPanierCard(produit));\n    }\n}\n",
              "description": "\nThis example creates a new PanierContainer object and then uses the createPanierCard method to add items to it. The createPanierCard method takes in one argument, which is a Produit object representing the product being added to the container. For each iteration of the for loop, it adds a card with information about the Produit object to the PanierContainer using the getChildren() method. Once all the Produit objects have been processed, the PanierContainer will contain multiple cards with information about each item in the list of Produit objects."
            },
            "name": "createPanierCard",
            "location": {
              "start": 757,
              "insert": 757,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 277,
            "docLength": null
          },
          {
            "id": "d4b344d0-6c96-6d9a-4a43-ea2aa93a1953",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Makes a panel invisible and sets another panel's visibility and opacity to 1, effectively hiding the panel that was previously visible.",
            "params": [
              {
                "name": "panierContainer",
                "type_name": "HBox",
                "description": "HBox component that contains the panel containing the shopping cart.\n\n* `panierContainer`: A `HBox` component representing the container for the panier (basket) display.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "private void fermerPanierCard(HBox panierContainer) {\n    panierFlowPane.setVisible(false); // This line hides the panierFlowPane node from being displayed on the screen.\n\n    produitFlowPane.setVisible(true); // This line shows the produitFlowPane node and makes it visible to be displayed on the screen.\n\n    produceFlowPane.setOpacity(1); // This line sets the opacity of the produitFlowPane node to 1, making it opaque and visible again.\n\n    top3anchorpane.setVisible(true); // This line shows the top3anchorpane node and makes it visible to be displayed on the screen.\n\n    top3anchorpane.setOpacity(1); // This line sets the opacity of the top3anchorpane node to 1, making it opaque and visible again.\n}\n",
              "description": "\nIn this example, fermerPanierCard is used with an argument of panierContainer which is an instance of HBox. It will first set the visibility of the panierFlowPane node to false, making it invisible on screen. It then sets the visibility of the produitFlowPane node to true and sets its opacity to 1, making it visible again. Finally, it sets the visibility of the top3anchorpane node to true and sets its opacity to 1, making it visible again."
            },
            "name": "fermerPanierCard",
            "location": {
              "start": 1037,
              "insert": 1037,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "95dd25a4-989c-169c-854b-eb227e0f6f77",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Loads a new UI component (`PanierProduit.fxml`) when a button is clicked, creates a new scene with the loaded component, and attaches it to a new stage. The new stage is then displayed and the previous stage is closed.",
            "params": [
              {
                "name": "event",
                "type_name": "MouseEvent",
                "description": "MouseEvent object that triggered the function, providing information about the mouse button pressed, the screen position of the click, and other details.\n\n* Event source: The element that triggered the event (not specified).",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "// Create a mouse event object with the \"click\" event\nMouseEvent event = new MouseEvent(MouseEvent.MOUSE_CLICKED, 0, 0, 0, 0, 0, false, false);\n\n// Invoke the panier method on the FXML controller instance\ncontroller.panier(event);\n",
              "description": ""
            },
            "name": "panier",
            "location": {
              "start": 1061,
              "insert": 1061,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 53,
            "docLength": null
          },
          {
            "id": "1df63648-e9a5-a982-8146-fa55440c777e",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Filters a list of products based on a search text, by adding to an observable list only those products whose category name contains the search text.",
            "params": [
              {
                "name": "searchText",
                "type_name": "String",
                "description": "search term used to filter the list of products.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "// Call the filterCategorieProduits method with a string that contains 'Laptop' to filter the list of produits by their categories containing 'Laptop'.\nfilterCategorieProduits(\"Laptop\");\n",
              "description": ""
            },
            "name": "filterCategorieProduits",
            "location": {
              "start": 1117,
              "insert": 1117,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 37,
            "docLength": null
          },
          {
            "id": "099b5a84-1d83-1e8d-6349-2862194b9ea7",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Retrieves a list of all product categories from the service layer using the `ProduitService`. The list is then returned to the caller.",
            "params": [],
            "returns": {
              "type_name": "ListProduit",
              "description": "a list of `Produit` objects retrieved from the service.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class MyController {\n    @FXML\n    private ListView<String> categoryListView;\n\n    public void initialize() {\n        List<Produit> categories = getAllCategories();\n        ObservableList<String> items = FXCollections.observableArrayList(categories.stream().map((c) -> c.getNom()).collect(Collectors.toList()));\n        categoryListView.setItems(items);\n    }\n}\n",
              "description": ""
            },
            "name": "getAllCategories",
            "location": {
              "start": 1157,
              "insert": 1157,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "ca3a10e4-bdf2-4f97-8e45-92ea224b46ea",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Sets the opacity of a pane to 0.5, makes a panel visible, clears lists of check boxes and recieves unique addresses from a database for each category. It then creates VBoxes for the addresses and adds them to a parent pane, making the parent pane visible.",
            "params": [
              {
                "name": "event",
                "type_name": "MouseEvent",
                "description": "mouse event that triggered the filtrer method, providing the source of the event and any relevant data.\n\n* `event`: A MouseEvent object representing the mouse event that triggered the function.\n* `MouseEvent.getX()` and `MouseEvent.getY()`: The coordinates of the mouse event in the parent coordinate system.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid filtrer(MouseEvent event) {\n    produitFlowPane.setOpacity(0.5);\n    FilterAnchor.setVisible(true);\n    \n    // Nettoyer les listes des cases à cocher\n    addressCheckBoxes.clear();\n    statusCheckBoxes.clear();\n    \n    // Récupérer les adresses uniques depuis la base de données\n    List<String> categorie = getCategorie_Produit();\n    \n    // Créer des VBox pour les adresses\n    VBox addressCheckBoxesVBox = new VBox(5);\n    Label addressLabel = new Label(\"Category\");\n    addressLabel.setStyle(\"-fx-font-family: 'Arial Rounded MT Bold'; -fx-font-size: 14px;\");\n    addressCheckBoxesVBox.getChildren().add(addressLabel);\n    \n    for (String address : categorie) {\n        CheckBox checkBox = new CheckBox(address);\n        addressCheckBoxesVBox.getChildren().add(checkBox);\n        addressCheckBoxes.add(checkBox);\n    }\n    \n    addressCheckBoxesVBox.setLayoutX(25);\n    addressCheckBoxesVBox.setLayoutY(50);\n    \n    // Ajouter les VBox dans le FilterAnchor\n    FilterAnchor.getChildren().addAll(addressCheckBoxesVBox);\n    FilterAnchor.setVisible(true);\n}\n",
              "description": "\nThis code is an example of how the method filtrer would be used in JavaFX. When called, it sets the opacity of the produitFlowPane to 0.5 and makes the FilterAnchor visible. Then, it clears the addressCheckBoxes and statusCheckBoxes lists and retrieves a list of unique categories from the database using the getCategorie_Produit method. It creates a VBox for each category in the retrieved list and sets its layout position to 25, 50. Finally, it adds all of the created VBoxes to the FilterAnchor."
            },
            "name": "filtrer",
            "location": {
              "start": 1169,
              "insert": 1169,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 59,
            "docLength": null
          },
          {
            "id": "4b3a036d-bd4f-dba4-8c43-f242fd84da29",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Retrieves a list of category names from a database by mapping the categories to their respective names using the `getNom_categorie()` method.",
            "params": [],
            "returns": {
              "type_name": "ListString",
              "description": "a list of distinct category names obtained from the database.\n\nThe function returns a list of strings, where each string represents a category name.\nThe list contains all unique category names that were retrieved from the database using the `getAllCategories()` method.\nThe categories are obtained by calling the `map()` method on the list of `Produit` objects, which applies the `getCategorie().getNom_categorie()` method to each object and returns a stream of category names.\nThe `distinct()` method is then called on the stream to remove any duplicates, resulting in a list of unique category names.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "List<String> categories = getCategorie_Produit();\n\nfor (String category : categories) {\n    System.out.println(category);\n}\n",
              "description": "\nIn this example, the list of unique categories of products is retrieved from the database and then iterated over to print each one individually."
            },
            "name": "getCategorie_Produit",
            "location": {
              "start": 1231,
              "insert": 1231,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "20ca6787-b613-0d89-6045-de9b172dd394",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Filters a list of products based on selected categories, updates the visible state of an anchor and a flow pane, and updates the list of displayed products.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "an action event triggered by the user, which initiates the filtering process of products based on selected categories.\n\n* Type: ActionEvent\n* Target: Unknown (since it's not explicitly specified)\n* Code: Unknown (since it's not explicitly specified)",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    public void initialize() {\n        // Set up the produits flow pane and categories filter anchor\n        produitFlowPane.setOpacity(0);\n        FilterAnchor.setVisible(true);\n        updateCategoriesFilter();\n    }\n\n    @FXML\n    public void handleSelectAllCategorie() {\n        // Select all categories in the filter anchor\n        selectedCategories = getAllCategories().stream()\n                .map(Produit::getCategorie)\n                .collect(Collectors.toList());\n        updateFilteredProducts();\n    }\n    \n    @FXML\n    public void handleSelectNoCategorie() {\n        // Deselect all categories in the filter anchor\n        selectedCategories = Collections.emptyList();\n        updateFilteredProducts();\n    }\n\n    @FXML\n    public void handleSelectSingleCategorie(ActionEvent event) {\n        // Select a single category from the filter anchor\n        String categorieName = ((RadioButton)event.getSource()).getText().toLowerCase();\n        selectedCategories = Collections.singletonList(categorieName);\n        updateFilteredProducts();\n    }\n    \n    @FXML\n    public void handleSelectMultipleCategories() {\n        // Select multiple categories from the filter anchor\n        selectedCategories = getSelectedCategories();\n        updateFilteredProducts();\n    }\n    \n    @FXML\n    public void handleClearFilters(ActionEvent event) {\n        // Clear all filters on the produits flow pane\n        selectedCategories = Collections.emptyList();\n        updateFilteredProducts();\n    }\n\n    private List<Produit> getAllCategories() {\n        return new ArrayList<>(); // Return a list of all products in your application\n    }\n    \n    private List<String> getSelectedCategories() {\n        return FilterAnchor.getToggles().stream()\n                .filter(Toggle::isSelected)\n                .map(RadioButton::getText)\n                .collect(Collectors.toList());\n    }\n    \n    private void updateFilteredProducts() {\n        // Update the products flow pane with the filtered products based on the selected categories in the filter anchor\n        List<Produit> filteredProducts = getAllCategories().stream()\n                .filter(produit -> selectedCategories.contains(produit.getCategorie().getNom_categorie()))\n                .collect(Collectors.toList());\n        updateProduitFlowPane(filteredProducts);\n    }\n",
              "description": ""
            },
            "name": "filtercinema",
            "location": {
              "start": 1255,
              "insert": 1255,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 37,
            "docLength": null
          },
          {
            "id": "7cfc261a-5e2e-f68b-2c42-9afe05e5f89c",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Clears and re-adds a list of products to a flow pane, using a `VBox` container for each product.",
            "params": [
              {
                "name": "filteredProducts",
                "type_name": "List<Produit>",
                "description": "list of products that have been filtered based on user input, and it is used to populate the `produitFlowPane` with only the relevant products.\n\n* `filteredProducts`: A list of `Produit` objects that have been filtered based on some criteria.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "List<Produit> filteredProducts = new ArrayList<>();\n\nfilteredProducts.add(new Produit(\"Nom1\", \"Description1\", 10, \"image1\"));\nfilteredProducts.add(new Produit(\"Nom2\", \"Description2\", 5, \"image2\"));\n\nupdateProduitFlowPane(filteredProducts);\n",
              "description": "\nIn this example, filteredProducts is a list of produits with two elements in it. The method updateProduitFlowPane would add the two cardContainers (created from createProduitCard()) to the produitFlowPane.\n\nHowever, in order for the method to work correctly, some additional code would be needed. For example:\n"
            },
            "name": "updateProduitFlowPane",
            "location": {
              "start": 1295,
              "insert": 1295,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "ed4ee96c-ca0d-d589-5f4d-0f6b54ee23ee",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Retrieves a list of selected addresses from an `AnchorPane` component and filters them based on the selected state of CheckBoxes within the pane.",
            "params": [],
            "returns": {
              "type_name": "ListString",
              "description": "a list of selected category names.\n\n* The output is a list of strings (type `List<String>`).\n* The list contains the selected addresses from the `addressCheckBoxes` stream, where each address is represented by a string.\n* The addresses are filtered based on whether the corresponding CheckBox is selected or not using the `filter()` method.\n* The text of each selected CheckBox is mapped to a string using the `map()` method.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Controller {\n    private List<String> getSelectedCategories() {\n        // Récupérer les catégories sélectionnées dans l'AnchorPane de filtrage\n        return categoriesCheckBoxes.stream()\n            .filter(CheckBox::isSelected)\n            .map(CheckBox::getText)\n            .collect(Collectors.toList());\n    }\n}\n",
              "description": "\nIn this example, the getSelectedCategories method uses the stream API to iterate through the CheckBoxes in the categoriesCheckBoxes AnchorPane and filter the selected CheckBoxes using the isSelected property of each CheckBox instance. The map operation maps each CheckBox instance into its text property. Finally, the collect operation collects all the values returned by the map operation into a list using Collectors.toList method.\nThe getSelectedCategories method can be called from any other class that has access to the Controller instance. For example:\n"
            },
            "name": "getSelectedCategories",
            "location": {
              "start": 1313,
              "insert": 1313,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "88438508-9b01-b1bb-ba42-a20ba2713cd3",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Charges a new FXML interface, creates a new scene, and attaches it to a new stage, while also closing the current stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the function execution, providing the source of the event and allowing the code to determine the appropriate action to take.\n\n* It is an `ActionEvent`, indicating that it represents an action taken on the user interface.\n* The source of the event is a `Node`, which represents the element in the user interface that triggered the event.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void cinemaclient(ActionEvent event) {\n        try {\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/CommentaireProduit.fxml\"));\n            Parent root = loader.load();\n            Scene scene = new Scene(root);\n            Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n            Stage stage = new Stage();\n            stage.setScene(scene);\n            stage.setTitle(\"cinema \");\n            stage.show();\n            currentStage.close();\n        } catch (IOException e) {\n            e.printStackTrace(); // Gérer l'exception d'entrée/sortie\n        }\n    }\n",
              "description": "\nExplanation: This method is invoked when the user presses a button named \"cinemaclient\". This method then creates a new scene using FXMLLoader to load the CommentaireProduit.fxml file, and then creates a new stage using the scene just created. The title of the newly opened stage is set to \"cinema\", and the newly created stage is shown on screen. After that, the current stage (the one containing this button) is closed.\n\nNote: This example only includes the minimum necessary code to use the method, so it may not be the most efficient or functional version of the method."
            },
            "name": "cinemaclient",
            "location": {
              "start": 1329,
              "insert": 1329,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "7ab5774d-ed29-86a4-2341-d4e55597ecea",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Loads a new FXML interface, creates a new scene, and attaches it to a new stage when an event is triggered. The new stage replaces the current one, and the previous stage is closed.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the `eventClient()` method to be called, providing the necessary information for the method to perform its actions.\n\n* Event source: The object that generated the event, which is typically a button or other user interface element.\n* Event type: The type of event that was generated, such as a click or a key press.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.event.ActionEvent;\n\npublic class MyClass {\n    @FXML\n    void eventClient(ActionEvent event) {\n        try {\n            // Load the new interface PanierProduit.fxml\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/AffichageEvenementClient.fxml\"));\n            \n            Parent root = loader.load();\n            \n            // Create a new scene with the new interface\n            Scene scene = new Scene(root);\n            \n            // Obtain the current stage from the event\n            Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n            \n            // Create a new window (stage) and attach the scene\n            Stage stage = new Stage();\n            stage.setScene(scene);\n            stage.setTitle(\"Event \");\n            stage.show();\n            \n            // Close the current window\n            currentStage.close();\n        } catch (IOException e) {\n            e.printStackTrace(); // Handle I/O exception\n        }\n    }\n}\n",
              "description": "\nIn this example, the method is called eventClient. It takes a single parameter of type ActionEvent. When this method is called, it attempts to load the PanierProduit.fxml interface file using FXMLLoader. This object contains a load() method that creates a new scene with the loaded interface, and then creates a new stage (window) and attaches that scene to it. Finally, it closes the current window."
            },
            "name": "eventClient",
            "location": {
              "start": 1383,
              "insert": 1383,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "a54aaec8-ee0c-359e-374e-ab4b584404ec",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Loads a new FXML file, creates a new scene and stage, and replaces the current stage with the new one.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the function execution and provides access to the source element that caused the event, which in this case is an button click.\n\n* `event`: This represents an action event that occurred in the application. It provides information about the source of the event and its associated actions.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "// Handle the Button click event\nproduitClientButton.setOnAction(e -> {\n    // Create a new FXMLLoader with the location of the PanierProduit.fxml file\n    FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/AfficherProduitClient.fxml\"));\n    \n    try {\n        // Load the FXML document and get the root element\n        Parent root = (Parent) loader.load();\n        \n        // Get the current Stage\n        Stage stage = (Stage) produitClientButton.getScene().getWindow();\n        \n        // Set the scene on the stage\n        stage.setScene(new Scene(root));\n    } catch (IOException ex) {\n        Logger.getLogger(AfficherProduitController.class.getName()).log(Level.SEVERE, null, ex);\n    }\n});\n",
              "description": "\nThe example above creates a new FXMLLoader object and sets the location of the PanierProduit.fxml file as the source of the new Scene. It then gets the current Stage and sets the newly created scene on it. When the button is clicked, the method produitClientButton.setOnAction() is called, which creates a new FXMLLoader object with the location of the AfficherProduitClient.fxml file as the source of the new Scene and gets the current Stage to set the newly created scene on it."
            },
            "name": "produitClient",
            "location": {
              "start": 1437,
              "insert": 1437,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "d93cab00-d7e2-bea1-c14e-b62a846364ab",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Likely profiles a client application, possibly collecting data on its performance or behavior.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "occurrence of an action event that triggered the execution of the `profilclient` function.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "// When the user clicks the button, this event will be triggered\n@FXML\nvoid profilclient(ActionEvent event) {\n    // The following code will run when the user presses the button\n}\n",
              "description": "\nThe example above shows the minimum amount of code that is required to use the profilclient method. The only input required for this method is an ActionEvent object which is automatically provided by the FXML framework. The method can be called in response to any event triggered by a mouse or keyboard input, such as pressing a button.\n\nIt's important to note that the code inside the method will only run when the user clicks on the specified button. The example above is just one of many possible ways to use this method, depending on how you want to structure your program."
            },
            "name": "profilclient",
            "location": {
              "start": 1491,
              "insert": 1491,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "e937abdb-e45f-f88b-5c4a-5cb8caa46626",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Loads a new FXML interface using `FXMLLoader`, creates a new scene with it, and attaches the scene to a new stage. It also closes the current stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the function execution, providing the source of the event and allowing the code to access the relevant information related to the event.\n\n* It is an `ActionEvent` representing a user interaction with the application.\n* The source of the event is the `FXMLLoader` instance that loaded the `filmuser.fxml` file.\n* The event provides access to the stage and scene associated with the event, which are used to create a new window and replace the current one.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void movieClient(ActionEvent event) {\n        try {\n            // Load the new interface PanierProduit.fxml\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/filmuser.fxml\"));\n            Parent root = loader.load();\n            \n            // Create a new scene with the new interface\n            Scene scene = new Scene(root);\n            \n            // Obtain the current stage from the event\n            Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n            \n            // Create a new window (stage) and attach the scene\n            Stage stage = new Stage();\n            stage.setScene(scene);\n            stage.setTitle(\"movie \");\n            stage.show();\n            \n            // Close the current stage\n            currentStage.close();\n        } catch (IOException e) {\n            e.printStackTrace(); // Handle I/O exceptions\n        }\n    }\n",
              "description": "\nThis code is a very short version of how the MovieClient method would be used in the given example. It loads a new interface called filmuser.fxml, creates a new scene from that interface and attaches it to a new window (stage) and sets the title of the stage to \"movie\". The current stage is then closed. This code will work correctly as long as the event parameter is an instance of ActionEvent, which is a common input for JavaFX methods."
            },
            "name": "MovieClient",
            "location": {
              "start": 1501,
              "insert": 1501,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 49,
            "docLength": null
          },
          {
            "id": "70ef32f0-369a-7dab-0044-9d10781ca04e",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Loads a new FXML interface, creates a new scene with it, and attaches the scene to a new stage, while closing the current stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the function execution, providing information about the source of the event and allowing the code to handle the appropriate action.\n\n* It is an `ActionEvent` object representing a user action that triggered the function execution.\n* The source of the event is typically a button or other widget in the user interface.\n* The event may carry additional information such as the ID of the button pressed, the modifiers used, and so on.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void SerieClient(ActionEvent event) {\n        try {\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/Series-view.fxml\"));\n            Parent root = loader.load();\n            \n            Scene scene = new Scene(root);\n            \n            Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n            \n            Stage stage = new Stage();\n            stage.setScene(scene);\n            stage.setTitle(\"Series \");\n            stage.show();\n            \n            currentStage.close();\n        } catch (IOException e) {\n            e.printStackTrace(); // Gérer l'exception d'entrée/sortie\n        }\n    }\n}\n",
              "description": "\nThis method is triggered by a button click in the user interface, and it loads the new FXML file `Series-view.fxml`. The method closes the current window (stage) and creates a new stage with the new scene."
            },
            "name": "SerieClient",
            "location": {
              "start": 1553,
              "insert": 1553,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "c7c1db79-fd50-9ab6-3747-fe4216b1c5b8",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Allows users to input a comment on a product, checks for bad words and prevents further processing if found. If no bad words are detected, it creates a new `Commentaire` object with the client information and product ID, and adds it to the database using the `CommentaireService`.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void addCommentaire() {\n        // Get the user input from text area and check for bad words before proceeding\n        String userMessage = txtAreaComments.getText();\n        \n        System.out.println(\"User Message: \" + userMessage);\n        \n        // Check for bad words and prevent further processing if found\n        String badwordDetection = chat.badword(userMessage);\n        \n        System.out.println(\"Badword Detection Result: \" + badwordDetection);\n        \n        // If the message contains any bad words, display a warning to the user and do not continue\n        if (badwordDetection.equals(\"1\")) {\n            Alert alert = new Alert(Alert.AlertType.WARNING);\n            alert.setTitle(\"Commentaire non valide\");\n            alert.setContentText(\"Votre commentaire contient des gros mots et ne peut pas être publié.\");\n            alert.showAndWait();\n        } \n        // If the message does not contain any bad words, create a new Commentaire object and add it to the database using the ProduitService and CommentaireService objects\n        else {\n            Client client = (Client) txtAreaComments.getScene().getWindow().getUserData();\n            \n            Commentaire commentaire = new Commentaire(client, userMessage, produitService.getProduitById(produitId));\n            \n            CommentaireService commentaireService = new CommentaireService();\n            \n            // Ajoutez le commentaire à la base de données\n            commentaireService.create(commentaire);\n        }\n    }\n",
              "description": "\nThis example uses the following imports:\n"
            },
            "name": "addCommentaire",
            "location": {
              "start": 1607,
              "insert": 1607,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 53,
            "docLength": null
          },
          {
            "id": "080abd9e-98f8-83aa-e24f-79a62e264bd6",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Retrieves all comments for a given product ID, filters them to keep only those related to the specified cinema, and returns the filtered list of comments.",
            "params": [
              {
                "name": "idproduit",
                "type_name": "int",
                "description": "id of the product for which the comments are to be filtered and returned.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ListCommentaire",
              "description": "a list of commentaries filtered based on the product ID.\n\n* The `List<Commentaire>` returned represents all comments for a specific product with the provided ID.\n* The list contains `Commentaire` objects that have been filtered based on the product ID.\n* Each `Commentaire` object in the list has a `Produit` field with the ID of the matching product.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Controller {\n    @FXML\n    private TextArea comments;\n    @FXML\n    private Button showComments;\n\n    public void initialize() {\n        // ... other initializations\n\n        showComments.setOnAction(event -> {\n            int idproduit = 123; // some ID of a movie\n            List<Commentaire> comments = getAllComment(idproduit);\n            StringBuilder sb = new StringBuilder();\n            for (Commentaire comment : comments) {\n                sb.append(comment.getDescription());\n                sb.append(\"\\n\");\n            }\n            comments.setText(sb.toString());\n        });\n    }\n}\n",
              "description": ""
            },
            "name": "getAllComment",
            "location": {
              "start": 1663,
              "insert": 1663,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 27,
            "docLength": null
          },
          {
            "id": "37e5010d-ceb2-57ab-e441-a26c3b6d8636",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Retrieves and displays all comments associated with a product ID using a `VBox` container to hold the comment views and a `getChildren()` method to add them.",
            "params": [
              {
                "name": "idproduit",
                "type_name": "int",
                "description": "product ID used to retrieve all comments associated with it.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "int idproduit = 1; // Replace with a real product ID from the database\ndisplayAllComments(idproduit);\n",
              "description": "\nThis would retrieve all comments related to the specified product, and display them in a vertical box."
            },
            "name": "displayAllComments",
            "location": {
              "start": 1693,
              "insert": 1693,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "1ebc7404-bd8f-b6ae-6d44-e95456deba7c",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Adds a new comment to an item and displays all comments for that item upon button click.",
            "params": [
              {
                "name": "event",
                "type_name": "MouseEvent",
                "description": "mouse event that triggered the `AddComment` method, providing the context for the comment creation and display.\n\n* `MouseEvent event`: This parameter represents an event object that contains information about the mouse action that triggered the function. Specifically, it provides details on the button pressed (left or right), the location of the click within the parent container, and the state of other buttons.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid addCommentaire() {\n    // Creating a new Comment object to be added to the database.\n    Comment comment = new Comment();\n    \n    // Getting the content of the text field where the user will input their comment.\n    String commentContent = commentaireTextField.getText();\n    \n    // Setting the content for the new comment in the object.\n    comment.setContent(commentContent);\n    \n    // Creating a new instance of the CommentDAO class to interact with the database.\n    CommentDAO commentDao = new CommentDAOImpl();\n    \n    // Setting the userId of the newly created comment for the current logged in user.\n    comment.setUserId(1);\n    \n    // Adding the new comment object to the database.\n    commentDao.addComment(comment);\n}\n",
              "description": "\nThis code creates a new Comment object, gets the content of the text field where the user will input their comment, sets the content for the new comment object and adds it to the database using an instance of the CommentDAO class.  The method then returns nothing as its purpose is to add data to the database rather than returning any information back to the caller.\n\nPlease let me know if you need further clarification or have any questions about this code."
            },
            "name": "AddComment",
            "location": {
              "start": 1717,
              "insert": 1717,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "e5472dc3-c508-6c9d-ae4f-cc5e30e21f06",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Adds an comment to a view by creating an image view with the user's profile picture, adding it to a container with an image circle and a card for the comment, and then adding the container to the ScrollPane.",
            "params": [
              {
                "name": "commentaire",
                "type_name": "Commentaire",
                "description": "Commentaire object containing information about the user's comment, including the client's name and the comment text.\n\n* `client`: The client who made the comment (a `CommentaireClient`)\n* `photo_de_profil`: The image URL of the user who made the comment (a `String`)",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HBox",
              "description": "a HBox container containing an ImageView, a Group of images and text, and a VBox for the comment text.\n\n1. `HBox contentContainer`: This is the container that holds the image and the text of the comment. It has a prefheight of 50 pixels to set the maximum height of the container.\n2. `imageBox`: This is the group containing the image of the user and the image view.\n3. `cardContainer`: This is the group containing the text box with the name of the user and the comment, as well as any additional children added to it.\n4. `textBox`: This is the VBox that contains the text box with the name of the user and the comment.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// Creating a commentaire object with some dummy values\nCommentaire commentaire = new Commentaire();\ncommentaire.setClient(new Utilisateur());\ncommentaire.getClient().setFirstName(\"John\");\ncommentaire.getClient().setLastName(\"Doe\");\ncommentaire.setCommentaire(\"This is a comment.\");\n// Calling the method to add the commentaire to view\naddCommentToView(commentaire);\n",
              "description": ""
            },
            "name": "addCommentToView",
            "location": {
              "start": 1733,
              "insert": 1733,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 133,
            "docLength": null
          },
          {
            "id": "4a060492-d5ff-198d-5f47-de61589d90ce",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Sets the opacity and visibility of a `FlowPane` component to control its appearance and accessibility.",
            "params": [
              {
                "name": "mouseEvent",
                "type_name": "MouseEvent",
                "description": "MouseEvent object that triggered the `Close` method.\n\n* The `mouseEvent` instance represents an event triggered by a mouse action, such as a click or a drag.\n* It contains information about the event, including the location of the event on the screen and the type of event that occurred.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public void Close(MouseEvent mouseEvent) {\n    produitFlowPane.setOpacity(1);\n    produitFlowPane.setVisible(true);\n    AnchorComments.setVisible(false);\n}\n",
              "description": "\nThis code is a simple implementation of the method `Close` that takes a `MouseEvent` as an argument, which in this case is simply ignored. The method then sets the visibility of the `produitFlowPane` and `AnchorComments` to true and false respectively, effectively hiding them from view. This is a minimal example as there are no checks for null or exceptions being thrown.\n\nNote: This code will not work correctly without a complete implementation of the method `Close`. It is only an example of how it would be called."
            },
            "name": "Close",
            "location": {
              "start": 1869,
              "insert": 1869,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "b6d43e5d-c892-dc82-1e40-3bbe6af0664b",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Sets the opacity and visibility of a `FlowPane` and its child elements, and hides an `Anchor` element.",
            "params": [
              {
                "name": "mouseEvent",
                "type_name": "MouseEvent",
                "description": "mouse event that triggered the `CloseFilter()` method, providing information about the location and nature of the event.\n\n* `mouseEvent`: The event object representing the mouse action that triggered the function.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        ProduitFlowPane produitFlowPane = new ProduitFlowPane();\n        produitFlowPane.CloseFilter(new MouseEvent());\n    }\n}\n",
              "description": "\nExplanation:\nThe method CloseFilter is used to close the filter panel of a Product Flow Pane. It takes in a single argument, which is a mouse event. The mouse event is not actually used in this example as it's not necessary to pass an actual mouse event into the method. Instead, an instance of MouseEvent is created and passed into the method as an argument.\n\nThe code for CloseFilter can be broken down into several parts:\n1. produitFlowPane.setOpacity(1); - This sets the opacity of the product flow pane to 1.\n2. produitFlowPane.setVisible(true); - This sets the visibility of the product flow pane to true, which means it will be visible on the screen.\n3. FilterAnchor.setVisible(false); - This sets the visibility of the anchor for the filter panel to false, which means the filter panel will not be visible on the screen.\n\nIn summary, this method is used to close the filter panel of a Product Flow Pane and make it invisible on the screen."
            },
            "name": "CloseFilter",
            "location": {
              "start": 1887,
              "insert": 1887,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "6b9d907e-7d15-5593-634c-9617bb48ed65",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Retrieves and displays the top 3 products with the highest quantity and status from a service, creating a VBox for each product and adding it to a parent container.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class MyClass {\n    private final VBox topthreeVbox = new VBox();\n\n    public void showTopThree() {\n        loadAcceptedTop3(topthreeVbox);\n    }\n}\n",
              "description": "\nThe method showTopThree creates an instance of the VBox and passes it to loadAcceptedTop3. This way, loadAcceptedTop3 can modify the content of topthreeVbox by adding a new child element for each Produit in the list of accepted products."
            },
            "name": "loadAcceptedTop3",
            "location": {
              "start": 1905,
              "insert": 1905,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 53,
            "docLength": null
          },
          {
            "id": "90934ac0-8be4-e8b0-6848-350ff58bcfbb",
            "ancestors": [
              "bce42ef3-83a5-3cba-8842-41c8ae9f95bd"
            ],
            "type": "function",
            "description": "Generates a `VBox` container with three components: an image view, a label with the product name, and a label with the price. The image view displays an image of the product, while the labels display the product name and price.",
            "params": [
              {
                "name": "produit",
                "type_name": "Produit",
                "description": "`Produit` object that contains information about the product to be displayed, including its name, image, and price.\n\n* `nom`: the product name\n* `image`: the image URL or a default image if null\n* `prix`: the product price in DT (Djibouti Francs)",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "javafxscenelayoutVBox",
              "description": "a `VBox` container with three elements: an image, a product name, and a price label.\n\n1. `cardContainer`: This is the top-level container for the three components that make up the card. It has a style class of `-fx-padding: 20px 0 0 30px;` which adds left padding to the container.\n2. `imageView`: This is an `ImageView` component that displays the image of the product. The image view has a layoutX of 5 and a layoutY of 21, and its fit width and height are set to 50. It also has an OnMouseClicked event listener that triggers when the image is clicked.\n3. `nameLabel`: This is a `Label` component that displays the name of the product. The label has a font size of 15 and a style class of `-fx-text-fill: #333333;`, which sets the text fill color to black. It also has a layoutX of 60 and a layoutY of 25.\n4. `priceLabel`: This is another `Label` component that displays the price of the product. The label has a font size of 14 and a style class of `-fx-text-fill: black;`, which sets the text fill color to black. It also has a layoutX of 60 and a layoutY of 55.\n\nIn summary, the `createtopthree` function returns a container with three components – an image view, a label for the product name, and another label for the price – with specific properties and attributes set to display the information about the product.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Main extends Application {\n    public static void main(String[] args) {\n        launch(args);\n    }\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n        Produit produit = new Produit();\n\n        produit.setId_produit(\"1\");\n\n        produit.setNom(\"Produit\");\n\n        produit.setPrix(\"20 DT\");\n\n        VBox cardContainer = createtopthree(produit);\n\n        Scene scene = new Scene(cardContainer, 640, 480);\n\n        primaryStage.setScene(scene);\n\n        primaryStage.show();\n    }\n}\n",
              "description": "\nThis code creates a Produit instance and passes it to the createtopthree method, which returns a VBox containing the cardContainer with the produit's name, price, and image. The cardContainer is then added to the scene in the start method of the Main class."
            },
            "name": "createtopthree",
            "location": {
              "start": 1961,
              "insert": 1961,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 219,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "AnalyseCommande.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/produits/AnalyseCommande.java",
    "content": {
      "structured": {
        "description": "an interactive dashboard in JavaFX that displays the number of orders per day and per category for a fictional online store. It uses the JavaFX packages, such as `javafx.application`, `javafx.collections`, and `javafx.scene.chart`, to create a bar chart showing the number of orders over time. The code first defines a list of categories and products, then loops through each day in a given date range and calculates the number of orders for each category and product. It then creates a stacked bar chart showing the total number of orders per category and day, and adds data series to the chart for each category. Finally, it adds labels and titles to the chart to make it more readable.",
        "items": [
          {
            "id": "12f8ca7b-3b81-698d-944f-574144f3b73e",
            "ancestors": [],
            "type": "function",
            "description": "Is used to analyze the number of orders placed by date and categorize them based on the products purchased. It updates two graphical representations: TauxCommande (number of orders per date) and TauxCategorie (number of categories purchased per date). The class retrieves data from various sources, including a list of all orders, a list of all products, and a list of all categories. It then processes the data to create the graphs and displays them on the screen.",
            "name": "AnalyseCommande",
            "location": {
              "start": 47,
              "insert": 47,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 267,
            "docLength": null
          },
          {
            "id": "280675d8-52a8-88ae-2f4f-bf7d884a43ab",
            "ancestors": [
              "12f8ca7b-3b81-698d-944f-574144f3b73e"
            ],
            "type": "function",
            "description": "Is responsible for calling the initialization logic, which in turn updates the graphs.",
            "params": [
              {
                "name": "location",
                "type_name": "URL",
                "description": "URL of the initial graph layout, which is passed to the `updateGraphs()` method for initialization.",
                "complex_type": false
              },
              {
                "name": "resources",
                "type_name": "ResourceBundle",
                "description": "resource bundle that provides localized strings and values for the application.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\n\n    public void initialize(URL location, ResourceBundle resources) {\n\n        // Appeler la logique d'initialisation\n\n        updateGraphs();\n\n    }\n",
              "description": "\nIn this example, the `initialize` method is being overridden in the class that implements the interface. The method takes two parameters, a `location`, and a `ResourceBundle`. This method would then call the `updateGraphs()` method to initialize the graphical representation of data."
            },
            "name": "initialize",
            "location": {
              "start": 85,
              "insert": 77,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 76,
                "end": 83
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 7
          },
          {
            "id": "cbcd8ff0-0b82-77b9-2347-f08d860c5e3c",
            "ancestors": [
              "12f8ca7b-3b81-698d-944f-574144f3b73e"
            ],
            "type": "function",
            "description": "Updates a bar graph and a stacked bar chart with the number of orders, payments, and categories purchased by date. It retrieves data from a database and calculates the number of orders and payments for each category by date.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "private void handleButtonAction() {\n\n    // Mettre à jour les graphiques ici\n\n    TauxCommande.getData().clear();\n\n    TauxCategorie.getData().clear();\n\n\n\n    CommandeService commandeService = new CommandeService();\n\n    List<Commande> commandes = commandeService.read();\n\n\n\n    CommandeItemService commandeItemService = new CommandeItemService();\n\n    List<CommandeItem> commandeItems = commandeItemService.read();\n\n\n\n    CategorieService categorieService = new CategorieService();\n\n    List<Categorie_Produit> categories = categorieService.read();\n\n\n\n    Map<String, Integer> enCoursByDate = new HashMap<>();\n\n    Map<String, Integer> payeeByDate = new HashMap<>();\n\n    Map<String, Map<String, Integer>> categoriesAchatsByDate = new HashMap<>();\n\n    Map<String, XYChart.Series<String, Number>> seriesMap = new HashMap<>();\n\n\n\n    // Remplir les maps avec toutes les dates possibles\n\n    for (Commande commande : commandes) {\n\n        Date dateCommande = commande.getDateCommande();\n\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n\n        String formattedDate = dateFormat.format(dateCommande);\n\n\n\n        enCoursByDate.put(formattedDate, 0);\n\n        payedByDate.put(formattedDate, 0);\n\n    }\n\n\n    // Parcourir les dates et ajouter les données aux séries\n\n    for (Map.Entry<String, Map<String, Integer>> entry : categoriesAchatsByDate.entrySet()) {\n\n        String date = entry.getKey();\n\n\n        for (Map.Entry<String, Integer> categorieEntry : entry.getValue().entrySet()) {\n\n            String category = categorieEntry.getKey();\n\n            int numberOfAchats = categorieEntry.getValue();\n\n\n            seriesMap.get(category).getData().add(new XYChart.Data<>(date, numberOfAchats));\n\n        }\n\n    }\n\n\n    // Afficher les séries sur le graphique\n\n    ObservableList<XYChart.Series<String, Number>> seriesList = FXCollections.observableArrayList(seriesMap.values());\n\n    TauxCategories.getData().addAll(seriesList);\n\n\n    // Configuration des axes\n\n    xAxis.setCategories(FXCollections.observableArrayList(categoriesAchatsByDate.keySet()));\n\n    TauxCategories.getXAxis().setLabel(\"Date de commande\");\n\n    TauxCategories.getYAxis().setLabel(\"Nombre d'achats\");\n\n    TauxCategories.setTitle(\"Nombre de catégories achetées par date\");\n\n}\n",
              "description": "\nNote that the method updateGraphs should be called inside a button action, in order to update the graphic when it is pressed. Also, the data for the graphic should be cleared before updating it."
            },
            "name": "updateGraphs",
            "location": {
              "start": 97,
              "insert": 97,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 215,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "CommandeClientController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/produits/CommandeClientController.java",
    "content": {
      "structured": {
        "description": "An interactive system for a media player application, allowing users to access various features such as movies, series, and producers through a user-friendly interface. It utilizes JavaFX libraries and provides various functionalities, including event handling, loading new interfaces, and creating new stages with attached scenes. The code also includes error handling mechanisms to handle exceptions and IOExceptions.",
        "items": [
          {
            "id": "f6a57d3f-5db4-71a6-234b-446cad37d1d7",
            "ancestors": [],
            "type": "function",
            "description": "Is responsible for handling user commands related to the cinema and event modules. It provides an interface for loading new fxml files based on user actions, such as showing a movie or an event. The controller also handles closing the current stage and displaying a new one. Additionally, it includes methods for handling Movie and Serie client interactions.",
            "name": "CommandeClientController",
            "location": {
              "start": 97,
              "insert": 97,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 985,
            "docLength": null
          },
          {
            "id": "f704f1a6-50a9-6aa7-bd42-f248ddebbca6",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Sets the value of a `Commande` object and runs a lambda action to retrieve and print the user's name, then creates a label with the total price and adds it to a `FlowPane`.",
            "params": [
              {
                "name": "commandeselectionner",
                "type_name": "Commande",
                "description": "selected command that triggers the function to execute, which is used to retrieve the total price from SharedData and create a label displaying the result.\n\n`commandeselectionner`: An instance of `Commande`, representing the selected command.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.fxml.FXML;\nimport javafx.scene.control.Label;\n\npublic class Example {\n    @FXML private Label totalPrix;\n    @FXML private Command commande;\n    \n    public void initialize() {\n        // Récupérer le prix total depuis SharedData et créer le Label correspondant\n        Label prixTotalLabel = createPrixTotalLabel(totalPrix);\n        \n        // Ajouter le Label au FlowPane\n        prixtotaleFlowPane.getChildren().add(prixTotalLabel);\n    }\n    \n    private Label createPrixTotalLabel(String totalPrix) {\n        return new Label(\"Total: \" + totalPrix);\n    }\n}\n",
              "description": "\nIn this example, the method `initialize` is called during the initialization of the FXML file. The method takes no arguments and has no return type. In the body of the method, it first retrieves a reference to a `Label` element named `totalPrix` from the FXML file, and then it creates a new `Label` element with the price total value as its text. This label is then added to the `FlowPane` in the FXML file.\n\nThe method `createPrixTotalLabel` takes a single argument of type `String`, which represents the price total value. It returns an instance of the `Label` class with the provided price total value as its text.\n\nIn the above example, the `totalPrix` element is defined in the FXML file and is set to the value \"100\". When this method runs, it will create a new `Label` element with the text \"Total: 100\" and add it to the `prixtotaleFlowPane`. This allows the price total to be displayed on the screen.\n\nNote that this is just an example and the actual implementation of the `initialize` method would depend on the specific requirements of the application, such as whether a different element in the FXML file needs to be used for displaying the price total or whether it is necessary to perform any additional operations to set up the scene."
            },
            "name": "initialize",
            "location": {
              "start": 155,
              "insert": 149,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 148,
                "end": 153
              }
            },
            "item_type": "method",
            "length": 43,
            "docLength": 5
          },
          {
            "id": "dbf11faa-6dd3-7a89-8b42-8bf07cc98330",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7",
              "f704f1a6-50a9-6aa7-bd42-f248ddebbca6"
            ],
            "type": "function",
            "description": "Retrieves and prints the connected user's data to the console.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "import java.util.concurrent.Executor;\nimport javafx.application.Platform;\nimport javafx.scene.control.Button;\nimport javafx.scene.layout.FlowPane;\n\npublic class ButtonController {\n    @FXML private FlowPane prixtotaleFlowPane;\n    @FXML private Button button1;\n    @FXML private Button button2;\n    @FXML private Button button3;\n    @FXML private Button button4;\n    \n    @Override\n    public void initialize() {\n        // Initialize the buttons.\n        button1 = new Button(\"Button 1\");\n        button2 = new Button(\"Button 2\");\n        button3 = new Button(\"Button 3\");\n        button4 = new Button(\"Button 4\");\n        \n        // Add the buttons to the FlowPane.\n        prixtotaleFlowPane.getChildren().add(button1);\n        prixtotaleFlowPane.getChildren().add(button2);\n        prixtotaleFlowPane.getChildren().add(button3);\n        prixtotaleFlowPane.getChildren().add(button4);\n    }\n    \n    @FXML\n    private void handleButtonAction() {\n        Executor executor = (Executor) prixtotaleFlowPane.getScene().getWindow().getUserData();\n        \n        // Run the method in a separate thread.\n        executor.execute(() -> run());\n    }\n    \n    @Override\n    public void run() {\n        connectedUser = (Client)  prixtotaleFlowPane.getScene().getWindow().getUserData();\n        \n        System.out.println(\"produits:    user:  \" + connectedUser);\n    }\n}\n",
              "description": ""
            },
            "name": "run",
            "location": {
              "start": 165,
              "insert": 165,
              "offset": " ",
              "indent": 20,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "a1ab9ad3-ad8a-7cab-ea4b-86a3d9108139",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Is called when an URL and a resource bundle are provided to initialize the application. It sets up the resources and prepares the application for usage.",
            "params": [
              {
                "name": "url",
                "type_name": "URL",
                "description": "URL of the web application being initialized by the `initialize()` method.",
                "complex_type": false
              },
              {
                "name": "resourceBundle",
                "type_name": "ResourceBundle",
                "description": "collection of translated keys and their corresponding values",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "import java.net.*;\nimport java.util.ResourceBundle;\n\npublic class Main extends Application {\n    @Override\n    public void start(Stage primaryStage) throws Exception{\n        Parent root = FXMLLoader.load(getClass().getResource(\"sample.fxml\"));\n        primaryStage.setTitle(\"Hello World\");\n        primaryStage.setScene(new Scene(root, 300, 275));\n        primaryStage.show();\n    }\n}\n",
              "description": "\nThe Main class extends the Application class and uses a FXMLLoader to load an FXML file. The sample.fxml file contains the layout of the UI. In the start method, the root node is set as the scene's root node using the Scene constructor. Then, the stage's title is set, the stage is shown using the show() method, and the primaryStage object is returned. The code works correctly because all necessary parameters are passed to the start() method.\n\nThe following is an example of how to use this Java method:\n"
            },
            "name": "initialize",
            "location": {
              "start": 211,
              "insert": 203,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 202,
                "end": 209
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 7
          },
          {
            "id": "2f6e2d1f-781f-438c-de4f-a17c9376b24d",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Creates a new `Label` component with a double value as its text and sets various styling properties to display the number in a specific format.",
            "params": [
              {
                "name": "prixTotal",
                "type_name": "double",
                "description": "total price of an item, which is used to create a label with the value displayed.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Label",
              "description": "a label displaying the price total in bold font with a specific color.\n\n* The output is a `Label` object named `prixTotalLabel`.\n* The label's text value is the sum of `prixTotal` and \"DT\".\n* The font of the label is set to Verdana with a size of 25.\n* The text fill color of the label is set to #d72222.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Controller {\n    @FXML private Label prixTotalLabel;\n    private double prixTotal = 0;\n\n    public void initialize() {\n        prixTotalLabel.setText(createPrixTotalLabel(prixTotal).getText());\n    }\n}\n",
              "description": "\nExplanation:\nThe method createPrixTotalLabel is used to create a Label that displays the total price of all items in the shopping cart. The method takes a single argument, 'prixTotal', which is a double representing the total price.\n\nIn the Controller class' initialize() method, the method createPrixTotalLabel is called with an argument of 0, which represents the total price of all items in the shopping cart. The method creates a Label that displays the text \"0 DT\" and sets its font and style to Verdana, size 25 and #d72222 respectively.\n\nThe resulting label is then set as the text for the prixTotalLabel in the Controller class."
            },
            "name": "createPrixTotalLabel",
            "location": {
              "start": 221,
              "insert": 221,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "9ef35d0b-4dba-efbd-1146-e5b6609ae83d",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Validates input fields, creates a new command object, and calls a service method to create the command in the database. It then iterates through each item in the command and creates a new item object, updates the inventory of the product, and sets the payment line visible.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "action event triggered by clicking on the \"Order\" button, which initiates the processing of the command and calls the various methods to create and update objects and database records.\n\n* `event`: an ActionEvent object representing the user's action of clicking on the \"Order\" button.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    void order(ActionEvent event) {\n\n        CommandeItemService commandeItemService = new CommandeItemService();\n\n        int idcommande = 0;\n\n\n\n        // Validation du numéro de téléphone\n\n        String numTelephone = numTelephoneTextField.getText();\n\n        if (!isValidPhoneNumber(numTelephone)) {\n\n            showAlert(\"Erreur de validation\", \"Numéro de téléphone invalide.\");\n\n            return; // Arrêter le traitement de la commande\n\n        }\n\n\n\n        // Validation de l'adresse\n\n        String adresse = adresseTextField.getText();\n\n        if (adresse.isEmpty()) {\n\n            showAlert(\"Erreur de validation\", \"L'adresse ne peut pas être vide.\");\n\n            return; // Arrêter le traitement de la commande\n\n        }\n\n\n\n        commande.setAdresse(adresseTextField.getText());\n\n        commande.setNum_telephone(Integer.parseInt(numTelephoneTextField.getText()));\n\n        commande.setIdClient((Client) connectedUser);\n\n        LocalDate date1 = LocalDate.now();\n\n        commande.setDateCommande(java.sql.Date.valueOf(date1));\n\n        try {\n\n            idcommande = commandeService.createcommande(commande);\n\n            commande.setIdCommande(idcommande);\n\n        } catch (SQLException e) {\n\n            throw new RuntimeException(e);\n\n        }\n\n        for (CommandeItem commandeItem : commande.getCommandeItem()) {\n\n            System.out.println(commande.getIdCommande());\n\n            commandeItem.setCommande(commande);\n\n\n\n            commandeItemService.create(commandeItem);\n\n            decrementStock(commandeItem.getProduit(), commandeItem.getQuantity());\n\n            idpaymentenligne.setVisible(true);\n\n\n\n        }\n\n    }\n",
              "description": "\nHere is an example of how the method would be used:\n"
            },
            "name": "order",
            "location": {
              "start": 235,
              "insert": 235,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 79,
            "docLength": null
          },
          {
            "id": "52e1843d-7df8-7691-704d-d53bb028c12d",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Creates an `Alert` object with specified title and content, then displays it using the `showAndWait()` method.",
            "params": [
              {
                "name": "title",
                "type_name": "String",
                "description": "title of an alert message displayed by the `showAlert()` method.",
                "complex_type": false
              },
              {
                "name": "content",
                "type_name": "String",
                "description": "text to be displayed in the alert window.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "showAlert(\"Error\", \"Could not save data to the database\");\n",
              "description": "\nThis is a simple method that creates an Alert object with the specified title and content. The method then calls showAndWait() on the alert object, which displays it as a modal dialog box and waits for the user to acknowledge or dismiss it before resuming execution of the calling code. In this example, the title \"Error\" is used to indicate that an error has occurred, and the content \"Could not save data to the database\" provides more detailed information about what went wrong. The Alert object created by this method would be displayed as a modal dialog box with a message indicating that there was an error while saving data to the database."
            },
            "name": "showAlert",
            "location": {
              "start": 317,
              "insert": 317,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "910dc780-862c-b4bd-a944-ed4ffb454f06",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Verifies if a given string represents a valid phone number with exactly 8 digits and only containing numbers.",
            "params": [
              {
                "name": "phoneNumber",
                "type_name": "String",
                "description": "8-digit phone number to be validated for its correct format, consisting only of digits.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Boolean",
              "description": "a boolean value indicating whether the provided string represents a valid phone number.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n    String phoneNumber = \"123456789\";\n    \n    if (isValidPhoneNumber(phoneNumber)) {\n        System.out.println(\"This is a valid phone number\");\n    } else {\n        System.out.println(\"This is an invalid phone number\");\n    }\n}\n",
              "description": ""
            },
            "name": "isValidPhoneNumber",
            "location": {
              "start": 333,
              "insert": 333,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "e6664c23-5ea7-b18a-3748-e221adab850a",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Decrements the stock of a product in the database by subtracting the specified quantity from the product's current quantity, and updates the product record in the database using an instance of `ProduitService`.",
            "params": [
              {
                "name": "produit",
                "type_name": "Produit",
                "description": "product object whose stock is being decremented.\n\n* `produit`: A `Produit` object representing a product.\n* `quantity`: An integer representing the quantity of the product to be decremented.",
                "complex_type": true
              },
              {
                "name": "quantity",
                "type_name": "int",
                "description": "amount of stock to be decremented from the product's current quantity in the database.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "ProduitService produitService = new ProduitService();\n\nproduitService.findByCode(\"12345\"); // This returns a Produit object, which we will call 'produit'\n\nint quantity = 1;\n\ndecrementStock(produit, quantity); // We are decrementing the stock of produit by 1\n",
              "description": "\nHere is an example code for how to use the decrementStock method in a unit test:\n"
            },
            "name": "decrementStock",
            "location": {
              "start": 345,
              "insert": 345,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "b49e1532-5924-7fb5-0747-a4605589a394",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Loads a new UI scene from an FXML file, creates a new stage with the scene, and replaces the current stage with the new one, closing the original stage.",
            "params": [
              {
                "name": "event",
                "type_name": "MouseEvent",
                "description": "MouseEvent object that triggered the function, providing information about the mouse button pressed, the screen position of the click, and other details.\n\n* Type: `MouseEvent` indicating that the event was triggered by a mouse action.\n* Source: The object that generated the event, which is typically a button or link in the user interface.\n* Event type: The specific type of event, such as `MOUSE_CLICKED` or `MOUSE_OVER`.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    void panier(MouseEvent event) {\n\n        // Obtain the data from the data source\n\n        List<Produit> produits = new ArrayList<>();\n\n\n\n        // Add the produits to the list\n\n        produits.add(new Produit(1, \"Le Seigneur des Anneaux\", 50));\n\n        produits.add(new Produit(2, \"Harry Potter\", 30));\n\n        produits.add(new Produit(3, \"Game of Thrones\", 40));\n\n        produits.add(new Produit(4, \"La Petite Sirène\", 150));\n\n\n\n        // Create a new instance of the panier\n\n        PanierProduitController panier = new PanierProduitController();\n\n\n\n        // Set the data source of the panier to be the produits list\n\n        panier.setDataSource(produits);\n\n\n\n        // Display the panier window with the scene set to the panier\n\n        try {\n\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/PanierProduit.fxml\"));\n\n            Parent root = loader.load();\n\n            Scene scene = new Scene(root);\n\n            Stage stage = new Stage();\n\n            stage.setScene(scene);\n\n            stage.setTitle(\"Panier des produits\");\n\n            stage.show();\n\n        } catch (IOException e) {\n\n            e.printStackTrace(); // Gérer l'exception d'entrée/sortie\n\n        }\n\n    }\n",
              "description": ""
            },
            "name": "panier",
            "location": {
              "start": 361,
              "insert": 361,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 53,
            "docLength": null
          },
          {
            "id": "d8432d82-8dbe-c58f-524e-f8476ac25061",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Creates a PayPal payment request and redirects the user to PayPal for approval. It retrieves the payment details and redirects the user to the appropriate URL based on the payment method.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the `payment()` method and provides the necessary context for the payment creation process.\n\n* `event`: An ActionEvent object representing a payment action triggered by the user.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void payment(ActionEvent event) {\n    // Set up PayPal API context\n    APIContext apiContext = new APIContext(CLIENT_ID, CLIENT_SECRET, \"sandbox\");\n    \n    // Create amount object\n    Amount amount = new Amount();\n    amount.setCurrency(\"USD\");\n    amount.setTotal(\"19.99\"); // This should be the total price of your order\n    \n    // Create transaction object\n    Transaction transaction = new Transaction();\n    transaction.setDescription(\"Your Purchase Description\");\n    transaction.setAmount(amount);\n    \n    // Add transaction to list\n    List<Transaction> transactions = new ArrayList<>();\n    transactions.add(transaction);\n    \n    // Create payer object\n    Payer payer = new Payer();\n    payer.setPaymentMethod(\"paypal\");\n    \n    // Create payment object and set fields\n    Payment payment = new Payment();\n    payment.setIntent(\"sale\");\n    payment.setPayer(payer);\n    payment.setTransactions(transactions);\n    payment.setRedirectUrls(new RedirectUrls());\n    \n    // Try to create payment and redirect if successful\n    try {\n        Payment createdPayment = payment.create(apiContext);\n        for (Links link : createdPayment.getLinks()) {\n            if (link.getRel().equalsIgnoreCase(\"approval_url\")) {\n                System.out.println(link.getHref());\n                redirectToPayPal(link.getHref());\n                break;\n            }\n        }\n    } catch (PayPalRESTException e) {\n        e.printStackTrace();\n        showAlert(\"Error\", \"Could not initiate PayPal payment.\");\n    }\n}\n",
              "description": "\nThe code above will create a payment with the specified transaction and redirect the user to the PayPal website for confirmation. The `CLIENT_ID` and `CLIENT_SECRET` should be replaced by your own credentials from the PayPal developer dashboard. Also, you need to implement the `redirectToPayPal(String url)` method and `showAlert(String title, String message)` methods in order for this code to work correctly."
            },
            "name": "payment",
            "location": {
              "start": 417,
              "insert": 417,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 85,
            "docLength": null
          },
          {
            "id": "46d63269-29ce-f7bd-a643-a28dba863529",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Redirect users to PayPal's redirection page for successful payments, passing payment ID and payer ID as query parameters.",
            "params": [
              {
                "name": "approvalLink",
                "type_name": "String",
                "description": "URL of the PayPal approval page, which is loaded into a WebView component and monitored for the successful redirection to a predefined URL indicating the completion of the payment process.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "import java.net.*;\nimport javafx.application.Platform;\nimport javafx.concurrent.Worker.State;\nimport javafx.geometry.Pos;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Dialog;\nimport javafx.scene.control.ProgressBar;\nimport javafx.scene.layout.*;\nimport javafx.stage.StageStyle;\nimport javafx.util.Pair;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a URL for the approval link\n        String approvalLink = \"http://localhost/approve\";\n        \n        // Redirect to PayPal using the approval link\n        redirectToPayPal(approvalLink);\n    }\n    \n    private static void extractQueryParameter(String url, String parameter) {\n        // Extract the query parameter from the URL\n        return \"\";\n    }\n    \n    private static void completePayment(String paymentId, String payerId) {\n        // Complete the payment using the PayPal API\n        \n    }\n}\n",
              "description": ""
            },
            "name": "redirectToPayPal",
            "location": {
              "start": 505,
              "insert": 505,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 81,
            "docLength": null
          },
          {
            "id": "71e6ee9d-9e4d-f08b-6c45-cdbca6f8d957",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Parses a URL's query parameters and returns the value of a specified parameter name if it exists, or `null` otherwise.",
            "params": [
              {
                "name": "url",
                "type_name": "String",
                "description": "URL to be analyzed and is used to extract the query parameter value using `URLEncodedUtils.parse()`.",
                "complex_type": false
              },
              {
                "name": "parameterName",
                "type_name": "String",
                "description": "name of the query parameter to be extracted from the URL.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a string representing the value of a query parameter found in a URL.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n        String url = \"https://www.example.com?key=value&foo=bar\";\n        String parameterName = \"key\";\n        \n        // Extract the query parameter 'key' from the URL\n        String extractedValue = extractQueryParameter(url, parameterName);\n        \n        System.out.println(\"Extracted value: \" + extractedValue); // Outputs: Extracted value: value\n    }\n}\n",
              "description": ""
            },
            "name": "extractQueryParameter",
            "location": {
              "start": 589,
              "insert": 589,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "8491292c-76c5-0584-d644-9ce223789348",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Executes a PayPal payment using the `execute()` method, checking the payment state and updating the commande status accordingly.",
            "params": [
              {
                "name": "paymentId",
                "type_name": "String",
                "description": "unique identifier of the payment to be executed.",
                "complex_type": false
              },
              {
                "name": "payerId",
                "type_name": "String",
                "description": "identifier of the payer in the PayPal payment execution, which is used to identify the user making the payment.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "private void completePayment(String paymentId, String payerId) {\n    APIContext apiContext = new APIContext(CLIENT_ID, CLIENT_SECRET, \"sandbox\");\n    \n    Payment payment = new Payment();\n    payment.setId(paymentId);\n    \n    PaymentExecution paymentExecution = new PaymentExecution();\n    paymentExecution.setPayerId(payerId);\n    \n    try {\n        Payment executedPayment = payment.execute(apiContext, paymentExecution);\n        \n        if (executedPayment.getState().equals(\"approved\")) {\n            commande.setStatu(\"Payee\");\n            \n            commandeService.update(commande);\n        }\n    } catch (PayPalRESTException e) {\n        e.printStackTrace();\n    }\n}\n",
              "description": "\nIn this example, completePayment is called with the paymentId and payerId as inputs. The method then creates an APIContext object to be used in the PayPal REST API. It also creates a new payment instance and sets its id attribute to the inputted paymentId, and a new PaymentExecution instance, which contains the inputted payerId as its payerId attribute.\nThe try block then executes the execute method of the payment object with the apiContext and paymentExecution objects as parameters. This will execute the payment using the PayPal REST API. If the state of the executed payment is equal to \"approved\", it will update the status of the commande instance to \"Payee\" and use the commandeService to update the commande in the database.\nIn conclusion, this method would be used by passing in a paymentId and payerId as inputs, which are then used to execute a payment using the PayPal REST API."
            },
            "name": "completePayment",
            "location": {
              "start": 617,
              "insert": 617,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 45,
            "docLength": null
          },
          {
            "id": "e2d7ef88-5a25-a590-6d4f-d7f7c19672c9",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Charges a new `FXML` file, creates a new scene, and attaches it to a new stage, replacing the current stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent that triggered the function execution and provides access to information about the event, such as the source of the event.\n\n* It is an `ActionEvent`, which means it carries information about the action that triggered the function.\n* The source of the event is a `Node`, which represents the element in the user interface that triggered the event.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid cinemaclient(ActionEvent event) {\n    try {\n        // Load a new scene with CommentaireProduit.fxml\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/CommentaireProduit.fxml\"));\n        Parent root = loader.load();\n        \n        // Create a new Scene with the newly created interface\n        Scene scene = new Scene(root);\n        \n        // Get the Stage (window) currently active in the event\n        Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n        \n        // Create a new Window (stage) and attach the scene to it\n        Stage stage = new Stage();\n        stage.setScene(scene);\n        stage.setTitle(\"cinema\");\n        stage.show();\n        \n        // Close the current window\n        currentStage.close();\n    } catch (IOException e) {\n        e.printStackTrace(); // Handle IOException\n    }\n}\n",
              "description": "\nThis is an example on how to use this java method, which should be as short as possible. Make sure that your code works correctly. Never create a unit test example. Do not hallucinate incorrect inputs. NEVER give an explanation of your code."
            },
            "name": "cinemaclient",
            "location": {
              "start": 665,
              "insert": 665,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "43d5c357-e4f3-b493-5448-cfbcfd97fcc9",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Charges a new FXML file (`AffichageEvenementClient.fxml`) and creates a new scene, then attaches it to an existing stage and replaces the current stage with the new one, closing the original stage afterward.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the event handler method, providing information about the action that was performed, such as the source of the event and the type of event.\n\n* It is an instance of `ActionEvent`, which indicates that the event was triggered by a user action (e.g., clicking a button).",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "Button btn = new Button();\nbtn.setOnAction(event -> eventClient(event));\n",
              "description": "\nHere, we create a button and set the `onAction` handler to call the `eventClient()` method with the `ActionEvent` object generated by the button press. This way, when the user clicks on the button, the `eventClient()` method will be called and can perform any actions that are required for the event."
            },
            "name": "eventClient",
            "location": {
              "start": 719,
              "insert": 719,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "9f3af634-8ed0-fdb1-3f4a-7cd46780c3c5",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Loads a new FXML interface using `FXMLLoader`, creates a new scene with it, and attaches it to a new stage. It then closes the current stage to display the new one.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the function execution, providing the source of the event and allowing for handling the corresponding action.\n\n* `event`: an ActionEvent object representing a user action (e.g., mouse click or key press) that triggered the function execution.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid produitClient(ActionEvent event) {\n    try {\n        // Charger la nouvelle interface PanierProduit.fxml\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/AfficherProduitClient.fxml\"));\n        Parent root = loader.load();\n\n        // Créer une nouvelle scène avec la nouvelle interface\n        Scene scene = new Scene(root);\n\n        // Obtenir la Stage (fenêtre) actuelle à partir de l'événement\n        Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n\n        // Créer une nouvelle fenêtre (stage) et y attacher la scène\n        Stage stage = new Stage();\n        stage.setScene(scene);\n        stage.setTitle(\"products \");\n        stage.show();\n\n        // Fermer la fenêtre actuelle\n        currentStage.close();\n    } catch (IOException e) {\n        e.printStackTrace(); // Gérer l'exception d'entrée/sortie\n    }\n}\n",
              "description": "\nThis method is used when a client wants to see all the products that have been registered in the system. The method first loads the AfficherProduitClient.fxml interface by creating a new instance of the FXMLLoader class and using its load() method. Afterwards, it creates a new Scene object with the root element of the newly loaded interface and then creates a new Stage object and sets that Scene as its scene. Finally, it shows the stage.\n\nThis example is very similar to the previous one. The only difference is that it uses AfficherProduitClient.fxml instead of PanierProduit.fxml. Additionally, it changes the title of the stage from \"products\" to \"products\"."
            },
            "name": "produitClient",
            "location": {
              "start": 773,
              "insert": 773,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "0a4e9542-32c2-eb91-e149-0f00c78187e8",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Likely profiles a client-side application using Java's built-in profiling tools to gather performance data on various aspects of the application, such as CPU usage, memory allocation, and method execution time.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "occurrence of an action event that triggered the function execution.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\nvoid profilclient(ActionEvent event) {\n\n    // Get the current Stage (Window) from the Event\n\n    Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n\n    try {\n\n        // Create a new Scene with the new interface\n\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"Profil.fxml\"));\n\n        Parent root = (Parent) loader.load();\n\n        // Create a new Stage (Window) for the Scene\n\n        Stage stage = new Stage();\n\n        stage.setScene(new Scene(root));\n\n        stage.show();\n\n    } catch (IOException e) {\n\n        e.printStackTrace();\n\n    }\n\n}\n",
              "description": "\nExplain the example code, and why it works correctly.     Do not include any unit tests.     Do not create a hallucinated input."
            },
            "name": "profilclient",
            "location": {
              "start": 827,
              "insert": 827,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "a2cfc74f-d127-2b9e-2e4c-0285e9c446ec",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Is triggered when the user clicks a button and displays a cinema-related interface.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "occurrence of a button click event that triggered the `showcinema()` method invocation.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid showcinema(ActionEvent event) {\n    // Call the method showcinema, passing in event as a parameter\n    showcinema();\n}\n",
              "description": ""
            },
            "name": "showcinema",
            "location": {
              "start": 837,
              "insert": 837,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "939bb0b3-8fda-3eb8-934b-98c294a50cad",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Is called when the `showEvenement` action is triggered and performs an unspecified action.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "AnimationEvent object that triggered the execution of the `showEvenement` method.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void showevenement(ActionEvent event) {\n        try {\n            // Charger la nouvelle interface PanierProduit.fxml\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/AffichageEvenementClient.fxml\"));\n            Parent root = loader.load();\n            \n            // Créer une nouvelle scène avec la nouvelle interface\n            Scene scene = new Scene(root);\n            \n            // Obtenir la Stage (fenêtre) actuelle à partir de l'événement\n            Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n            \n            // Créer une nouvelle fenêtre (stage) et y attacher la scène\n            Stage stage = new Stage();\n            stage.setScene(scene);\n            stage.setTitle(\"evenement\");\n            stage.show();\n            \n            // Fermer la fenêtre actuelle\n            currentStage.close();\n        } catch (IOException e) {\n            e.printStackTrace(); // Gérer l'exception d'entrée/sortie\n        }\n    }\n",
              "description": "\nThis method uses the provided 'ActionEvent' as a parameter, and it will be used to open the scene named \"AffichageEvenementClient.fxml\". This method will also close the current stage."
            },
            "name": "showevenement",
            "location": {
              "start": 847,
              "insert": 847,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "1fe78131-35e5-3584-f243-29927278c5e5",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Loads a new UI scene from an FXML file, creates a new stage with the scene, and replaces the current stage with the new one, closing the original stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the showmovie method, providing information about the source of the event and allowing the method to handle the appropriate action accordingly.\n\n* It is an instance of `ActionEvent`, which represents an action event occurred in the JavaFX application.\n* The source of the event is a `Node`, which can be any element in the FXML document, such as a button or a label.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid showmovie(ActionEvent event) {\n    try {\n        // Charger la nouvelle interface PanierProduit.fxml\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/Series-view.fxml\"));\n        Parent root = loader.load();\n        \n        // Créer une nouvelle scène avec la nouvelle interface\n        Scene scene = new Scene(root);\n        \n        // Obtenir la Stage (fenêtre) actuelle à partir de l'événement\n        Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n        \n        // Créer une nouvelle fenêtre (stage) et y attacher la scène\n        Stage stage = new Stage();\n        stage.setScene(scene);\n        stage.setTitle(\"series \");\n        stage.show();\n        \n        // Fermer la fenêtre actuelle\n        currentStage.close();\n    } catch (IOException e) {\n        e.printStackTrace(); // Gérer l'exception d'entrée/sortie\n    }\n}\n",
              "description": "\nIn this example, the showmovie method is called whenever a user interacts with the \"show movie\" button on the JavaFX interface. This will load the fxml file for the series-view scene and display it as a new stage window. The original stage window is then closed."
            },
            "name": "showmovie",
            "location": {
              "start": 857,
              "insert": 857,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "c331f530-93b2-5ea3-b647-3ee186e56b4c",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Is triggered by an ActionEvent and performs unspecified action related to showing a product.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "occurrence of an action, triggered by the user, that calls the `showproduit()` method.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    void showproduit(ActionEvent event) {\n\n        // Code to perform when the user clicks on the button\n\n        System.out.println(\"You have pressed the button.\");\n\n    }\n",
              "description": "\nWhen you click on the button, the code will be executed and it will print \"You have pressed the button.\" in the console. In this case, event is not used anywhere in the method showproduit, but it is still necessary to include it as a parameter because of how Java FX works."
            },
            "name": "showproduit",
            "location": {
              "start": 911,
              "insert": 911,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "ff1869ea-df7f-67ac-eb48-3f2ffb7d7d88",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Loads a new FXML file, creates a new scene and stage, and replaces the current stage with the new one.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent that triggered the function, providing the source of the event and allowing for proper handling of the action taken.\n\n* `event` represents an ActionEvent object containing information about the action that triggered the function's execution.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import java.io.IOException;\n\nimport javafx.event.ActionEvent;\nimport javafx.fxml.FXML;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\n\npublic class MainController {\n    @FXML\n    void showserie(ActionEvent event) throws IOException {\n        try {\n            // Charger la nouvelle interface PanierProduit.fxml\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/Series-view.fxml\"));\n            Parent root = loader.load();\n\n            // Créer une nouvelle scène avec la nouvelle interface\n            Scene scene = new Scene(root);\n\n            // Obtenir la Stage (fenêtre) actuelle à partir de l'événement\n            Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n\n            // Créer une nouvelle fenêtre (stage) et y attacher la scène\n            Stage stage = new Stage();\n            stage.setScene(scene);\n            stage.setTitle(\"series \");\n            stage.show();\n\n            // Fermer la fenêtre actuelle\n            currentStage.close();\n        } catch (IOException e) {\n            e.printStackTrace(); // Gérer l'exception d'entrée/sortie\n        }\n    }\n}\n",
              "description": ""
            },
            "name": "showserie",
            "location": {
              "start": 921,
              "insert": 921,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "6cd9ea45-fa23-8bb7-fb4f-fdcc6307acb1",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Loads a new FXML interface, creates a new scene with it, and attaches the scene to a new stage. It also closes the current stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggers the execution of the `MovieClient` method, which is an ActionEvent object containing information about the action that triggered the method call.\n\n* `event` is an `ActionEvent` object representing the user's action that triggered the function.\n* The source of the event is a `Node` object, which provides information about the element that was clicked or selected.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void MovieClient(ActionEvent event) {\n        // code that would execute when the movie client button is pressed \n    }\n",
              "description": "\nExplanation:\nWe have a method called \"MovieClient\" which takes in one parameter, \"event\". This parameter is of type \"ActionEvent\". We do not provide an explanation for our code because it is not necessary. The reason why we provided this example is to show you how to call the method and what parameters are needed in order to execute the method."
            },
            "name": "MovieClient",
            "location": {
              "start": 975,
              "insert": 975,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 49,
            "docLength": null
          },
          {
            "id": "01974060-10ae-2687-d246-cc4cc9292adf",
            "ancestors": [
              "f6a57d3f-5db4-71a6-234b-446cad37d1d7"
            ],
            "type": "function",
            "description": "Loads a new FXML interface, creates a new scene, and attaches it to a new stage, while closing the current stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the `SerieClient()` method to be called, providing the source of the event and any related data.\n\n* It is an instance of `ActionEvent`, representing an action performed on the JavaFX application.\n* Its source field references the object that triggered the event, which in this case is a `Node` (i.e., a FXML component).",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid SerieClient(ActionEvent event) {\n    try {\n        // Charger la nouvelle interface PanierProduit.fxml\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/Series-view.fxml\"));\n        Parent root = loader.load();\n\n        // Créer une nouvelle scène avec la nouvelle interface\n        Scene scene = new Scene(root);\n\n        // Obtenir la Stage (fenêtre) actuelle à partir de l'événement\n        Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n\n        // Créer une nouvelle fenêtre (stage) et y attacher la scène\n        Stage stage = new Stage();\n        stage.setScene(scene);\n        stage.setTitle(\"chat \");\n        stage.show();\n\n        // Fermer la fenêtre actuelle\n        currentStage.close();\n    } catch (IOException e) {\n        e.printStackTrace(); // Gérer l'exception d'entrée/sortie\n    }\n}\n",
              "description": ""
            },
            "name": "SerieClient",
            "location": {
              "start": 1027,
              "insert": 1027,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          }
        ]
      }
    }
  }
]