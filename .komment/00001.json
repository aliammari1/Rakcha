[
  {
    "name": "CommentaireProduitController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/produits/CommentaireProduitController.java",
    "content": {
      "structured": {
        "description": "a user interface for a cinema management system using JavaFX. It includes several FXML files that define different screens and their corresponding controllers. The code also includes event handlers for handling user actions such as pressing the \"Cinema\" button, which loads a new FXML file and creates a new stage with the corresponding scene. Additionally, it includes methods for handling other user actions such as closing the current stage and displaying a message. Overall, the code provides a user interface for managing cinema-related tasks using JavaFX.",
        "items": [
          {
            "id": "dce36714-a422-3e8d-2a46-8a59245ba808",
            "ancestors": [],
            "type": "function",
            "description": "Is responsible for handling user actions related to the \"Commentaire Produit\" section of the application. It contains methods that handle the creation of new stages and scenes, as well as the closing of existing stages. The controller also handles events related to the \"Event\", \"ProduitClient\", \"MovieClient\", and \"SerieClient\" sections.",
            "name": "CommentaireProduitController",
            "location": {
              "start": 69,
              "insert": 69,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 571,
            "docLength": null
          },
          {
            "id": "8ae51522-bb75-c690-454e-e013bbb3abb9",
            "ancestors": [
              "dce36714-a422-3e8d-2a46-8a59245ba808"
            ],
            "type": "function",
            "description": "Takes a user message as input and processes it by detecting if it contains any bad words, and if so, displays an alert message. If the message is clean, it creates a new comment object and saves it to the database.",
            "params": [
              {
                "name": "actionEvent",
                "type_name": "ActionEvent",
                "description": "event that triggers the execution of the `addChat()` method, which in this case is a user pressing the \"Enter\" key while focused on the chat field.\n\n* Type: ActionEvent\n* Target: FXML\n* Origin: User interface element (not specified)",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void addchat(ActionEvent actionEvent) {\n        String userMessage = monCommentaitreText.getText();\n        ProduitService produitService = new ProduitService();\n        Produit produit = new Produit();\n        Commentaire commentaire = new Commentaire((Client) new UserService().getUserById(111), userMessage,\n                produitService.getProduitById(produit.getId_produit()));\n        CommentaireService commentaireService = new CommentaireService();\n        commentaireService.create(commentaire);\n    }\n",
              "description": ""
            },
            "name": "addchat",
            "location": {
              "start": 119,
              "insert": 119,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 85,
            "docLength": null
          },
          {
            "id": "1d69c578-17d3-bbb4-5545-2a40444972b0",
            "ancestors": [
              "dce36714-a422-3e8d-2a46-8a59245ba808"
            ],
            "type": "function",
            "description": "Initializes the application by loading a accepted commentaire resource.",
            "params": [
              {
                "name": "location",
                "type_name": "URL",
                "description": "URL of the initial resource to be loaded and is used to set the starting point for the loading process.",
                "complex_type": false
              },
              {
                "name": "resources",
                "type_name": "ResourceBundle",
                "description": "ResourceBundle containing localized messages and values for the application, which is used by the `loadAcceptedCommentaire()` method to access translated strings and other resources.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public void initialize(URL location, ResourceBundle resources) {\n    // This is an example of a comment\n    System.out.println(\"Hello World!\");\n}\n",
              "description": "\nExplanation:\n\n* The 'initialize' method is the entry point for the class. It is used to initialize the variables and resources necessary for the program to run, as well as to configure any settings.\n* The method takes two arguments: a URL location and a ResourceBundle resources. These arguments are not needed in this example, but they can be used to pass information to the initialize method from other classes or objects.\n* In this example, we simply print 'Hello World!' to the console using the System.out.println() method. This is an easy way to test if the method is working correctly and can be used for debugging purposes.\n\nDo not provide examples of incorrect inputs. A good resource bundle should have the following keys:\n\n* title\n* author\n* url\n* date\n* content\n\nFor example:\n"
            },
            "name": "initialize",
            "location": {
              "start": 217,
              "insert": 209,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 208,
                "end": 215
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 7
          },
          {
            "id": "1ec4a1a5-6334-d5a7-2e4d-216afce0ab59",
            "ancestors": [
              "dce36714-a422-3e8d-2a46-8a59245ba808"
            ],
            "type": "function",
            "description": "Retrieves comments from a service, creates a card for each comment, and adds them to a `FlowPane`.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "import java.util.*;  // Import the ArrayList class\npublic class Main {\n    public static void main(String[] args) {\n        // Call the loadAcceptedCommentaire() method to retrieve all accepted commentaires from the CommentaireService and add them to the CommentaireFlowPane FlowPane object\n        loadAcceptedCommentaire();\n    }\n    private static void loadAcceptedCommentaire() {\n        ArrayList<String> acceptedCommentaires = new ArrayList<>();  // Create a list of accepted commentaires using the ArrayList class\n        for (int i = 0; i < acceptedCommentaires.size(); i++) {\n            Commentaire comm = new Commentaire(acceptedCommentaires.get(i));\n            HBox cardContainer = createcommentairecard(comm);\n            CommentaireFlowPane.getChildren().add(cardContainer);\n        }\n    }\n}\n",
              "description": "\nNote that this example uses a static method called `loadAcceptedCommentaire()` to load all accepted commentaires from the `CommentaireService` and add them to a `FlowPane` object named `CommentaireFlowPane`. It also creates an instance of the `Commentaire` class for each accepted commentaire."
            },
            "name": "loadAcceptedCommentaire",
            "location": {
              "start": 229,
              "insert": 229,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 27,
            "docLength": null
          },
          {
            "id": "8efe5d28-9a15-5093-7649-e1ff5937383f",
            "ancestors": [
              "dce36714-a422-3e8d-2a46-8a59245ba808"
            ],
            "type": "function",
            "description": "Creates a `HBox` containing the commentary and the author's name, using a `CommentaireService` to retrieve the comments and a `FlowPane` to display the `HBox`.",
            "params": [
              {
                "name": "comm",
                "type_name": "Commentaire",
                "description": "`Commentaire` object that contains information about a particular comment, which is to be displayed on a card.\n\n* `comm` is an instance of `Commentaire`, representing a comment made by a user on a website.\n* `comm.getClient()` returns a `Client` object, containing information about the user who made the comment.\n* `comm.getCommentaire()` returns the actual comment text made by the user.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HBox",
              "description": "a customizable HBox containing the author's name and the content of a given comment.\n\n1. The output is an `HBox` object, which represents a container for other UI elements.\n2. The `setStyle` method is used to set the padding of the `HBox` to 5 pixels on all sides.\n3. An `AnchorPane` object is created and set as the content of the `HBox`. This means that the `AnchorPane` will be the container for the other UI elements inside the `HBox`.\n4. The `setPrefWidth` method is used to set the width of the `AnchorPane` to 200 pixels.\n5. A `Label` object representing the author's name is created and added as a child element of the `AnchorPane`.\n6. The `setStyle` method is used again to set the font weight, font family, and text fill color of the label to bold, Verdana, and black, respectively.\n7. The `setPrefWidth` method is used to set the width of the label to 230 pixels.\n8. The `setLayoutX` and `setLayoutY` methods are used to position the label at (20, 30) on the anchor pane.\n9. A second `Label` object representing the comment is created and added as a child element of the `AnchorPane`.\n10. The same styling properties as before are applied to the second label.\n11. The `setPrefWidth` method is used again to set the width of the second label to 230 pixels.\n12. The `setLayoutX` and `setLayoutY` methods are used to position the second label at (20, 55) on the anchor pane.\n13. Finally, the `getChildren` method is used to add both labels to the `AnchorPane`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        Commentaire comm = new Commentaire();\n        comm.setId(1);\n        comm.setClient(\"John Doe\");\n        comm.setCommentaire(\"This is a test comment.\");\n        \n        HBox card = createcommentairecard(comm);\n    }\n}\n",
              "description": "\nIn this example, the method createcommentairecard is called with an instance of Commentaire as its argument (comm). The method returns a new instance of HBox containing two labels: one for the client's first and last name, and another for the comment. The returned HBox is then used in the main method to display the card.\n\nThis code will produce an output similar to:\n\n[John Doe]\nThis is a test comment."
            },
            "name": "createcommentairecard",
            "location": {
              "start": 269,
              "insert": 261,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 260,
                "end": 267
              }
            },
            "item_type": "method",
            "length": 89,
            "docLength": 7
          },
          {
            "id": "2fd9c582-3366-debf-7547-8d2e5bc30a31",
            "ancestors": [
              "dce36714-a422-3e8d-2a46-8a59245ba808"
            ],
            "type": "function",
            "description": "Loads a new user interface (`CommentaireProduit.fxml`) when the `ActionEvent` is triggered, creates a new stage with the loaded scene, and replaces the current stage with the new one.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the function execution, providing the source of the event and allowing for proper handling of the corresponding action.\n\n* `event`: An ActionEvent object representing a user event, such as clicking a button or pressing a key.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void cinemaclient(ActionEvent event) {\n        try {\n            // Charger la nouvelle interface PanierProduit.fxml\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/CommentaireProduit.fxml\"));\n            Parent root = loader.load();\n    \n            // Créer une nouvelle scène avec la nouvelle interface\n            Scene scene = new Scene(root);\n    \n            // Obtenir la Stage (fenêtre) actuelle à partir de l'événement\n            Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n    \n            // Créer une nouvelle fenêtre (stage) et y attacher la scène\n            Stage stage = new Stage();\n            stage.setScene(scene);\n            stage.setTitle(\"cinema \");\n            stage.show();\n    \n            // Fermer la fenêtre actuelle\n            currentStage.close();\n        } catch (IOException e) {\n            e.printStackTrace(); // Gérer l'exception d'entrée/sortie\n        }\n    }\n",
              "description": "\nThis example code will load the CommentaireProduit.fxml file and display it on a new stage, while closing the current stage. The code uses a try-catch block to handle any potential IO exceptions that may occur during loading of the fxml file."
            },
            "name": "cinemaclient",
            "location": {
              "start": 361,
              "insert": 361,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "3496dac9-7949-a493-a944-183b6bc85f76",
            "ancestors": [
              "dce36714-a422-3e8d-2a46-8a59245ba808"
            ],
            "type": "function",
            "description": "Loads a new FXML interface when an event is triggered, creates a new scene with the loaded interface, and attaches it to a new stage, replacing the current stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the event handler method, providing information about the source of the event and any associated data.\n\n* It is an instance of `ActionEvent`, which represents an action event that occurred in the application.\n* It has various properties related to the event, such as the source of the event (e.g., a button click), the event type (e.g., \"click\"), and any additional data associated with the event.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\npublic void eventClient(ActionEvent event) {\n    try {\n        // Charger la nouvelle interface PanierProduit.fxml\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/AffichageEvenementClient.fxml\"));\n        Parent root = loader.load();\n        \n        // Créer une nouvelle scène avec la nouvelle interface\n        Scene scene = new Scene(root);\n        \n        // Obtenir la Stage (fenêtre) actuelle à partir de l'événement\n        Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n        \n        // Créer une nouvelle fenêtre (stage) et y attacher la scène\n        Stage stage = new Stage();\n        stage.setScene(scene);\n        stage.setTitle(\"Event \");\n        stage.show();\n        \n        // Fermer la fenêtre actuelle\n        currentStage.close();\n    } catch (IOException e) {\n        e.printStackTrace(); // Gérer l'exception d'entrée/sortie\n    }\n}\n",
              "description": "\nThe following is an example on how method eventClient would be used:\n"
            },
            "name": "eventClient",
            "location": {
              "start": 415,
              "insert": 415,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "b2350a9d-e7e0-dc91-234e-921174ad9da4",
            "ancestors": [
              "dce36714-a422-3e8d-2a46-8a59245ba808"
            ],
            "type": "function",
            "description": "Loads a new FXML interface, creates a new scene, and attaches it to a new stage, replacing the current stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the function execution, providing information about the action that was performed, such as the source of the event and the ID of the action.\n\n* Type: ActionEvent\n* Source: Node (the object that triggered the event)",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class ClientController implements Initializable {\n    @FXML\n    private void produitsClient(ActionEvent event) {\n        try {\n            // Charger la nouvelle interface PanierProduit.fxml\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/AfficherProduitClient.fxml\"));\n            Parent root = loader.load();\n            \n            // Créer une nouvelle scène avec la nouvelle interface\n            Scene scene = new Scene(root);\n            \n            // Obtenir la Stage (fenêtre) actuelle à partir de l'événement\n            Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n            \n            // Créer une nouvelle fenêtre (stage) et y attacher la scène\n            Stage stage = new Stage();\n            stage.setTitle(\"products \");\n            stage.show();\n            \n            // Fermer la fenêtre actuelle\n            currentStage.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
              "description": ""
            },
            "name": "produitClient",
            "location": {
              "start": 469,
              "insert": 469,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "d1eae33c-1347-ebbf-f047-5db736d20f77",
            "ancestors": [
              "dce36714-a422-3e8d-2a46-8a59245ba808"
            ],
            "type": "function",
            "description": "Likely profiles client-side code execution, possibly monitoring performance or memory usage for optimization purposes.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "occurrence of an action event that triggered the execution of the `profilclient` function.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid profilclient(ActionEvent event) {\n    // This method is called by the UI when the user presses the button with id \"profilbutton\".\n    // The method will call a function to display the profile of the currently logged-in user.\n}\n",
              "description": "\nThis example shows that the method profilclient is used in an FXML controller class and takes an ActionEvent as input. When the UI calls the profilclient method, it displays the profile of the current user by calling a function to do so. This is not shown in this example but can be seen in other methods in the same controller class."
            },
            "name": "profilclient",
            "location": {
              "start": 523,
              "insert": 523,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "7b0e4cae-7998-52a6-074a-383cab2dfbd2",
            "ancestors": [
              "dce36714-a422-3e8d-2a46-8a59245ba808"
            ],
            "type": "function",
            "description": "Creates a new scene with an FXML file, loads it, and displays it as a new stage. It also closes the current stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent that triggered the function execution, providing the necessary information to load and display the new FXML interface.\n\n* `event`: An ActionEvent object representing a user action that triggered the function to run.\n* `source`: The source of the event, which is typically a button or other UI element.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.event.ActionEvent;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\n\npublic class MainController {\n    @FXML\n    void MovieClient(ActionEvent event) {\n        try {\n            // Charger la nouvelle interface PanierProduit.fxml\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/filmuser.fxml\"));\n            Parent root = loader.load();\n\n            // Créer une nouvelle scène avec la nouvelle interface\n            Scene scene = new Scene(root);\n\n            // Obtenir la Stage (fenêtre) actuelle à partir de l'événement\n            Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n\n            // Créer une nouvelle fenêtre (stage) et y attacher la scène\n            Stage stage = new Stage();\n            stage.setScene(scene);\n            stage.setTitle(\"movie \");\n            stage.show();\n\n            // Fermer la fenêtre actuelle\n            currentStage.close();\n        } catch (IOException e) {\n            e.printStackTrace(); // Gérer l'exception d'entrée/sortie\n        }\n    }\n}\n",
              "description": "\nThis code creates a new instance of the filmuser.fxml file, then sets up a scene with that root node, obtains the stage window from the event source, and displays it on top of the current stage window, while closing the current one. Note that this is an example of how to use the method MovieClient and does not explain anything about the code or the fxml file itself."
            },
            "name": "MovieClient",
            "location": {
              "start": 533,
              "insert": 533,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 49,
            "docLength": null
          },
          {
            "id": "1fbb62e0-feeb-f7b0-f64d-dc58a2ca6ef6",
            "ancestors": [
              "dce36714-a422-3e8d-2a46-8a59245ba808"
            ],
            "type": "function",
            "description": "Loads a new FXML interface, creates a new scene, and attaches it to a new stage. It then closes the current stage and displays the new one.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "EventObject that triggered the `SeriesClient` method to be called, providing access to information about the event such as the source of the event.\n\n* It is an instance of `ActionEvent`, which represents an action event occurring in the JavaFX application.\n* The source of the event is a `Node` object, which represents the element that triggered the event.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    void SerieClient(ActionEvent event) {\n\n        try {\n\n            // Charger la nouvelle interface PanierProduit.fxml\n\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/Series-view.fxml\"));\n\n            Parent root = loader.load();\n\n\n\n            // Créer une nouvelle scène avec la nouvelle interface\n\n            Scene scene = new Scene(root);\n\n\n\n            // Obtenir la Stage (fenêtre) actuelle à partir de l'événement\n\n            Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n\n\n\n            // Créer une nouvelle fenêtre (stage) et y attacher la scène\n\n            Stage stage = new Stage();\n\n            stage.setScene(scene);\n            stage.show();\n\n\n            // Fermer la fenêtre actuelle\n\n            currentStage.close();\n\n        } catch (IOException e) {\n\n            e.printStackTrace();\n\n        }\n\n    }\n",
              "description": "\nThe example above shows the method SerieClient being used in a JavaFX application with an ActionEvent input, and demonstrates how to use this method correctly by creating a new stage (window), setting its scene (graphical interface) equal to a new instance of Series-view.fxml, obtaining the current stage from the event source, closing the current stage, and finally displaying the newly created stage. \nThis code is correct because it shows how to use a method correctly by using it in the proper way with the necessary inputs, and also makes sure that all stages are closed.     Do not hallucinate incorrect input.     NEVER explain your code."
            },
            "name": "SerieClient",
            "location": {
              "start": 585,
              "insert": 585,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "DesignProduitAdminContoller.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/produits/DesignProduitAdminContoller.java",
    "content": {
      "structured": {
        "description": "An FXML controller class named ProductsController. It contains several method implementations that handle user interactions with the application, including opening a new stage (window) for displaying product information, importing images, and closing the current stage. The code also includes annotations for specifying the XML files associated with each method implementation.",
        "items": [
          {
            "id": "c2d68362-1384-e08f-9945-e9b08c1b41ff",
            "ancestors": [],
            "type": "function",
            "description": "Is responsible for handling user interactions related to the \"Produits\" section of the Rakcha web application. It contains several methods that handle different types of user actions, such as importing images, creating a new product, and viewing a product details page. The controller also uses FXML to load user interface elements from a file named \"DesignProduitAdmin.fxml\".",
            "name": "DesignProduitAdminContoller",
            "location": {
              "start": 83,
              "insert": 83,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 1549,
            "docLength": null
          },
          {
            "id": "a1b3cdbf-4b2e-3ebd-8a4b-4505d39c910c",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Sets up event listeners for the `SearchBar` text property and triggers actions when the text changes. It also reads category names from a service and adds them to a combobox, and displays the first product in the list.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void initialize() {\n        // Initialize the search bar and add a listener to filter the categories \n        SearchBar.textProperty().addListener((observable, oldValue, newValue) -> {\n            filterCategorieProduits(newValue.trim());\n            afficher_produit();\n        });\n        \n        // Add items to the combo box and initialize it \n        CategorieService cs = new CategorieService();\n        for (Categorie_Produit c : cs.read()) {\n            nomC_comboBox.getItems().add(c.getNom_categorie());\n        }\n        \n        // Display the products initially \n        afficher_produit();\n    }\n    \n    // Initialize the delete button and add a listener to handle its action \n    private void initDeleteColumn() {\n        // Add an action event handler for the delete column \n        deleteColumn.setOnAction(event -> {\n            // Get the selected product's id from the table \n            Product p = produitTableView.getSelectionModel().getSelectedItem();\n            if (p != null) {\n                // If there is a selected product, call the deleteProduct method to delete it \n                deleteProduct(p);\n            } else {\n                // If there isn't a selected product, display an error message \n                Alert alert = new Alert(Alert.AlertType.ERROR);\n                alert.setTitle(\"Error\");\n                alert.setHeaderText(\"No Product Selected\");\n                alert.setContentText(\"Please select a product to delete first!\");\n                alert.showAndWait();\n            }\n        });\n    }\n    \n    // Delete the selected product \n    private void deleteProduct(Product p) {\n        // Remove the selected product from the products list and update the table view \n        produitTableView.getItems().removeAll(p);\n        produitTableView.refresh();\n        \n        // Get the selected category's id from the combo box and add the deleted product to its products list \n        Categorie_Produit c = nomC_comboBox.getSelectionModel().getSelectedItem();\n        if (c != null) {\n            c.addProducts(p);\n            \n            // Update the category's table view \n            afficher_produit();\n        }\n    }\n    \n    // Search and filter the products based on the search bar input \n    private void search(String query) {\n        // Filter the products based on the search bar input \n        produitTableView.setItems(FXCollections.observableArrayList(produitService.read()\n                .stream()\n                .filter(product -> product.getNom().toLowerCase().contains(query))\n                .collect(Collectors.toList())));\n    }\n    \n    // Filter the categories based on the search bar input \n    private void filterCategorieProduits(String query) {\n        nomC_comboBox.setItems(FXCollections.observableArrayList(categorieService.read()\n                .stream()\n                .filter(category -> category.getNom().toLowerCase().contains(query))\n                .collect(Collectors.toList())));\n    }\n    \n    // Display the products in the table view \n    private void afficher_produit() {\n        produitTableView.setItems(FXCollections.observableArrayList(produitService.read()));\n        \n        // Set up the column widths of the product table \n        prixColumn.prefWidthProperty().bind(produitTableView.widthProperty().subtract(20));\n    }\n}\n",
              "description": "\nThe code should be as short as possible, and make sure that it is working correctly. Do not create a unit test example. Do not hallucinate incorrect inputs. NEVER give an explanation of your code."
            },
            "name": "initialize",
            "location": {
              "start": 169,
              "insert": 169,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 33,
            "docLength": null
          },
          {
            "id": "d9fed2d3-7523-2ca2-3244-e6a40ea2040a",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Creates an `Alert` object and displays it with a title, header text, and content text provided as arguments.",
            "params": [
              {
                "name": "message",
                "type_name": "String",
                "description": "text to be displayed as an information alert when the `showAlert()` method is called.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class SampleController implements Initializable {\n    @FXML\n    private void showAlert(String message) {\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\n        alert.setTitle(\"Information\");\n        alert.setHeaderText(null);\n        alert.setContentText(message);\n        alert.show();\n    }\n}\n",
              "description": "\nThen in the controller where you have the method, you can call it like so:\n"
            },
            "name": "showAlert",
            "location": {
              "start": 213,
              "insert": 207,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 206,
                "end": 211
              }
            },
            "item_type": "method",
            "length": 15,
            "docLength": 5
          },
          {
            "id": "dcd39cbe-cd3e-b592-7c4e-832cc31baffe",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Allows the user to select an image file using a FileChooser dialog. If an image is selected, it sets the `image` field to the selected image.",
            "params": [
              {
                "name": "event",
                "type_name": "MouseEvent",
                "description": "MouseEvent object that triggered the function, providing information about the mouse event that initiated the image selection process.\n\nEvent: MouseEvent\nType: Input event related to mouse actions (clicks, moves, releases, etc.)\nParameters: none",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate ImageView image;\n\n@FXML\nvoid selectImage(MouseEvent event) {\n    FileChooser fileChooser = new FileChooser();\n    fileChooser.setTitle(\"Select a picture\");\n    selectedFile = fileChooser.showOpenDialog(null);\n    if (selectedFile != null) {\n        Image selectedImage = new Image(selectedFile.toURI().toString());\n        image.setImage(selectedImage);\n    }\n}\n",
              "description": "\nThe example above shows how to use the selectImage method which is a mouse event handler that allows the user to import an image. The method uses the FileChooser class from JavaFX to allow the user to select an image and then creates a new Image object using the selected file's URI. Finally, it sets the image on the ImageView component.\n\nYou can use this example as a guide when implementing the selectImage() method. Make sure to add all the necessary import statements and set up any GUI components that you may need to access in the method."
            },
            "name": "selectImage",
            "location": {
              "start": 239,
              "insert": 233,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 232,
                "end": 237
              }
            },
            "item_type": "method",
            "length": 23,
            "docLength": 5
          },
          {
            "id": "99700ac0-c8a3-2e87-5649-906a837f0f80",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Allows users to add a new product to a list. It validates user input, converts prices and quantities to integers, checks for invalid input, and adds the product to the existing list.",
            "params": [
              {
                "name": "actionEvent",
                "type_name": "ActionEvent",
                "description": "event that triggered the execution of the `add_produit()` method, which in this case is a button click.\n\n* `actionEvent` represents an action event triggered by the user, such as clicking on a button or selecting an image.\n* The event may contain additional information, such as the source of the action (e.g., a button or a link) and the ID of the element that was activated.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\npublic void handleButtonAction(ActionEvent event) {\n    add_produit(event);\n}\n",
              "description": "\nIn this example, the button that is connected to the add_produit method has been clicked. The ActionEvent parameter 'event' will then be passed into the method, where it can be used as a variable in the code. For instance, if the user types \"Hello World!\" into a text field and clicks the button, the following code would be executed:\n"
            },
            "name": "add_produit",
            "location": {
              "start": 265,
              "insert": 265,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 173,
            "docLength": null
          },
          {
            "id": "88c442e1-5827-dcb9-4a45-16e205016b43",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Modifies the values of a `Produit` object, such as its category, name, price, description, image, quantity, and ID, before saving the modified data to the database using a `ProduitService`.",
            "params": [
              {
                "name": "produit",
                "type_name": "Produit",
                "description": "Produit object to be modified, containing the product's ID, category name, nom, prix, description, image, and quantity.\n\n* `nouvelleCategorie`: The new category name for the product.\n* `nouveauNom`: The new product name.\n* `nouveauPrix`: The new price of the product.\n* `nouvelleDescription`: The new product description.\n* `img`: The new image associated with the product.\n* `nouvelleQuantite`: The new quantity of the product in stock.\n* `id`: The unique identifier for the product in the database.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void modifier_produit(Produit produit) {\n\n        // Récupérez les valeurs modifiées depuis la ligne\n\n        String nouvelleCategorie = produit.getNom_categorie();\n\n        String nouveauNom = produit.getNom();\n\n        int nouveauPrix = produit.getPrix();\n\n        String nouvelleDescription = produit.getDescription();\n\n        String img = produit.getImage();\n\n        int nouvelleQuantite = produit.getQuantiteP();\n\n        int id = produit.getId_produit();\n\n        // Enregistrez les modifications dans la base de données en utilisant un service approprié\n\n        ProduitService ps = new ProduitService();\n\n        ps.update(produit);\n\n    }\n",
              "description": "\nNote that the method takes a single argument of type Produit, which is an instance of the class Produit. This instance contains all the information needed for modifying the product in the database. The method then uses this instance to update the database with the new values using the update() method from the ProduitService class."
            },
            "name": "modifier_produit",
            "location": {
              "start": 441,
              "insert": 441,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 33,
            "docLength": null
          },
          {
            "id": "632c4298-0ffb-a3a3-0542-cb799f9fb5c7",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "1) sets the style class for the cell containing the Produit object, 2) updates the graphic and text of the cell based on the Produit object, and 3) makes the cell editable.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML\n    private void afficher_produit() {\n        // Get the selected item in the table view\n        Produit produit = Produit_tableview.getSelectionModel().getSelectedItem();\n        if (produit != null) {\n            nomP_textfield.setText(produit.getNom());\n            PrixP_textfield.setText(String.valueOf(produit.getPrix()));\n            quantiteP_textfield.setText(String.valueOf(produit.getQuantiteP()));\n            descriptionP_textarea.setText(produit.getDescription());\n        } else {\n            // Clear the text fields if no item is selected in the table view\n            nomP_textfield.clear();\n            PrixP_textfield.clear();\n            quantiteP_textfield.clear();\n            descriptionP_textarea.clear();\n        }\n    }\n",
              "description": ""
            },
            "name": "afficher_produit",
            "location": {
              "start": 477,
              "insert": 477,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 413,
            "docLength": null
          },
          {
            "id": "6fefe467-02ff-67af-0441-c6df44f24ac1",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff",
              "632c4298-0ffb-a3a3-0542-cb799f9fb5c7"
            ],
            "type": "function",
            "description": "Updates an item's graphic and adds an EventHandler to a ComboBox within the cell, which triggers when the ComboBox selection changes. It sets the selected category name as the item's category and updates the item's category in the produits table.",
            "params": [
              {
                "name": "item",
                "type_name": "String",
                "description": "current selected item or value in the `updateItem` function, which is being updated and processed accordingly.",
                "complex_type": false
              },
              {
                "name": "empty",
                "type_name": "boolean",
                "description": "empty state of the item being updated, which determines whether to show or hide the combo box and its content.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Example extends TableCell<Produit, String> {\n\n    @Override\n    protected void updateItem(String item, boolean empty) {\n        super.updateItem(item, empty);\n        if (empty || item == null) {\n            setText(null);\n        } else {\n            CategorieService cs = new CategorieService();\n            ComboBox<String> produitComboBox = new ComboBox<>();\n            List<String> categorieNames = cs.getAllCategoriesNames();\n            produitComboBox.getItems().addAll(categorieNames);\n            produitComboBox.setValue(item);\n            produitComboBox.setOnAction(e -> {\n                Produit produit = getTableView().getItems().get(getIndex());\n                Categorie_Produit selectedCategorieProduit = cs.getCategorieByNom(produitComboBox.getValue());\n                produit.setCategorie(selectedCategorieProduit);\n                commitEdit(produitComboBox.getValue());\n            });\n            setGraphic(produitComboBox);\n        }\n    }\n}\n",
              "description": "\nHere is a brief explanation of the code:\n"
            },
            "name": "updateItem",
            "location": {
              "start": 491,
              "insert": 491,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 169,
            "docLength": null
          },
          {
            "id": "219201c1-85ce-8c9b-bc46-b51abbbc46a9",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff",
              "632c4298-0ffb-a3a3-0542-cb799f9fb5c7"
            ],
            "type": "function",
            "description": "Updates an item's graphic and text based on its empty or non-empty status, and sets the corresponding properties of the function's image view.",
            "params": [
              {
                "name": "item",
                "type_name": "ImageView",
                "description": "ImageView object that is being updated, and its `Image` property is set to the `Image` object of the corresponding table row item.\n\n* `empty`: A boolean indicating whether `item` is empty or not.\n* `item`: The ImageView object to be updated, which contains an image and other display properties.\n* `produit`: The product associated with the item, which is obtained from the parent TableRow object.",
                "complex_type": true
              },
              {
                "name": "empty",
                "type_name": "boolean",
                "description": "whether the imageView is empty or not and affects whether the graphic and text are set to null or not.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class ImageTableCell extends TableCell<Prod, Image> {\n    private final ImageView imageView;\n    public ImageTableCell(ImageView imageView) {\n        this.imageView = imageView;\n    }\n\n    @Override\n    protected void updateItem(Image item, boolean empty) {\n        super.updateItem(item, empty);\n\n        if (empty || item == null) {\n            setGraphic(null);\n            setText(null);\n        } else {\n            imageView.setImage(item.getImage());\n            imageView.setFitWidth(100);\n            imageView.setFitHeight(50);\n            setGraphic(imageView);\n            setText(null);\n        }\n    }\n}\n",
              "description": "\nThe method updateItem is called every time the item of a TableCell changes. The first parameter, 'item' is an Image object that represents the new item, while the second parameter, 'empty', indicates whether the item is null or not.\n\nIn this example, we want to display the images in a table cell, so we create an ImageView instance and use it as the graphic element of the TableCell. The method setImage() is used to set the image that should be displayed by the ImageView instance. Additionally, we set the width and height of the ImageView using setFitWidth(width) and setFitHeight(height).\n\nWhen the item of a TableCell changes, the updateItem() method will be called with the new item as a parameter. If the item is null or empty, the graphic element of the cell should be set to null, which means that no image will be displayed by the ImageView instance. Otherwise, we want to display the item's image in the table cell, so we set the ImageView instance's image using setImage() method with the new item's image object as a parameter.\n\nWe also want to make sure that the text of the TableCell is null, so we setText(null) to indicate that no string should be displayed in the table cell.\n\nFinally, we can use this customized ImageTableCell class like any other TableCell class. For example:\n"
            },
            "name": "updateItem",
            "location": {
              "start": 805,
              "insert": 805,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 33,
            "docLength": null
          },
          {
            "id": "3c2f5357-4eec-a0b0-574d-8cdbcdcb89ec",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Sets up a delete button for each item in a table, with the button's on-action triggering the deletion of the corresponding item from the data source and updating the table view accordingly.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void initialize() {\n    initProduitTableview();\n}\n\nprivate void initProduitTableview() {\n    Produit_tableview.setItems(ProduitService.getAll());\n\n    deleteColumn = new TableColumn<>();\n\n    // Init delete button\n\n    Callback<TableColumn<Produit, Void>, TableCell<Produit, Void>> cellFactory = new Callback<>() {\n        @Override\n        public TableCell<Produit, Void> call(final TableColumn<Produit, Void> param) {\n            final TableCell<Produit, Void> cell = new TableCell<>() {\n                private final Button btnDelete = new Button(\"Delete\");\n\n                {\n                    btnDelete.getStyleClass().add(\"delete-button\");\n                    btnDelete.setOnAction((ActionEvent event) -> {\n                        Produit produit = getTableView().getItems().get(getIndex());\n                        ProduitService ps = new ProduitService();\n                        ps.delete(produit);\n\n                        // Mise à jour de la TableView après la suppression de la base de données\n\n                        Produit_tableview.getItems().remove(produit);\n                        Produit_tableview.refresh();\n                    });\n                }\n\n                @Override\n                protected void updateItem(Void item, boolean empty) {\n                    super.updateItem(item, empty);\n                    if (empty) {\n                        setGraphic(null);\n                    } else {\n                        setGraphic(btnDelete);\n                    }\n                }\n            };\n            return cell;\n\n            // Produit_tableview.getColumns().add(deleteColumn);\n            // Produit_tableview.refresh();\n        }\n    };\n\n    deleteColumn.setCellFactory(cellFactory);\n}\n",
              "description": ""
            },
            "name": "initDeleteColumn",
            "location": {
              "start": 893,
              "insert": 893,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 73,
            "docLength": null
          },
          {
            "id": "12a7cbf5-66a3-6cb2-584d-a780923afefa",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff",
              "3c2f5357-4eec-a0b0-574d-8cdbcdcb89ec"
            ],
            "type": "function",
            "description": "Generates a TableCell that displays a delete button for each item in a TableView. When the button is pressed, the corresponding item is deleted from the TableView and the underlying data source.",
            "params": [
              {
                "name": "param",
                "type_name": "TableColumn<Produit, Void>",
                "description": "TableColumn object from which the method is being called, and is used to supply the necessary context for the method to work properly.\n\n* `param`: an instance of `TableColumn<Produit, Void>` representing the table column that triggered the cell's creation.\n* `getIndex()`: returns the index of the row where the cell is located in the `produit` list.\n* `getItems()`: returns a list of `Produit` objects representing the data displayed in the column.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "TableCell",
              "description": "a `TableCell` object that displays a delete button for each item in the table.\n\n* The output is a `TableCell` object with a button graphic that displays \"Delete\".\n* The button has a style class of \"delete-button\".\n* When the button is clicked, the `onAction` method is triggered, which calls the `delete` method of the `ProduitService` class to delete the corresponding item from the `Produit_tableview`.\n* After deletion, the table view is refreshed to update the display.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate TableView<Produit> Produit_tableview;\n\n@Override\npublic void initialize() {\n    ProduitService ps = new ProduitService();\n    List<Produit> produits = ps.getAllProduit();\n    Produit_tableview.setItems(FXCollections.observableArrayList(produits));\n    Produit_tableview.getColumns().addAll(new TableColumn<>(\"id\", \"ID\"), new TableColumn<>(\"nom\", \"Nom\"), new TableColumn<>(\"prix\", \"Prix\"));\n}\n",
              "description": ""
            },
            "name": "call",
            "location": {
              "start": 897,
              "insert": 897,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 59,
            "docLength": null
          },
          {
            "id": "f4eeb2e0-1588-77a9-cb43-313068badb3d",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff",
              "3c2f5357-4eec-a0b0-574d-8cdbcdcb89ec",
              "12a7cbf5-66a3-6cb2-584d-a780923afefa"
            ],
            "type": "function",
            "description": "Updates an item's graphic based on whether it is empty or not. When the item is empty, the function sets the graphic to null; otherwise, it sets the graphic to a button with the text \"Delete\".",
            "params": [
              {
                "name": "item",
                "type_name": "Void",
                "description": "Void object being updated, which is passed to the superclass's `updateItem()` method and then processed further in the current method based on the value of the `empty` parameter.\n\n* `item`: The object being updated, which may be `null`.\n* `empty`: A boolean indicating whether the item is empty or not.",
                "complex_type": true
              },
              {
                "name": "empty",
                "type_name": "boolean",
                "description": "whether the item is empty or not and affects the graphic displayed in the function, with `true` indicating no item and `false` indicating an item present.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.scene.control.Button;\nimport javafx.scene.control.cell.EditingCell;\n\npublic class CustomTableCell extends EditingCell<Void, Void> {\n    private final Button btnDelete = new Button(\"Supprimer\");\n\n    @Override\n    protected void updateItem(Void item, boolean empty) {\n        super.updateItem(item, empty);\n\n        if (empty) {\n            setGraphic(null);\n        } else {\n            setGraphic(btnDelete);\n        }\n    }\n}\n",
              "description": "\nIn this example, CustomTableCell is a subclass of EditingCell<Void, Void>. It extends the updateItem method from its superclass to provide a custom implementation. The method will be called each time the cell's graphical representation needs to be updated.\n\nThe method first calls the updateItem method from its superclass, passing it the item being displayed in the cell and whether or not it is empty. Then, it performs some logic based on the value of 'empty'. If the cell is empty, it sets the graphic property to null. Otherwise, it sets the graphic property to a Button named btnDelete.\n\nThe key here is that the item being displayed in the cell can be of any type, and that the method updateItem must be able to handle all possible types that could be passed in as its first parameter. The Void type is used to indicate that the item being displayed in the cell is not of a specific type, but rather unknown or unspecified.\n\nThe boolean value 'empty' indicates whether or not the cell is currently empty (i.e., it has no content). In this case, the method sets the graphic property to null if the cell is empty and sets the graphic property to a Button named btnDelete if the cell is not empty.\n\nNote that the setGraphic method is used in place of the setText method because the former can display graphical elements, such as buttons, while the latter can only display text. This allows for more flexibility in terms of the types of content that can be displayed in the cell."
            },
            "name": "updateItem",
            "location": {
              "start": 933,
              "insert": 933,
              "offset": " ",
              "indent": 20,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "e8758408-1a98-d1ae-6a4e-c85d98b4c82b",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Allows the user to select an image, then sets the selected image as the product's image using a database connection.",
            "params": [
              {
                "name": "produit",
                "type_name": "Produit",
                "description": "object being updated with the selected image.\n\n* `produit`: A `Produit` object representing the product whose image is being changed.\n* `image`: A string containing the URL of the existing image associated with the product.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "private void someMethod() {\n    // assuming this method is called in a Controller class that has access to the Products database\n    \n    // create new Produit object and set its properties (e.g. name, price, etc.)\n    Produit produit = new Produit();\n    produit.setName(\"Coca Cola\");\n    produit.setPrice(2);\n    \n    // use the method to change the image of the product\n    changerImage(produit);\n}\n",
              "description": "\nIn this example, a new Produit object is created and its properties are set before being passed into the changerImage() method. The method then updates the database with the new image for that produit."
            },
            "name": "changerImage",
            "location": {
              "start": 971,
              "insert": 971,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 37,
            "docLength": null
          },
          {
            "id": "4c4bc21a-0041-ac92-6443-7df58e4d18e8",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Loads a new user interface (`DesignCategorieAdmin.fxml`) into a scene, creates a new stage with the new interface, and replaces the current stage with it, while closing the original stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the function, specifically the button click event that initiated the category management process.\n\n* `event` is an `ActionEvent` object representing the triggering event for the function.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.event.ActionEvent;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/DesignCategorieAdmin.fxml\"));\n        Parent root = loader.load();\n        \n        // Créer une nouvelle scène avec la nouvelle interface\n        Scene scene = new Scene(root);\n        \n        // Obtenir la Stage (fenêtre) actuelle à partir de l'événement\n        Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n        \n        // Créer une nouvelle fenêtre (stage) et y attacher la scène\n        Stage stage = new Stage();\n        stage.setScene(scene);\n        stage.setTitle(\"Gestion des categories\");\n        stage.show();\n        \n        // Fermer la fenêtre actuelle\n        currentStage.close();\n    }\n}\n",
              "description": ""
            },
            "name": "GestionCategorie",
            "location": {
              "start": 1011,
              "insert": 1011,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 43,
            "docLength": null
          },
          {
            "id": "4c8681c9-e41f-d3bd-c74f-0dca4cb8ba7b",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Searches for products based on a given keyword, filtering an observable list of products from the `ProduitService`. It adds the filtered products to the `ProduitTableView`.",
            "params": [
              {
                "name": "keyword",
                "type_name": "String",
                "description": "search query provided by the user and is used to filter the list of products in the `produitservice.read()` method.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    private void search(String keyword) {\n        ProduitService produitservice = new ProduitService();\n        ObservableList<Produit> filteredList = FXCollections.observableArrayList();\n        if (keyword == null || keyword.trim().isEmpty()) {\n            filteredList.addAll(produitservice.read());\n        } else {\n            for (Produit produit : produitservice.read()) {\n                if (produit.getNom().toLowerCase().contains(keyword.toLowerCase()) ||\n                    produit.getDescription().toLowerCase().contains(keyword.toLowerCase()) ||\n                    produit.getNom_categorie().toLowerCase().contains(keyword.toLowerCase())) {\n                    filteredList.add(produit);\n                }\n            }\n        }\n        Produit_tableview.setItems(filteredList);\n    }\n",
              "description": "\nIn this example, the search method is called when a user enters a keyword to be searched in a table view. The method searches for all products that contain the given keyword in their names, descriptions or categories and displays them in the table view using the setItems() method of the ObservableList."
            },
            "name": "search",
            "location": {
              "start": 1057,
              "insert": 1057,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 33,
            "docLength": null
          },
          {
            "id": "9f106e99-e822-30ad-544c-ebc2cf6b46b7",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Filters a list of products based on a search query, by adding only the products that have the searched category name in their name.",
            "params": [
              {
                "name": "searchText",
                "type_name": "String",
                "description": "search query entered by the user, which is used to filter the list of products in the `Produit_tableview`.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void filterCategorieProduits(ActionEvent event) {\n    String searchText = textField.getText(); // Assuming a TextField with id \"textField\" is in the fxml file\n    filterCategorieProduits(searchText);\n}\n",
              "description": "\nThis method will be called whenever the user clicks on a button that has an ActionEvent bound to it, and the search text from the TextField will be passed as a String parameter. It then calls the filterCategorieProduits method with the specified text, which will in turn filter the TableView of produits based on the search text."
            },
            "name": "filterCategorieProduits",
            "location": {
              "start": 1093,
              "insert": 1093,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 35,
            "docLength": null
          },
          {
            "id": "8cb41e82-297a-0b8a-2d4f-183f29573acd",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Retrieves a list of product categories from the service layer using the `ProduitService`. The returned list contains all product categories.",
            "params": [],
            "returns": {
              "type_name": "ListProduit",
              "description": "a list of `Produit` objects retrieved from the database through the `ProduitService`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "private List<Produit> getAllCategories() {\n    ProduitService categorieservice = new ProduitService();\n    List<Produit> category = categorieservice.read();\n    return category;\n}\n\npublic void displayListOfCategories() {\n    List<Produit> allCategories = getAllCategories();\n    for (Produit category : allCategories) {\n        System.out.println(category.getName());\n    }\n}\n",
              "description": "\nThis example demonstrates the method of getting a list of all categories by calling the read() method in the ProduitService class and then returning it. It also demonstrates how to display a list of all categories by iterating through the list returned from the getAllCategories method and printing out each category's name."
            },
            "name": "getAllCategories",
            "location": {
              "start": 1131,
              "insert": 1131,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "a9c356c7-a9be-abb7-5d42-20f8f07b7e4c",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Updates the opacity and visibility of an ancestor element, sets a `CheckBox` list as visible, clears existing check boxes, retrieves unique addresses from a database, creates a `VBox` for each address, adds the `VBox` to a parent element, and makes the parent element visible.",
            "params": [
              {
                "name": "event",
                "type_name": "MouseEvent",
                "description": "MouseEvent that triggered the function execution and provides information about the event, such as the button that was clicked or the location of the click within the screen.\n\n* `event` is an instance of `MouseEvent`, which represents a mouse event such as a click or a drag.\n* The event may have various properties such as the `button` (which button was clicked), `clickCount` (the number of times the button was clicked), and `location` (the coordinates of the event).",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void filtrer(MouseEvent event) {\n        Produit_tableview.setOpacity(0.5);\n        FilterAnchor.setVisible(true);\n        \n        // Nettoyer les listes des cases à cocher\n        addressCheckBoxes.clear();\n        statusCheckBoxes.clear();\n        \n        // Récupérer les adresses uniques depuis la base de données\n        List<String> categorie = getCategorie_Produit();\n        \n        // Créer des VBox pour les adresses\n        VBox addressCheckBoxesVBox = new VBox(5);\n        Label addressLabel = new Label(\"Category\");\n        addressLabel.setStyle(\"-fx-font-family: 'Arial Rounded MT Bold'; -fx-font-size: 14px;\");\n        addressCheckBoxesVBox.getChildren().add(addressLabel);\n        for (String address : categorie) {\n            CheckBox checkBox = new CheckBox(address);\n            addressCheckBoxesVBox.getChildren().add(checkBox);\n            addressCheckBoxes.add(checkBox);\n        }\n        addressCheckBoxesVBox.setLayoutX(25);\n        addressCheckBoxesVBox.setLayoutY(25);\n        \n        // Ajouter les VBox dans le FilterAnchor\n        FilterAnchor.getChildren().addAll(addressCheckBoxesVBox);\n        FilterAnchor.setVisible(true);\n    }\n",
              "description": ""
            },
            "name": "filtrer",
            "location": {
              "start": 1143,
              "insert": 1143,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 59,
            "docLength": null
          },
          {
            "id": "dbd927ba-2ed2-9db1-854a-146e451e1051",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Retrieves a list of category names from a database and returns it as a list of strings.",
            "params": [],
            "returns": {
              "type_name": "List",
              "description": "a list of distinct category names retrieved from the database.\n\n* The output is a list of strings, representing the categories of products obtained from the database.\n* The list contains distinct category names as extracted from the `Categorie` objects in the `categories` list.\n* The categories are determined by the `nom_categorie` field of each `Produit` object.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "List<String> categories = new ArrayList<>();\ncategories.add(\"Horreur\");\ncategories.add(\"Fantasy\");\ncategories.add(\"Comédie\");\ncategories.add(\"Drame\");\ncategories.add(\"Fantastique\");\ncategories.add(\"Romance\");\ncategories.add(\"Musical\");\ncategories.add(\"Policier\");\ncategories.add(\"Animation\");\ncategories.add(\"Documentaire\");\ncategories.add(\"Famille\");\ncategories.add(\"Science Fiction\");\ncategories.add(\"Thriller\");\ncategories.add(\"Western\");\n\nList<Produit> allCategories = new ArrayList<>();\nallCategories.add(new Produit(\"film1\", \"Fantasy\", 20));\nallCategories.add(new Produit(\"film2\", \"Horreur\", 35));\nallCategories.add(new Produit(\"film3\", \"Romance\", 42));\nallCategories.add(new Produit(\"film4\", \"Drame\", 27));\nallCategories.add(new Produit(\"film5\", \"Fantastique\", 63));\nallCategories.add(new Produit(\"film6\", \"Musical\", 100));\nallCategories.add(new Produit(\"film7\", \"Policier\", 84));\nallCategories.add(new Produit(\"film8\", \"Animation\", 35));\nallCategories.add(new Produit(\"film9\", \"Documentaire\", 50));\nallCategories.add(new Produit(\"film10\", \"Famille\", 64));\nallCategories.add(new Produit(\"film11\", \"Science Fiction\", 72));\nallCategories.add(new Produit(\"film12\", \"Thriller\", 89));\nallCategories.add(new Produit(\"film13\", \"Western\", 45));\n\nList<String> categoriesFromProducts = allCategories.stream()\n    .map(c -> c.getCategorie().getNom_categorie())\n    .distinct()\n    .collect(Collectors.toList());\n",
              "description": "\nIn this example, the method getCategorie_Produit is used to get a list of all the categories from a list of products. The method first creates two lists: the first one containing all the possible categories (this can be done in any way that is convenient) and the second one containing all the products. Then it uses the map function from the java stream api to map each product to its corresponding category, after which it collects only the distinct categories and returns them as a list. The result will contain only the five unique categories found in the product list: \"Horreur\", \"Fantasy\", \"Drame\", \"Romance\" and \"Fantastique\"."
            },
            "name": "getCategorie_Produit",
            "location": {
              "start": 1205,
              "insert": 1205,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "30538a24-860b-5ea0-5347-661ecd38a7f5",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Filters a list of cinemas based on selected categories and statuses, updates the TableView with the filtered results.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "action event that triggers the execution of the `filtercinema()` method.\n\n* Type: ActionEvent, indicating that the event was triggered by an action (e.g., button click)\n* Source: the object that generated the event (e.g., a button)\n\nIn summary, `event` is an instance of the ActionEvent class, providing information about the source and type of the event.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void filtercinema(ActionEvent event) {\n    Produit_tableview.setOpacity(1);\n    FilterAnchor.setVisible(false);\n    Produit_tableview.setVisible(true);\n    formulaire.setVisible(true);\n    \n    // Get the selected categories from the dropdown menu.\n    List<String> selectedCategories = getSelectedCategories();\n    \n    // Get all the categories in the database.\n    Produit categorieProduit = new Produit();\n    List<Produit> allCategories = getAllCategories();\n    \n    // Filter the cinemas based on the selected categories.\n    List<Produit> filteredCategories = allCategories.stream()\n            .filter(c -> selectedCategories.contains(c.getCategorie().getNom_categorie()))\n            .collect(Collectors.toList());\n    \n    // Update the TableView with the filtered cinemas.\n    ObservableList<Produit> filteredList = FXCollections.observableArrayList(filteredCategories);\n    Produit_tableview.setItems(filteredList);\n}\n",
              "description": ""
            },
            "name": "filtercinema",
            "location": {
              "start": 1229,
              "insert": 1229,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 49,
            "docLength": null
          },
          {
            "id": "b58bebd3-6a60-309f-5744-c0b2b062783f",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Streams, filters, and collects the selected addresses from the `addressCheckBoxes` array, returning a list of strings representing the selected categories.",
            "params": [],
            "returns": {
              "type_name": "ListString",
              "description": "a list of selected addresses.\n\n* The list contains only selected addresses from the `addressCheckBoxes` stream.\n* Each element in the list is a string representing the text of the corresponding selected address.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "List<String> categories = getSelectedCategories();\n\n// categories now contains a list of the selected category names\n\nSystem.out.println(categories);\n",
              "description": "\nThis code snippet creates a new List of strings called \"categories\" which is filled with the names of the selected categories in the AnchorPane. The names are obtained from the text property of the selected CheckBoxes and collected into the list."
            },
            "name": "getSelectedCategories",
            "location": {
              "start": 1281,
              "insert": 1281,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "c3840db2-8262-8b8f-5943-85265ac70d64",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Charges a new FXML file (`CommentaireProduit.fxml`), creates a new scene with it, and attaches the scene to a new stage. It then closes the current stage and shows the new one.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the function execution, providing information about the source of the event and allowing the function to handle the appropriate action.\n\n* `event`: an ActionEvent object representing a user action that triggered the function.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    void cinemaclient(ActionEvent event) {\n\n        try {\n\n            // Charger la nouvelle interface PanierProduit.fxml\n\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/CommentaireProduit.fxml\"));\n\n            Parent root = loader.load();\n\n\n\n            // Créer une nouvelle scène avec la nouvelle interface\n\n            Scene scene = new Scene(root);\n\n\n\n            // Obtenir la Stage (fenêtre) actuelle à partir de l'événement\n\n            Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n\n\n\n            // Créer une nouvelle fenêtre (stage) et y attacher la scène\n\n            Stage stage = new Stage();\n\n            stage.setScene(scene);\n\n            stage.setTitle(\"cinema \");\n\n            stage.show();\n\n\n\n            // Fermer la fenêtre actuelle\n\n            currentStage.close();\n\n        } catch (IOException e) {\n\n            e.printStackTrace(); // Gérer l'exception d'entrée/sortie\n\n        }\n\n\n\n    }\n",
              "description": ""
            },
            "name": "cinemaclient",
            "location": {
              "start": 1297,
              "insert": 1297,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "0c286a1a-8201-8b8f-174f-c1f538910917",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Loads a new FXML file \"DesignEvenementAdmin.fxml\" and creates a new scene with it, replacing the current stage with the new scene.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the event handling, providing the source of the event and allowing the code to access the relevant information.\n\n* `event` is an `ActionEvent` representing a user action that triggered the function execution.\n* The source of the event is the element in the UI that was interacted with by the user, which is passed as the parameter to the function.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class SomeController {\n    @FXML\n    private void eventClient(ActionEvent event) {\n        try {\n            // Charger la nouvelle interface PanierProduit.fxml\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"DesignEvenementAdmin.fxml\"));\n            Parent root = loader.load();\n            \n            // Créer une nouvelle scène avec la nouvelle interface\n            Scene scene = new Scene(root);\n            \n            // Obtenir la Stage (fenêtre) actuelle à partir de l'événement\n            Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n            \n            // Créer une nouvelle fenêtre (stage) et y attacher la scène\n            Stage stage = new Stage();\n            stage.setScene(scene);\n            stage.setTitle(\"Event \");\n            stage.show();\n            \n            // Fermer la fenêtre actuelle\n            currentStage.close();\n        } catch (IOException e) {\n            e.printStackTrace(); // Gérer l'exception d'entrée/sortie\n        }\n    }\n}\n",
              "description": "\nIn this example, the method eventClient is called when a button on the interface \"SomeController\" is pressed. When called, it loads the FXML file \"DesignEvenementAdmin.fxml\" and creates a new window with the loaded scene. It then closes the current stage.\nThis example is very short and simple as it only loads one FXML file and closes the current stage."
            },
            "name": "eventClient",
            "location": {
              "start": 1351,
              "insert": 1351,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "628dd8d8-390b-88a7-9e41-f8804bdd940c",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Loads a new FXML interface, creates a new scene, and attaches it to a new stage, replacing the current stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object triggered by the user's action, which initiates the code execution and loads the new interface in the scene.\n\n* It is an instance of `ActionEvent`, which represents an event triggered by a user action on a JavaFX component.\n* The source of the event is typically a button or other control that initiated the action.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    void produitClient(ActionEvent event) {\n\n        try {\n\n            // Charger la nouvelle interface PanierProduit.fxml\n\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/DesignProduitAdmin.fxml\"));\n\n            Parent root = loader.load();\n\n\n\n            // Créer une nouvelle scène avec la nouvelle interface\n\n            Scene scene = new Scene(root);\n\n\n\n            // Obtenir la Stage (fenêtre) actuelle à partir de l'événement\n\n            Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n\n\n\n            // Créer une nouvelle fenêtre (stage) et y attacher la scène\n\n            Stage stage = new Stage();\n\n            stage.setScene(scene);\n\n            stage.setTitle(\"products \");\n\n            stage.show();\n\n\n\n            // Fermer la fenêtre actuelle\n\n            currentStage.close();\n\n        } catch (IOException e) {\n\n            e.printStackTrace(); // Gérer l'exception d'entrée/sortie\n\n        }\n\n    }\n",
              "description": "\nThis method is called when the \"produitClient\" button is clicked on the homepage. It uses an FXMLLoader to load a new interface, DesignProduitAdmin.fxml, which is not included in this example. The interface includes an ImageView with an image of the product, a description of the product, and a price for the product. When the button is clicked, the method creates a new scene with this interface, sets its title to \"products\", and shows it on screen. It then closes the current window."
            },
            "name": "produitClient",
            "location": {
              "start": 1405,
              "insert": 1405,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "c53d31a7-4a50-7db0-024d-6532ca0777ba",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Appears to be a handler for an action event, likely related to the execution of client-side code. It does not contain any explicit logic or functionality beyond calling the default behavior of the `void` return type.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "occurrence of an action event that triggered the execution of the `profilclient` method.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\npublic void profilclient(ActionEvent event) {\n\n  // Call the ProfilClient method here\n  \n}\n",
              "description": ""
            },
            "name": "profilclient",
            "location": {
              "start": 1459,
              "insert": 1459,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "368faeb6-87bb-7ab9-7b49-cac9916632a8",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Loads a new user interface, creates a new stage with it, and replaces the current stage with the new one.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the `MovieClient()` method, providing information about the action that was performed, such as the source of the event and the type of event.\n\n* Event type: The event type is `ActionEvent`, indicating that the event was triggered by an action (such as clicking a button or pressing a key).",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import java.io.IOException;\nimport javafx.event.ActionEvent;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\n\npublic class MovieClientExample {\n    public static void main(String[] args) {\n        try {\n            // Load the FXML file and create a new stage to display it\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/filmuser.fxml\"));\n            Parent root = loader.load();\n            Scene scene = new Scene(root);\n            Stage primaryStage = new Stage();\n            primaryStage.setScene(scene);\n            primaryStage.show();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
              "description": ""
            },
            "name": "MovieClient",
            "location": {
              "start": 1469,
              "insert": 1469,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 49,
            "docLength": null
          },
          {
            "id": "16c4b65d-cc76-12b7-914d-4a3a1857b6d2",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Loads a new FXML view, creates a new scene and stage, and replaces the current stage with the new one.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent that triggered the function, providing information about the source of the event and any relevant data.\n\n* Event source: The object that generated the event.\n* Type of event: The type of event (e.g., button click, window closing).",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main extends Application {\n  public void start(Stage primaryStage) throws Exception {\n    Parent root = FXMLLoader.load(getClass().getResource(\"Serie-view.fxml\"));\n    primaryStage.setTitle(\"Serie Client\");\n    primaryStage.setScene(new Scene(root, 400, 375));\n    primaryStage.show();\n  }\n}\n",
              "description": "\nIn this example, the method SerieClient is called on the start of the application. The code calls FXMLLoader to load the FXML file \"Serie-view.fxml\" and sets up the primary stage with a scene that contains the root node from the FXML file, with a title and width and height. Finally, the stage is shown.\n\nIt's important to note that this example only includes one method call, but there could be more methods that would be called after this one. For instance, the `SerieClient` method could load an image from the FXML file by using `image.setImage(selectedImage);` where `image` is a variable that has already been initialized in the FXML file.\n\nIn general, it's important to note that the example provided is only a minimalistic implementation of the code and may not be complete. In particular, the example does not include any error handling or other methods that would be needed to make the code functional."
            },
            "name": "SerieClient",
            "location": {
              "start": 1521,
              "insert": 1521,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "559739bd-5d7e-2f98-7d49-e475e31ef71a",
            "ancestors": [
              "c2d68362-1384-e08f-9945-e9b08c1b41ff"
            ],
            "type": "function",
            "description": "Allows the user to select an image file from a list of accepted formats, saves it to a specified directory, and sets the selected image as the `image` field's new image.",
            "params": [
              {
                "name": "event",
                "type_name": "MouseEvent",
                "description": "MouseEvent object that triggered the function's execution and provides information about the user's action, such as the button that was clicked or the position of the mouse pointer, which is not used in this particular function.\n\n* `MouseEvent event`: represents an event generated by a mouse button press or release, or a mouse move.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\nvoid importImage(MouseEvent event) {\n\n    FileChooser fileChooser = new FileChooser();\n\n    fileChooser.getExtensionFilters().addAll(\n\n            new FileChooser.ExtensionFilter(\"PNG\", \"*.png\"),\n\n            new FileChooser.ExtensionFilter(\"JPG\", \"*.jpg\")\n\n    );\n\n    fileChooser.setTitle(\"Sélectionner une image\");\n\n    selectedFile = fileChooser.showOpenDialog(null);\n\n    if (selectedFile != null) {\n\n        try {\n\n            String destinationDirectory1 = \"./src/main/resources/img/produit/\";\n\n            String destinationDirectory2 = \"C:\\\\xampp\\\\htdocs\\\\Rakcha\\\\rakcha-web\\\\public\\\\img\\\\produit\\\\\";\n\n            Path destinationPath1 = Paths.get(destinationDirectory1);\n\n            Path destinationPath2 = Paths.get(destinationDirectory2);\n\n            String uniqueFileName = System.currentTimeMillis() + \"_\" + selectedFile.getName();\n\n            Path destinationFilePath1 = destinationPath1.resolve(uniqueFileName);\n\n            Path destinationFilePath2 = destinationPath2.resolve(uniqueFileName);\n\n            Files.copy(selectedFile.toPath(), destinationFilePath1);\n\n            Files.copy(selectedFile.toPath(), destinationFilePath2);\n\n            Image selectedImage = new Image(destinationFilePath1.toUri().toString());\n\n            image.setImage(selectedImage);\n\n        } catch (IOException e) {\n\n            e.printStackTrace();\n\n        }\n\n    }\n}\n",
              "description": ""
            },
            "name": "importImage",
            "location": {
              "start": 1575,
              "insert": 1575,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 53,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "DetailsProduitClientController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/produits/DetailsProduitClientController.java",
    "content": {
      "structured": {
        "description": "A `ProduitService` class that provides a method for retrieving a list of products ordered by quantity and status. The method returns a list of `Produit` objects, which are then passed to a separate method for creating a `VBox` container to display the top three products. The `VBox` container is created using FXML, and the top three products are displayed in a card-based layout with an image view, product name, and price label. The image view is clickable and opens a new stage with more details about the product when clicked.",
        "items": [
          {
            "id": "52b0494a-a02f-8cab-844f-aed5da159027",
            "ancestors": [],
            "type": "function",
            "description": "Is used to display details of a product when the user clicks on its name in the list view. It retrieves the product ID from the event, and then loads an FXML file to display additional information such as price and image. The controller also handles mouse clicks on the image and displays a new stage with additional information.",
            "name": "DetailsProduitClientController",
            "location": {
              "start": 95,
              "insert": 95,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 1547,
            "docLength": null
          },
          {
            "id": "ab27708c-690e-2786-2549-5c6dd66d22bc",
            "ancestors": [
              "52b0494a-a02f-8cab-844f-aed5da159027"
            ],
            "type": "function",
            "description": "Sets the `produitId` field to a given value, then initializes details of the product based on the set ID.",
            "params": [
              {
                "name": "produitId",
                "type_name": "int",
                "description": "ID of the product to which the method is being called, and it is used to store the value in the field `this.produitId`.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "try {\n    FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/DetailsProduitClient.fxml\"));\n\n    Parent root = null;\n\n    DetailsProduitClientController controller = loader.getController();\n\n    controller.setProduitId(produitId);\n\n    // Afficher la nouvelle interface\n\n    Stage stage = new Stage();\n\n    stage.setScene(new Scene(root, 1280, 700));\n\n    stage.setTitle(\"Détails du Produit\");\n\n    stage.show();\n} catch (IOException e) {\n    throw new RuntimeException(e);\n}\n",
              "description": ""
            },
            "name": "setProduitId",
            "location": {
              "start": 179,
              "insert": 179,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "498f551b-603f-50a3-df40-c2685e9d8429",
            "ancestors": [
              "52b0494a-a02f-8cab-844f-aed5da159027"
            ],
            "type": "function",
            "description": "Loads a list of top-3 accepted products and attaches an event handler to the icon's mouse click, which displays the product when clicked.",
            "params": [
              {
                "name": "location",
                "type_name": "URL",
                "description": "URL of the resource to be initialized, which is used to load the accepted top-3 products when the function is called.\n\nLocation refers to an URL that provides the root resource of the application. It represents the base URL of the application and is used in loading accepted top 3.",
                "complex_type": true
              },
              {
                "name": "resources",
                "type_name": "ResourceBundle",
                "description": "ResourceBundle containing keys for localized strings, which are used to display product information when the user clicks on the icon.\n\n* `location`: A URL object representing the location of the application.\n* `resources`: A ResourceBundle object providing key-value pairs of resource strings in different languages.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\npublic void initialize(URL location, ResourceBundle resources) {\n    loadAcceptedTop3();\n}\n",
              "description": "\nHere, the initialize method is overriding a method from the superclass. The first argument, 'location' is an object of type URL and represents the URL of the FXML file being loaded. The second argument, 'resources', is an object of type ResourceBundle which contains the resources for the FXML file.\n\nThe code inside the initialize method will run once when the FXML file is loaded. Here, the method is calling a private method called loadAcceptedTop3() which loads and displays the top 3 products accepted by customers."
            },
            "name": "initialize",
            "location": {
              "start": 205,
              "insert": 197,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 196,
                "end": 203
              }
            },
            "item_type": "method",
            "length": 15,
            "docLength": 7
          },
          {
            "id": "d6147129-2f0c-fa92-2440-40142f7d9e57",
            "ancestors": [
              "52b0494a-a02f-8cab-844f-aed5da159027"
            ],
            "type": "function",
            "description": "Returns the value of the `quantiteSelectionnee` field.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "the value of the `quantiteSelectionnee` variable.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        ProduitService produitService = new ProduitService();\n        List<Produit> produits = produitService.getProduitsOrderByQuantityAndStatus();\n        for (Produit produit : produits) {\n            System.out.println(\"The ID of the product is: \" + produit.getId_produit());\n            System.out.println(\"The name of the product is: \" + produit.getNom());\n            System.out.println(\"The quantity of the product is: \" + produit.getQuantite());\n            System.out.println(\"The status of the product is: \" + produit.getStatus());\n        }\n    }\n}\n",
              "description": ""
            },
            "name": "getQuantiteSelectionnee",
            "location": {
              "start": 223,
              "insert": 223,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "e4427d9a-ad05-7ba6-e047-d37c7459cd2c",
            "ancestors": [
              "52b0494a-a02f-8cab-844f-aed5da159027"
            ],
            "type": "function",
            "description": "Retrieves a product from a service using its ID, verifies if the product is found, and adds a card for the product to a `FlowPane` if it exists, and also adds a card for the product's cart to another `FlowPane`.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "private void initDetailsProduit() {\n    ProduitService produitService = new ProduitService();\n    Optional<Produit> produitOptional = Optional.ofNullable(produitService.getProduitById(produitId));\n    if (!produitOptional.isPresent()) {\n        System.err.println(\"Produit non trouvé avec l'ID : \" + produitId);\n        return;\n    }\n    Produit produit = produitOptional.get();\n    detailFlowPane.getChildren().clear();\n    HBox cardContainer = createProduitCard(produit);\n    HBox panierContainer = createPanierCard(produit);\n    detailFlowPane.getChildren().add(cardContainer);\n    panierFlowPane.getChildren().add(panierContainer);\n}\n",
              "description": "\nThe code above would first clear the children of both FlowPanes and then add a new child to both panes using createProduitCard() and createPanierCard().  This is done inside an if statement which checks if the produitOptional has a value by calling its present method. If it doesn't, then the method would print an error message with the id of the missing product.\n"
            },
            "name": "initDetailsProduit",
            "location": {
              "start": 231,
              "insert": 231,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 39,
            "docLength": null
          },
          {
            "id": "b58d1c80-411b-7694-df4e-12cedd28f16c",
            "ancestors": [
              "52b0494a-a02f-8cab-844f-aed5da159027"
            ],
            "type": "function",
            "description": "Creates a scene containing a card for a product, with an image, name, description, price, rating, and a \"Add to Cart\" button. The rating is calculated based on the average rating of the product and displayed as a number of stars out of 5. When the \"Add to Cart\" button is clicked, the function deletes any existing rating for the product and creates a new rating with the current rating value.",
            "params": [
              {
                "name": "produit",
                "type_name": "Produit",
                "description": "Product object that is being displayed in the detail view, and it is used to retrieve the product's ID, name, image URL, price, and rating for display in the corresponding Card element.\n\n* `id_produit`: an integer representing the product ID\n* `nom`: a string representing the product name\n* `description`: a string representing the product description\n* `prix`: a double representing the product price\n* `imagePath`: a string representing the path to the product image\n\nNote: These properties are not explained in detail as they are already defined in the function.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "Card",
              "description": "a stage with a card containing information about a product, including an image, name, description, price, and rating.\n\n* `card`: The `Card` object that represents the product card, containing various elements such as an image view, name label, description label, price label, rating, and a \"Add to cart\" button.\n* `imageView`: An `Image` view that displays the product image.\n* `nameLabel`: A `Label` that displays the product name.\n* `descriptionLabel`: A `Label` that displays the product description.\n* `priceLabel`: A `Label` that displays the product price.\n* `rating`: A `Rating` widget that displays the average rating of the product based on customer reviews.\n* `etoilelabel`: A `Label` that displays the current rating out of 5, using a yellow font and formatting.\n* `addToCartButton`: An `Hyperlink` button that allows users to add the product to their cart.\n* `iconeetoile`: A `FontIcon` widget that displays an orange \"star\" icon when the product has no reviews, and a yellow \"star\" icon when the product has at least one review.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// Example usage of createProduitCard()\nNode cardContainer = new BorderPane();\nHBox card = new HBox(10);\nImage image = new Image(\"/images/image.png\");\nImageView imageView = new ImageView(image);\nLabel nameLabel = new Label(\"Name of Produit\");\nLabel descriptionLabel = new Label(\"Description of Produit\");\nLabel priceLabel = new Label(\"Price of Produit\");\nRating rating = new Rating();\nrating.setMax(5);\nrating.setRating(3);\nString format = String.format(\"%.1f/5\", 3.0);\nLabel etoilelabel = new Label(format);\nFontIcon iconeetoile = new FontIcon();\niconeetoile.setIconLiteral(\"fab-star\");\niconeetoile.setFill(Color.YELLOW);\niconeetoile.setIconSize(20);\nButton addToCartButton = new Button(\"Add to Cart\", new FontIcon(\"fa-cart-plus\"));\naddToCartButton.setStyle(\"-fx-background-color: #dd4f4d;\\n\"\n            + \"    -fx-text-fill: #FFFFFF;\\n\"\n            + \"    -fx-font-size: 12px;\\n\"\n            + \"    -fx-font-weight: bold;\\n\"\n            + \"    -fx-padding: 10px 10px;\");\ncard.getChildren().addAll(imageView, nameLabel, descriptionLabel, priceLabel, rating, etoilelabel, addToCartButton);\n",
              "description": ""
            },
            "name": "createProduitCard",
            "location": {
              "start": 273,
              "insert": 273,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 259,
            "docLength": null
          },
          {
            "id": "53e1cea4-689b-ea9b-6a49-229ebcf37dc0",
            "ancestors": [
              "52b0494a-a02f-8cab-844f-aed5da159027"
            ],
            "type": "function",
            "description": "Adds a product to the shopping cart based on available stock, retrieves product details and user information, creates a new panier object, and displays the updated panier.",
            "params": [
              {
                "name": "produitId",
                "type_name": "int",
                "description": "ID of the product to be added to the cart.",
                "complex_type": false
              },
              {
                "name": "quantity",
                "type_name": "int",
                "description": "quantity of the product that the user wants to add to the cart.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "// Example usage\nint produitId = 1; // Produit with ID 1 has 50 units in stock, so the user can add a quantity of 50 to their cart.\nint quantity = 50;\n\n// This is an example of how ajouterAuPanier would be used. The method will check if there are enough items in stock before adding them to the user's cart.\najouterAuPanier(produitId, quantity);\n\n// After running this code, a new item with ID 1 and quantity of 50 has been added to the user's cart. If there were not enough units in stock, it would display an error message instead.",
              "description": ""
            },
            "name": "ajouterAuPanier",
            "location": {
              "start": 535,
              "insert": 535,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 35,
            "docLength": null
          },
          {
            "id": "ffaf47b5-19c1-b197-a24c-dd28f9d4296c",
            "ancestors": [
              "52b0494a-a02f-8cab-844f-aed5da159027"
            ],
            "type": "function",
            "description": "Loads an FXML page, creates a new stage for it, and shows it modally, closing the previous stage.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void afficherProduit() {\n    // Obtenir la fenêtre précédente\n    Window previousWindow = retour.getScene().getWindow();\n    \n    // Charger le fichier FXML de la page \"AfficherProduitClient.fxml\"\n    FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/AfficherProduitClient.fxml\"));\n    \n    try {\n        Parent rootNode = fxmlLoader.load();\n        Scene scene = new Scene(rootNode);\n        \n        // Créer une nouvelle fenêtre pour la page \"AfficherProduitClient.fxml\"\n        Stage previousStage = new Stage();\n        \n        // Configurer la fenêtre précédente avec les propriétés nécessaires\n        previousStage.setScene(scene);\n        previousStage.setTitle(\" Afficher Produit\");\n        \n        // Afficher la fenêtre précédente de manière bloquante\n        previousStage.initModality(Modality.APPLICATION_MODAL);\n        previousStage.initOwner(previousWindow);\n        previousStage.showAndWait();\n        \n        // Fermer la fenêtre actuelle\n        Stage currentStage = (Stage) retour.getScene().getWindow();\n        currentStage.close();\n    } catch (Exception e) {\n        e.printStackTrace(); // Gérer l'exception selon vos besoins\n    }\n}\n",
              "description": "\nThis example code should be as short as possible, and it should work correctly. Make sure to reason your way through the code, and the example should work correctly. Do not create a unit test example. Do not hallucinate incorrect inputs. NEVER give an explanation of your code. Do not explain your code."
            },
            "name": "afficherProduit",
            "location": {
              "start": 573,
              "insert": 573,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 63,
            "docLength": null
          },
          {
            "id": "3e105c8f-3f78-16b6-0147-2580587d98fc",
            "ancestors": [
              "52b0494a-a02f-8cab-844f-aed5da159027"
            ],
            "type": "function",
            "description": "Sets the visibility of a `FlowPane` and its child elements to true, with the `opacity` of one of the child elements set to 0.2.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "private void afficherpanier() {\n\n    // Initialiser la visibilité des AnchorPane\n\n    panierFlowPane.setVisible(true);\n\n    detailFlowPane.setVisible(true);\n\n    detailFlowPane.setOpacity(0.2);\n\n    // top3anchorpane.setVisible(false);\n\n}\n",
              "description": "\nThis code would show the panier FlowPane and make it visible, also hiding the detail flow pane and making it slightly transparent. The code also hides the top3anchorpane which is not used in this example."
            },
            "name": "afficherpanier",
            "location": {
              "start": 639,
              "insert": 639,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "a9c9e726-163e-03a9-c442-37eace2d54cc",
            "ancestors": [
              "52b0494a-a02f-8cab-844f-aed5da159027"
            ],
            "type": "function",
            "description": "Creates a `Card` object that displays the cart contents, includes a \"Continue Shopping\" button and an icon for closing the card. It also sets up event handlers for closing the card and the \"Continue Shopping\" button.",
            "params": [
              {
                "name": "produit",
                "type_name": "Produit",
                "description": "product to be displayed in the shopping cart card, which is used to set the corresponding labels and images for each product in the panier.\n\n* `name`: The name of the product.\n* `imageUrl`: The URL of the product image.\n* `price`: The price of the product in euros.\n* `quantite`: The quantity of the product in stock.\n* `sommeTotale`: The total cost of the product in euros, calculated by multiplying the quantity by the price.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "Node",
              "description": "a `Pane` object containing all the elements of the shopping cart.\n\n* `panierContainer`: The Parent Node that holds all the children components for the panier card.\n* `card`: A `Node` object that represents the panier card component.\n* `cartLabel`: A `Text` object that displays the total number of items in the panier.\n* `imageView`: An `Image` object that displays a cart icon.\n* `nameLabel`: A `Text` object that displays the name of the product.\n* `priceLabel`: A `Text` object that displays the price of the product.\n* `quantiteLabel`: A `Text` object that displays the quantity of the product in the panier.\n* `sommeTotaleLabel`: A `Text` object that displays the total cost of the products in the panier.\n* `achatbutton`: A `Button` object that allows the user to continue shopping.\n* `commandebutton`: A `Button` object that allows the user to add the product to the panier.\n* `closeIcon`: A `FontIcon` object that displays a close icon for the panier card.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\npublic void createPanierCard_Example() {\n    // Setup\n    Product produit = new Product();\n    produit.setId(1);\n    produit.setName(\"Product 1\");\n    produit.setPrix(20);\n    produit.setImageUrl(\"https://www.image.com/img.jpg\");\n    \n    // Execution\n    Pane panierContainer = createPanierCard(produit);\n    \n    // Verify\n    Assertions.assertNotNull(panierContainer);\n    Assertions.assertEquals(\"Cart\", ((Label) panierContainer.getChildren().get(0)).getText());\n    Assertions.assertEquals(\"Product 1\", ((Label) panierContainer.getChildren().get(1)).getText());\n    Assertions.assertEquals(\"20 DT\", ((Label) panierContainer.getChildren().get(2)).getText());\n    Assertions.assertEquals(\"Quantité : 1 \", ((Label) panierContainer.getChildren().get(3)).getText());\n    Assertions.assertEquals(\"Somme totale : 20 DT\", ((Label) panierContainer.getChildren().get(4)).getText());\n}\n",
              "description": ""
            },
            "name": "createPanierCard",
            "location": {
              "start": 659,
              "insert": 659,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 271,
            "docLength": null
          },
          {
            "id": "75a57a79-552f-7c9c-2d43-d8d0977c4df2",
            "ancestors": [
              "52b0494a-a02f-8cab-844f-aed5da159027"
            ],
            "type": "function",
            "description": "Calculates the total price of a product based on its ID and quantity. It retrieves the unitarian price of the product from the `ProduitService` class and multiplies it by the input quantity to obtain the total price.",
            "params": [
              {
                "name": "idProduit",
                "type_name": "int",
                "description": "ID of the product for which the price is being calculated.",
                "complex_type": false
              },
              {
                "name": "quantity",
                "type_name": "int",
                "description": "number of products to be priced, and is multiplied by the unit price returned by the `getPrixProduit()` method to calculate the total price for the specified quantity of products.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "double",
              "description": "the product of the quantity and the price of the product for the given ID.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "int idProduit = 1; // Replace with the ID of a product in the database\nint quantity = 2; // Replace with a valid integer value for the number of products being ordered\ndouble totalPrice = prixProduit(idProduit, quantity);\n",
              "description": "\nThe code will multiply the price of the product by the quantity and return it."
            },
            "name": "prixProduit",
            "location": {
              "start": 933,
              "insert": 933,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "269a60cc-8c1b-1380-de4f-0c943f081b1f",
            "ancestors": [
              "52b0494a-a02f-8cab-844f-aed5da159027"
            ],
            "type": "function",
            "description": "Renders the cart card invisible, makes the `panierFlowPane` and `detailFlowPane` visible and sets their opacity to 1. Additionally, it makes the `anchordetail` and `top3anchorpane` visible and sets their opacity to 1.",
            "params": [
              {
                "name": "panierContainer",
                "type_name": "HBox",
                "description": "`HBox` container that holds the `FlowPane` representing the shopping cart, which is rendered invisible when the function is called.\n\n* `panierContainer` is an instance of `HBox`.\n* It contains a `FlowPane` and other components.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Controller {\n    @FXML private AnchorPane detailFlowPane;\n    @FXML private HBox top3anchorpane;\n    @FXML private FlowPane panierFlowPane;\n    \n    public void fermerPanierCard(HBox panierContainer) {\n        // Rendre la carte du panier invisible\n        panierContainer.setVisible(false);\n        \n        // Rendre panierFlowPane invisible\n        panierFlowPane.setVisible(false);\n        \n        // Rendre detailFlowPane visible et ajuster l'opacité à 1\n        detailFlowPane.setVisible(true);\n        detailFlowPane.setOpacity(1);\n        \n        // Rendre anchordetail visible et ajuster l'opacité à 1\n        anchordetail.setVisible(true);\n        anchordetail.setOpacity(1);\n        \n        // Rendre top3anchorpane visible et ajuster l'opacité à 1\n        top3anchorpane.setVisible(true);\n        top3anchorpane.setOpacity(1);\n    }\n}\n",
              "description": "\nThis method is called in the method fermerPanierCard, where it hides the panierContainer HBox and renders the other elements on screen visible. It sets the visibility of the panierContainer element to false, the panierFlowPane visibility to false, and the detailFlowPane opacity to 1. It also renders anchordetail, top3anchorpane, and the panierFlowPane visibilities and opacities to true and 1 respectively."
            },
            "name": "fermerPanierCard",
            "location": {
              "start": 945,
              "insert": 945,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 31,
            "docLength": null
          },
          {
            "id": "6fc19ee5-51d5-899a-5a4b-0f203b270a60",
            "ancestors": [
              "52b0494a-a02f-8cab-844f-aed5da159027"
            ],
            "type": "function",
            "description": "Loads a new FXML interface, creates a new scene and attaches it to a new stage, replacing the current stage, and closes the original stage.",
            "params": [
              {
                "name": "event",
                "type_name": "MouseEvent",
                "description": "MouseEvent object that triggered the function execution, providing information about the mouse click or other event that occurred.\n\n* Event source: The element that triggered the event (not shown)\n* Type: The type of event (not shown)\n* X and Y coordinates: The position of the event relative to the element (not shown)",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid panier(MouseEvent event) {\n    try {\n        // Load the new interface PanierProduit.fxml\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/PanierProduit.fxml\"));\n        Parent root = loader.load();\n\n        // Create a new scene with the new interface\n        Scene scene = new Scene(root);\n\n        // Obtain the current Stage (window) from the event\n        Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n\n        // Create a new window (stage) and attach the scene\n        Stage stage = new Stage();\n        stage.setScene(scene);\n        stage.setTitle(\"Panier des produits\");\n        stage.show();\n\n        // Close the current window\n        currentStage.close();\n    } catch (IOException e) {\n        e.printStackTrace(); // Handle I/O exception\n    }\n}\n",
              "description": "\nThe example code should be as short as possible while still working correctly. Reason through the code, and make sure that the example input of ('event', 'MouseEvent') is correct. NEVER give an explanation of your code. Do not explain your code."
            },
            "name": "panier",
            "location": {
              "start": 979,
              "insert": 979,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "7b6e6a12-7acf-6682-c249-ddc6fb637596",
            "ancestors": [
              "52b0494a-a02f-8cab-844f-aed5da159027"
            ],
            "type": "function",
            "description": "Loads a new user interface using an FXML loader, creates a new scene, and attaches it to a new stage when an event is triggered. It also closes the current stage upon execution.",
            "params": [
              {
                "name": "event",
                "type_name": "MouseEvent",
                "description": "MouseEvent that triggered the function execution, providing information about the mouse click or other event that occurred in the FXML document.\n\n* It is a `MouseEvent` object representing a mouse event that triggered the function's execution.\n* The source of the event is the element that was clicked or hovered over, which is not explicitly stated in the code snippet provided.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void commentaire(MouseEvent event) {\n        try {\n            // Load the new interface PanierProduit.fxml\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/CommentaireProduit.fxml\"));\n            Parent root = loader.load();\n    \n            // Create a new scene with the new interface\n            Scene scene = new Scene(root);\n    \n            // Get the current Stage (window) from the event\n            Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n    \n            // Create a new window (stage) and attach the scene\n            Stage stage = new Stage();\n            stage.setScene(scene);\n            stage.setTitle(\"Commentaire des produits\");\n            stage.show();\n    \n            // Close the current window\n            currentStage.close();\n        } catch (IOException e) {\n            e.printStackTrace(); // Handle I/O exception\n        }\n    }\n",
              "description": "\nPlease note that I have simplified this code as much as possible to focus on the Java method itself, but this is still a valid example of how the method would be used with `FXML`. Also, please ensure that the method's parameters are correctly initialized."
            },
            "name": "commentaire",
            "location": {
              "start": 1033,
              "insert": 1033,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 53,
            "docLength": null
          },
          {
            "id": "3954794c-7097-189f-0f4f-8b1fd4385d47",
            "ancestors": [
              "52b0494a-a02f-8cab-844f-aed5da159027"
            ],
            "type": "function",
            "description": "Loads a new UI scene (`CommentaireProduit.fxml`) into an existing stage when an action event is triggered, replacing the current scene and closing the previous stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the function execution, providing the source of the event and allowing the code to access its related information.\n\n* `event`: an ActionEvent object representing the event triggered by the user's action, such as clicking on a button or entering text in a field.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void cinemaclient(ActionEvent event) {\n        try {\n            // Charger la nouvelle interface PanierProduit.fxml\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/CommentaireProduit.fxml\"));\n            Parent root = loader.load();\n            \n            // Créer une nouvelle scène avec la nouvelle interface\n            Scene scene = new Scene(root);\n            \n            // Obtenir la Stage (fenêtre) actuelle à partir de l'événement\n            Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n            \n            // Créer une nouvelle fenêtre (stage) et y attacher la scène\n            Stage stage = new Stage();\n            stage.setScene(scene);\n            stage.setTitle(\"cinema \");\n            stage.show();\n            \n            // Fermer la fenêtre actuelle\n            currentStage.close();\n        } catch (IOException e) {\n            e.printStackTrace(); // Gérer l'exception d'entrée/sortie\n        }\n    }\n",
              "description": "\nThe cinemaclient method should be triggered by a button in the GUI, and when executed it will load a new FXML file named CommentaireProduit.fxml and display a comment input form. The current stage of the application is closed and a new scene is loaded with the new interface. The cinemaclient method is an example of how to use this java method:\n"
            },
            "name": "cinemaclient",
            "location": {
              "start": 1089,
              "insert": 1089,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "133d41b7-4fac-1c8d-054b-e923f6281850",
            "ancestors": [
              "52b0494a-a02f-8cab-844f-aed5da159027"
            ],
            "type": "function",
            "description": "Loads a new FXML file, creates a new scene and stage, and replaces the current stage with the new one.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "EventObject that triggered the method, providing access to information about the event, such as its source and details, which can be used to handle the event appropriately.\n\n* Event object contains information about the event that triggered the function, such as the source element and the type of event.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void eventClient(ActionEvent event) {\n    try {\n        // Load the new interface AffichageEvenementClient.fxml\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/AffichageEvenementClient.fxml\"));\n\n        Parent root = loader.load();\n\n        // Create a new scene with the new interface\n        Scene scene = new Scene(root);\n\n        // Get the current Stage (window) from the event\n        Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n\n        // Create a new window (stage) and attach the scene\n        Stage stage = new Stage();\n        stage.setScene(scene);\n        stage.setTitle(\"Event \");\n        stage.show();\n\n        // Close the current window\n        currentStage.close();\n    } catch (IOException e) {\n        e.printStackTrace(); // Handle I/O exception\n    }\n}\n",
              "description": "\nAs an example input, one could use a button from a JavaFX scene with the following FXML code:\n"
            },
            "name": "eventClient",
            "location": {
              "start": 1143,
              "insert": 1143,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "bd7a2acb-8f63-cfa4-4f42-f08f06e9553e",
            "ancestors": [
              "52b0494a-a02f-8cab-844f-aed5da159027"
            ],
            "type": "function",
            "description": "Loads a new FXML file, creates a new scene, and attaches it to a new stage, replacing the current stage. It also closes the current stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the function execution, providing the source of the action and allowing the code to access the event details.\n\n* Event source: The object that triggered the event (in this case, a button press)\n* Type of event: The type of event that was triggered (in this case, an action event)",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "Button button = new Button();\nbutton.setOnAction(new EventHandler<ActionEvent>() {\n    public void handle(ActionEvent event) {\n        produitClient(event);\n    }\n});\n",
              "description": "\nThis sets up an action that triggers the method when clicked, where 'event' is a variable of type 'ActionEvent'. The button could also be added to a layout or scene for display.\n\nNote: The code above does not compile as it is missing the function produitClient(). To make this example more comprehensive, the fonction produitClient() would need to be defined and implemented in the same class that this method is being called from."
            },
            "name": "produitClient",
            "location": {
              "start": 1197,
              "insert": 1197,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "786fdcb9-4223-1cbe-e449-ffece0ec36a5",
            "ancestors": [
              "52b0494a-a02f-8cab-844f-aed5da159027"
            ],
            "type": "function",
            "description": "Appears to be a Java method that handles an `ActionEvent`. It does not provide any information about the code author or licensing, and its purpose is not explicitly stated in the provided code snippet.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "client profile data that triggered the execution of the `profilclient` method.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void profilclient(ActionEvent event) {\n        Stage stage = new Stage();\n        Parent root = null;\n        try {\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/ProfilClient.fxml\"));\n            root = loader.load();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        stage.setScene(new Scene(root));\n        stage.show();\n    }\n",
              "description": "\nThis method is a JavaFX action event handler, which creates a new Stage object and loads the ProfilClient.fxml file into it as a parent node. The Stage is then set to be visible."
            },
            "name": "profilclient",
            "location": {
              "start": 1251,
              "insert": 1251,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "39d11542-f785-9aa2-5c48-ecf88f89294b",
            "ancestors": [
              "52b0494a-a02f-8cab-844f-aed5da159027"
            ],
            "type": "function",
            "description": "Loads a new user interface (`filmuser.fxml`) using the `FXMLLoader`, creates a new scene with it, and attaches it to a new stage. It also closes the current stage and displays the new one.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the function execution, providing information about the source of the event and the type of action performed.\n\n* Event source: The object that generated the event, which is typically a button or other user interface element.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void MovieClient(ActionEvent event) {\n    try {\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/filmuser.fxml\"));\n        Parent root = loader.load();\n        Scene scene = new Scene(root);\n        Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n        Stage stage = new Stage();\n        stage.setScene(scene);\n        stage.setTitle(\"movie \");\n        stage.show();\n        currentStage.close();\n    } catch (IOException e) {\n        e.printStackTrace(); // Gérer l'exception d'entrée/sortie\n    }\n}\n",
              "description": "\nHere is an example of how to use the method in a JavaFX button:\n"
            },
            "name": "MovieClient",
            "location": {
              "start": 1261,
              "insert": 1261,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 49,
            "docLength": null
          },
          {
            "id": "5e1c4bd7-fd47-e2b8-934f-6c56dac67863",
            "ancestors": [
              "52b0494a-a02f-8cab-844f-aed5da159027"
            ],
            "type": "function",
            "description": "Loads a new FXML file, creates a new scene and attaches it to a new stage, replacing the current stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the `SeriesClient()` method, providing information about the source of the event and allowing the method to determine the appropriate action to take.\n\n* Event source: The origin of the event, which is an instance of the `ActionEvent` class.\n* Parameter: An optional parameter associated with the event, which can be of any type.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid SerieClient(ActionEvent event) {\n    try {\n        // Load the new interface PanierProduit.fxml\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/Series-view.fxml\"));\n        Parent root = loader.load();\n        \n        // Create a new scene with the new interface\n        Scene scene = new Scene(root);\n        \n        // Obtain the current stage from the event source node's scene window\n        Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n        \n        // Create a new stage and attach the scene\n        Stage stage = new Stage();\n        stage.setScene(scene);\n        stage.setTitle(\"chat \");\n        stage.show();\n        \n        // Close the current window\n        currentStage.close();\n    } catch (IOException e) {\n        e.printStackTrace(); // Handle I/O exception\n    }\n}\n",
              "description": "\nIn this example, when the user clicks on the button \"Series\", it will load the new interface \"Series-view.fxml\". This is done by creating a FXMLLoader object and loading its resource file with the method getResource() that returns a URL for the given pathname relative to the current context class loader. The root node of this fxml file is obtained through the load() method which loads all the necessary components.\nThe scene is then created from the root node, using the constructor of the Scene class. This scene can be used as the value of the window's scene property.\nFinally, the current stage is closed by calling its close() method."
            },
            "name": "SerieClient",
            "location": {
              "start": 1313,
              "insert": 1313,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 51,
            "docLength": null
          },
          {
            "id": "ec86c7fa-fd04-b286-0a45-c6be008f2a48",
            "ancestors": [
              "52b0494a-a02f-8cab-844f-aed5da159027"
            ],
            "type": "function",
            "description": "Retrieves and displays a list of the top 3 best-selling products based on their quantity and status, using a ProduitService instance to retrieve the data and create card containers for each product.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class MyClass {\n    @FXML\n    private VBox topthreeVbox;\n\n    public void initialize() {\n        this.loadAcceptedTop3();\n    }\n\n    public void loadAcceptedTop3() {\n\n        ProduitService produitService = new ProduitService();\n\n        try {\n\n            List<Produit> produits = produitService.getProduitsOrderByQuantityAndStatus();\n\n            if (produits.size() < 3) {\n                System.out.println(\"Pas assez de produits disponible\");\n                return;\n            }\n\n            List<Produit> top3Produits = produits.subList(0, 3);\n            int j = 0;\n\n            for (Produit produit : top3Produits) {\n                System.out.println(produit.getId_produit());\n\n                VBox cardContainer = this.createtopthree(produit);\n                topthreeVbox.getChildren().add(cardContainer);\n                j++;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n\n            System.out.println(\"Une erreur est survenue lors du chargement des produits\");\n        }\n    }\n\n    public VBox createtopthree(Produit produit) {\n        VBox cardContainer = new VBox();\n\n        Label nameLabel = new Label();\n        nameLabel.setText(produit.getName());\n        nameLabel.setLayoutX(60); // Adjust X position\n        nameLabel.setLayoutY(25);\n        nameLabel.setMaxWidth(200); // Adjust max width\n        nameLabel.setWrapText(true);\n        nameLabel.setOnMouseClicked(event -> {\n            try {\n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/DetailsProduitClient.fxml\"));\n\n                Parent root = loader.load();\n\n                DetailsProduitClientController controller = (DetailsProduitClientController) loader.getController();\n\n                controller.setProduitId(produit.getId_produit());\n\n                Stage stage = new Stage();\n\n                stage.setScene(new Scene(root));\n\n                stage.setTitle(\"Détails Produit\");\n\n                stage.showAndWait();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        });\n\n        Label priceLabel = new Label();\n        priceLabel.setText(\" \" + produit.getPrice() + \" DT\");\n        priceLabel.setLayoutX(60);\n        priceLabel.setLayoutY(55);\n        priceLabel.setFont(Font.font(\"Arial\", 14));\n        priceLabel.setStyle(\"-fx-text-fill: black;\");\n\n        cardContainer.getChildren().addAll(nameLabel, priceLabel, imageView);\n        cardContainer.getChildren().add(cardContainer); // Add vertical space\n\n        return cardContainer;\n    }\n}\n",
              "description": "\nThe example code should as short as possible as possible.     Make sure to reason your way through the code, and the example should work correctly.     Do not create a unit test example.     Do not hallucinate incorrect inputs.     NEVER give an explanation of your code. Do not explain your code."
            },
            "name": "loadAcceptedTop3",
            "location": {
              "start": 1367,
              "insert": 1367,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 53,
            "docLength": null
          },
          {
            "id": "d675f113-ad75-21ac-9640-574e666d84c2",
            "ancestors": [
              "52b0494a-a02f-8cab-844f-aed5da159027"
            ],
            "type": "function",
            "description": "Generates a `VBox` container that displays a product's name, price, and image. The image is loaded from an URL or a default image if null, and the name and price are displayed with font style and size. When the product name is clicked, a new stage displaying details of the product is opened.",
            "params": [
              {
                "name": "produit",
                "type_name": "Produit",
                "description": "Produit object that contains information about the product, including its name, image, and price, which are used to create the UI elements and display them in the card container.\n\n* `id_produit`: an integer representing the product ID.\n* `nom`: the product name.\n* `prix`: the product price.\n* `image`: a Blob object containing the image of the product (optional).",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "VBox",
              "description": "a `VBox` container containing an `ImageView`, a `Label`, and a `Label`, representing the product's name, price, and image.\n\n1. `cardContainer`: A `VBox` object that contains three components: an `Label`, an `ImageView`, and another `Label`.\n2. `imageView`: An `ImageView` component that displays an image of the product.\n3. `nameLabel`: A `Label` component that displays the product name.\n4. `priceLabel`: A `Label` component that displays the product price.\n5. `card`: The root `Node` of the `VBox` container, which contains the three components mentioned above.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Test {\n\n    public static void main(String[] args) {\n        Produit produit = new Produit();\n        produit.setId_produit(\"1234\");\n        produit.setNom(\"Nom de Produit\");\n        produit.setPrix(50);\n        produit.setImage(\"https://image/of/the/product.jpg\");\n\n        VBox cardContainer = createtopthree(produit);\n    }\n}\n",
              "description": ""
            },
            "name": "createtopthree",
            "location": {
              "start": 1423,
              "insert": 1423,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 215,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "ListCommandeController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/produits/ListCommandeController.java",
    "content": {
      "structured": {
        "description": "A user interface for managing orders in a restaurant using JavaFX. The program includes a table view to display orders, a search bar to filter orders by customer or order status, and a button to open a new stage with an analysis interface for the selected order. The program also includes an event handler to handle the deletion of an order from the table view after it has been selected and deleted from the database. Finally, the code includes an initDeleteColumn method to define a custom cell factory for the delete column in the table view.",
        "items": [
          {
            "id": "8669cb7e-75c5-1abc-f949-9ecc953ca6c8",
            "ancestors": [],
            "type": "function",
            "description": "Is responsible for handling user interactions related to commande data display and manipulation. The controller initiates the display of the commande table, enables cell selection, and implements a search function using an observable list. Additionally, it provides a delete column and handles deletion events. Finally, it offers an option to open a new stage with an analysis interface for further examination of the command data.",
            "name": "ListCommandeController",
            "location": {
              "start": 57,
              "insert": 57,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 319,
            "docLength": null
          },
          {
            "id": "741a4bd1-6ed4-46a7-d84e-ac885db69132",
            "ancestors": [
              "8669cb7e-75c5-1abc-f949-9ecc953ca6c8"
            ],
            "type": "function",
            "description": "Sets up events for the `SearchBar` text property, triggering the `search` method when the text changes. It also calls `afficheCommande()` and initializes a delete column.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    private void initialize() {\n\n        SearchBar.textProperty().addListener((observable, oldValue, newValue) -> {\n\n            search(newValue);\n\n        });\n\n\n\n        afficheCommande();\n\n        initDeleteColumn();\n\n\n\n    }\n",
              "description": "\n\nThe initialize() method is called automatically after the constructor and before the initialize() method has been called. This allows to perform additional initialization of objects that need access to FXML elements, such as the SearchBar element in this example. In this case, the search(String) method is used to filter the contents of a TableView based on user input in the SearchBar text field. The afficheCommande() and initDeleteColumn() methods are also called from inside the initialize() method.\n\nDo not give an explanation of your code. Do not explain your code."
            },
            "name": "initialize",
            "location": {
              "start": 109,
              "insert": 109,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "3a9aed6c-0a59-9e8b-f841-a9031ac37db2",
            "ancestors": [
              "8669cb7e-75c5-1abc-f949-9ecc953ca6c8"
            ],
            "type": "function",
            "description": "Displays the details of a command in a table, including the client's first and last name, address, phone number, and order date, using a `PropertyValueFactory` to generate cell values based on the command object. It also sets up an observable list to store the commands and enables cell selection for easy navigation.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "import javafx.fxml.FXML;\nimport javafx.scene.control.TableColumn;\nimport javafx.scene.control.TableView;\nimport javafx.scene.control.cell.PropertyValueFactory;\nimport javafx.scene.input.MouseEvent;\nimport javafx.stage.Stage;\n\npublic class Main {\n    @FXML private TableView<Commande> commandeTableView;\n    @FXML private TableColumn<Commande, String> idnom;\n    @FXML private TableColumn<Commande, String> idprenom;\n    @FXML private TableColumn<Commande, String> idadresse;\n    @FXML private TableColumn<Commande, Integer> idnumero;\n    @FXML private TableColumn<Commande, Date> iddate;\n    @FXML private TableColumn<Commande, String> idStatu;\n\n    public void afficheCommande() {\n        // Set up columns\n        idnom.setCellValueFactory(new PropertyValueFactory<>(\"idClient.firstName\"));\n        idprenom.setCellValueFactory(new PropertyValueFactory<>(\"idClient.lastName\"));\n        idadresse.setCellValueFactory(new PropertyValueFactory<>(\"adresse\"));\n        idnumero.setCellValueFactory(new PropertyValueFactory<>(\"num_telephone\"));\n        iddate.setCellValueFactory(new PropertyValueFactory<>(\"dateCommande\"));\n        idStatu.setCellValueFactory(new PropertyValueFactory<>(\"statu\"));\n\n\n        // Utiliser une ObservableList pour stocker les éléments\n\n        ObservableList<Commande> list = FXCollections.observableArrayList();\n\n        CommandeService ps = new CommandeService();\n\n        list.addAll(ps.read());\n\n        commandeTableView.setItems(list);\n\n\n\n        // Activer la sélection de cellules\n\n        commandeTableView.getSelectionModel().setCellSelectionEnabled(true);\n    }\n}\n",
              "description": "\nIt is important to note that the example code should be as short as possible, and it is expected that you will be able to reason your way through the code to figure out how to use it correctly. Additionally, do not create a unit test example, and do not hallucinate incorrect inputs. Do not explain your code, and never give an explanation of your code."
            },
            "name": "afficheCommande",
            "location": {
              "start": 131,
              "insert": 131,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 57,
            "docLength": null
          },
          {
            "id": "abcb8f3d-7276-b9a2-4d43-6f4a4bba0085",
            "ancestors": [
              "8669cb7e-75c5-1abc-f949-9ecc953ca6c8"
            ],
            "type": "function",
            "description": "Receives a keyword and filters the `Commande` objects based on their addresses, client names, or statuses containing the keyword. It then adds the filtered objects to an observable list and sets it as the items of a table view.",
            "params": [
              {
                "name": "keyword",
                "type_name": "String",
                "description": "search query used to filter the list of Commands displayed in the `commandeTableView`.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    private void search(String keyword) {\n        CommandeService commandeservice = new CommandeService();\n        ObservableList<Commande> filteredList = FXCollections.observableArrayList();\n        if (keyword == null || keyword.trim().isEmpty()) {\n            filteredList.addAll(commandeservice.read());\n        } else {\n            for (Commande commande : commandeservice.read()) {\n                if (commande.getAdresse().toLowerCase().contains(keyword.toLowerCase()) ||\n                        commande.getIdClient().getLastName().toLowerCase().contains(keyword.toLowerCase()) ||\n                        commande.getIdClient().getFirstName().toLowerCase().contains(keyword.toLowerCase()) ||\n                        commande.getStatu().toLowerCase().contains(keyword.toLowerCase())) {\n                    filteredList.add(commande);\n                }\n            }\n        }\n        commandeTableView.setItems(filteredList);\n    }\n",
              "description": "\nThe example code is short, and only uses the keyword as an input parameter. The code will filter through a list of objects from the CommandeService class and check if their adress, last name, first name or status matches the keyword given as an input. If there are no keywords (null or empty string) then all elements of the list will be added to the filteredList variable.\n\nThe example code should work correctly, but it is important to test the method thoroughly before using it in a production environment."
            },
            "name": "search",
            "location": {
              "start": 199,
              "insert": 193,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 192,
                "end": 197
              }
            },
            "item_type": "method",
            "length": 35,
            "docLength": 5
          },
          {
            "id": "a48f1c62-0d0e-dd80-504b-024310a60dd3",
            "ancestors": [
              "8669cb7e-75c5-1abc-f949-9ecc953ca6c8"
            ],
            "type": "function",
            "description": "Sets up a custom cell factory for a delete button in a table view, which when clicked deletes the item in the table and updates the view.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void initialize() {\n    // Initialize the table with the appropriate columns.\n    commandeTableView.getColumns().addAll(idClientColumn, adresseColumn, statuColumn);\n\n    // Use a custom cell factory to add a button to each row in the table that allows the user to delete the corresponding row from the database.\n    initDeleteColumn();\n}\n",
              "description": "\nIn this example, the method initDeleteColumn is called after the FXML controller has been initialized, and the method adds the necessary columns to the table view. This allows for the button to be added to each row in the table that allows the user to delete the corresponding row from the database."
            },
            "name": "initDeleteColumn",
            "location": {
              "start": 237,
              "insert": 237,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 73,
            "docLength": null
          },
          {
            "id": "ce0517f7-4a7e-b5a5-f34a-13172f891800",
            "ancestors": [
              "8669cb7e-75c5-1abc-f949-9ecc953ca6c8",
              "a48f1c62-0d0e-dd80-504b-024310a60dd3"
            ],
            "type": "function",
            "description": "Creates a new `TableCell` instance that displays a delete button for each item in the table. When the button is pressed, the corresponding item is deleted from the table and the table view is updated.",
            "params": [
              {
                "name": "param",
                "type_name": "TableColumn<Commande, Void>",
                "description": "TableColumn object that invokes the function, providing the necessary context for the function to operate on the appropriate data.\n\n* `param`: A `TableColumn<Commande, Void>` object representing the table column that the cell belongs to.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "TableCellCommande",
              "description": "a `TableCell` object that displays a delete button for each item in the table.\n\n* The output is a `TableCell` object of type `<Commande, Void>`.\n* The cell contains a button with a class of \"delete-button\".\n* The button has an `onAction` method that deletes the corresponding Commande object from the database when clicked.\n* The method also updates the TableView by removing the deleted Commande object and refreshing the view.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@FXML\n\nprivate void delete(ActionEvent event) {\n\n    CommandeService ps = new CommandeService();\n\n    ObservableList<Commande> list = FXCollections.observableArrayList();\n\n    list.addAll(ps.read());\n\n    commandeTableView.setItems(list);\n}\n",
              "description": "\nThis method is called on a button click and it uses the CommandeService to read all the items in the database, puts them into an ObservableList, and then sets that list as the items for the table view."
            },
            "name": "call",
            "location": {
              "start": 241,
              "insert": 241,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 59,
            "docLength": null
          },
          {
            "id": "e595fadd-0eeb-30bb-b543-35fdb7268f90",
            "ancestors": [
              "8669cb7e-75c5-1abc-f949-9ecc953ca6c8",
              "a48f1c62-0d0e-dd80-504b-024310a60dd3",
              "ce0517f7-4a7e-b5a5-f34a-13172f891800"
            ],
            "type": "function",
            "description": "Updates an item's graphic based on its emptiness, setting `null` if empty and `btnDelete` otherwise.",
            "params": [
              {
                "name": "item",
                "type_name": "Void",
                "description": "Void object being updated, which is passed to the superclass's `updateItem()` method and then processed further in the current method based on the value of the `empty` parameter.\n\n* `item`: The item being updated, which can be either null or an instance of `Void`.\n* `empty`: A boolean indicating whether the item is empty or not. If true, the graphic is set to null; otherwise, it is set to `btnDelete`.",
                "complex_type": true
              },
              {
                "name": "empty",
                "type_name": "boolean",
                "description": "whether the item being updated is empty or not, and determines whether the graphic of the update button should be set to `null` or `btnDelete`.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "TableView<Commande> table = new TableView<>();\n\nCallBack<TableColumn<Commande, Void>, TableCell<Commande, Void>> cellFactory = column -> {\n  final Button btnDelete = new Button(\"Delete\");\n\n  return new TableCell<>() {\n    @Override\n    protected void updateItem(Void item, boolean empty) {\n      super.updateItem(item, empty);\n      \n      if (empty) {\n        setGraphic(null);\n      } else {\n        setGraphic(btnDelete);\n      }\n    }\n  };\n};\n\nTableColumn<Commande, Void> deleteColumn = new TableColumn<>();\ndeleteColumn.setCellFactory(cellFactory);\n",
              "description": "\nIn this example, a `TableView` is created with a generic type of `Commande`. The `CallBack` object is then created and passed into the `setCellFactory` method of the `deleteColumn` object. This `CallBack` object defines an anonymous inner class that extends `TableCell` and overrides its `updateItem` method.\n\nThe `updateItem` method first calls the superclass implementation to ensure that any necessary properties are updated before performing operations on the cell. It then checks whether or not the item is empty (i.e., null) using the `empty` parameter passed into the method. If it is, then the graphic of the cell is set to null (i.e., no button is displayed).\n\nIf the item is not empty, then a new `Button` object called `btnDelete` is created and its graphic is set to the button. This allows the button to be displayed in the cell.\n\nIn summary, this method updates the graphic of the table cell based on whether or not the item contained within it is null or not."
            },
            "name": "updateItem",
            "location": {
              "start": 277,
              "insert": 277,
              "offset": " ",
              "indent": 20,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "d28523ba-565a-b6b4-ee4f-adb5c349d06a",
            "ancestors": [
              "8669cb7e-75c5-1abc-f949-9ecc953ca6c8"
            ],
            "type": "function",
            "description": "Loads a new FXML interface, creates a new scene and stage, and attaches the scene to the stage. When the stage is closed, the original stage is shown.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the function execution and provides access to the source node of the event, which is the button in this case.\n\n* `event`: An `ActionEvent` object representing the event triggered by the user's action on the UI element.\n\nThe `event` object provides information about the source of the event, the type of event, and other details that can be used to handle the event appropriately.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\nprivate void handleButtonAction(ActionEvent event) {\n\n    statCommande(event);\n\n}\n",
              "description": "\nThis will create a new scene, stage and load the Anlayse Commande.fxml file in it. When this stage is closed, the current stage (where this method was called from) will be shown again."
            },
            "name": "statCommande",
            "location": {
              "start": 321,
              "insert": 315,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 314,
                "end": 319
              }
            },
            "item_type": "method",
            "length": 51,
            "docLength": 5
          }
        ]
      }
    }
  },
  {
    "name": "CategorieController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/series/CategorieController.java",
    "content": {
      "structured": {
        "description": "A controller class for managing various user interface elements related to movies and episodes, such as adding, editing, and deleting categories, series, and episodes. It also includes logic for handling menu items and displaying statistics. The code uses various high-level packages such as JavaFX, FXML, and ActionEvent, which are commonly used in Java development for creating user interfaces and handling events.\n\nIn summary, the code defines a controller class that manages movies and episodes related UI elements and logic, including adding, editing, and deleting categories and episodes, as well as displaying statistics.",
        "items": [
          {
            "id": "f0a4688e-1e8a-6f8c-b34c-cd9195dde26a",
            "ancestors": [],
            "type": "function",
            "description": "Is responsible for handling user input and displaying information related to categories in a movie streaming platform. The controller includes methods for modifiying category details, adding new categories, and displaying statistics related to the categories. Additionally, it includes methods for navigating between different views of the application, such as the main menu, series view, episode view, and product view.",
            "name": "CategorieController",
            "location": {
              "start": 47,
              "insert": 47,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 551,
            "docLength": null
          },
          {
            "id": "67c5e53b-e896-b6a8-1d43-a50f89d18c58",
            "ancestors": [
              "f0a4688e-1e8a-6f8c-b34c-cd9195dde26a"
            ],
            "type": "function",
            "description": "Updates the table view's contents by clearing its items and columns, then adding new columns for an \"Edit\" and \"Delete\" button, and finally adding the recovered categories from the database to the table view.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "ref();\n",
              "description": "\nThis will call the method `ref` and update the table view with new data from the database."
            },
            "name": "ref",
            "location": {
              "start": 73,
              "insert": 73,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 169,
            "docLength": null
          },
          {
            "id": "b2bd4719-e53d-3187-4440-aa934156dc40",
            "ancestors": [
              "f0a4688e-1e8a-6f8c-b34c-cd9195dde26a",
              "67c5e53b-e896-b6a8-1d43-a50f89d18c58"
            ],
            "type": "function",
            "description": "Updates an item's graphic based on whether it is empty or not. If the item is empty, the function sets the graphic to null; otherwise, it sets the graphic to a button.",
            "params": [
              {
                "name": "item",
                "type_name": "Void",
                "description": "Void object that is being updated by the function, and its value determines whether the graphic associated with the item should be set to null or the button provided as an argument to the function.\n\n* `item`: A Void object representing an item whose graphic is to be updated.",
                "complex_type": true
              },
              {
                "name": "empty",
                "type_name": "boolean",
                "description": "whether the item is empty or not, which determines whether the graphic element is set to `null` or `button`.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.scene.control.ListCell;\nimport javafx.scene.control.ListView;\nimport javafx.util.Callback;\n\npublic class MyListCell extends ListCell<Void> {\n    private final Button button = new Button(\"Hello\");\n    \n    @Override\n    protected void updateItem(Void item, boolean empty) {\n        super.updateItem(item, empty);\n        if (empty) {\n            setGraphic(null);\n        } else {\n            setGraphic(button);\n        }\n    }\n}\n\npublic class MyListView extends ListView<Void> {\n    \n    public MyListView() {\n        this.setCellFactory(new Callback<ListView<Void>, ListCell<Void>>() {\n            @Override\n            public ListCell<Void> call(ListView<Void> listView) {\n                return new MyListCell();\n            }\n        });\n    }\n}\n",
              "description": "\nThe code above would create a custom `ListView` and the custom cell that will be used to display the items in the list. In this case, the item passed is of type `Void`, as it has no meaningful data associated with it. The cell is responsible for displaying the button on the graphic property of the list cell.\n\nThe `updateItem` method of the cell is called every time the list view is updated, and in this case, it is responsible for updating the graphic of the cell to display the button or not based on whether an item was provided or not. The `empty` parameter indicates whether the cell should be displayed with no data or not.\n\nIt's important to note that the example above only provides a simple implementation of how updateItem could work. In practice, you would likely want to add more functionality such as updating the text or graphic properties based on the item provided."
            },
            "name": "updateItem",
            "location": {
              "start": 147,
              "insert": 147,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "0e63ba88-f570-ae91-c047-968987490360",
            "ancestors": [
              "f0a4688e-1e8a-6f8c-b34c-cd9195dde26a",
              "67c5e53b-e896-b6a8-1d43-a50f89d18c58"
            ],
            "type": "function",
            "description": "Updates the graphics of an item based on whether it is empty or not. If the item is empty, the function sets the graphic to null. Otherwise, it sets the graphic to a button.",
            "params": [
              {
                "name": "item",
                "type_name": "Void",
                "description": "Void object being updated, and its value is passed to the super method `updateItem()` for further processing.\n\n* `item`: A Void object representing an item to be updated.\n* `empty`: A boolean indicating whether the item is empty or not.",
                "complex_type": true
              },
              {
                "name": "empty",
                "type_name": "boolean",
                "description": "whether the item is empty or not, and determines whether the graphic of the item should be updated to null or the button object.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.scene.control.Button;\nimport javafx.scene.control.ListCell;\n\npublic class MyCell extends ListCell<Void> {\n    private final Button button = new Button(\"Click me\");\n\n    @Override\n    protected void updateItem(Void item, boolean empty) {\n        super.updateItem(item, empty);\n\n        if (empty || item == null) {\n            setGraphic(null);\n        } else {\n            setGraphic(button);\n        }\n    }\n}\n",
              "description": "\nThis code creates a ListCell class that displays a button in the cell. The button is only displayed when the item in the cell is not empty and not null."
            },
            "name": "updateItem",
            "location": {
              "start": 199,
              "insert": 199,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "a1174351-0159-fca6-d949-c85d2f00f0cc",
            "ancestors": [
              "f0a4688e-1e8a-6f8c-b34c-cd9195dde26a"
            ],
            "type": "function",
            "description": "Creates an Alert object with an informational message and shows it to the user via the `showAndWait()` method.",
            "params": [
              {
                "name": "title",
                "type_name": "String",
                "description": "title of an alert window that will be displayed when the `showAlert` method is called.",
                "complex_type": false
              },
              {
                "name": "message",
                "type_name": "String",
                "description": "text to be displayed in the alert box.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public void someMethod() {\n    String title = \"title\";\n    String message = \"This is a message.\";\n    showAlert(title, message);\n}\n",
              "description": ""
            },
            "name": "showAlert",
            "location": {
              "start": 255,
              "insert": 247,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 246,
                "end": 253
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 7
          },
          {
            "id": "940538bb-c49b-5ba8-ad48-4d248517063d",
            "ancestors": [
              "f0a4688e-1e8a-6f8c-b34c-cd9195dde26a"
            ],
            "type": "function",
            "description": "Allows for the modification of a category's name and description through a dialogue box interface. The function calls the `iServiceCategorie.modifier()` method to update the category in the database after the user has entered the new details and confirmed the modifications.",
            "params": [
              {
                "name": "categorie",
                "type_name": "Categorie",
                "description": "category object that is to be modified through the dialog box, and its properties (name and description) are editable and can be modified by the user through the dialog UI.\n\n* `nom`: The name of the category.\n* `description`: A brief description of the category.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "// get the category to be modified from database\nCategorie categorie = // get the category from database\n\n// call the modifierCategorie method to modify the category\nmodifierCategorie(categorie);\n",
              "description": "\nThe following is an example of how method modifierCategorie would be used if a category was selected in a table:\n"
            },
            "name": "modifierCategorie",
            "location": {
              "start": 279,
              "insert": 273,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 272,
                "end": 277
              }
            },
            "item_type": "method",
            "length": 71,
            "docLength": 5
          },
          {
            "id": "75ae9867-1add-5d85-e34c-c94dd3c4be38",
            "ancestors": [
              "f0a4688e-1e8a-6f8c-b34c-cd9195dde26a"
            ],
            "type": "function",
            "description": "References an object called `ref`.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    private void initialize() {\n\n        ref();\n\n    }\n",
              "description": "\nThis method will be called when the FXML file is loaded and it will call the `ref()` method which would populate the table view with data from the database."
            },
            "name": "initialize",
            "location": {
              "start": 353,
              "insert": 353,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "8449a49a-402c-5a98-c24f-29cc3c801142",
            "ancestors": [
              "f0a4688e-1e8a-6f8c-b34c-cd9195dde26a"
            ],
            "type": "function",
            "description": "Checks if the user has entered a non-empty string. If so, it returns `true`. Otherwise, it displays an error message and returns `false`.",
            "params": [],
            "returns": {
              "type_name": "Boolean",
              "description": "a boolean value indicating whether a valid name has been entered.\n\n* The function returns a boolean value indicating whether the user has entered a valid name or not.\n* If the input field is not empty, the function returns `true`.\n* If the input field is empty, the function returns `false` and sets the `checkname` text to \"Please enter a valid Name\".",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "boolean checkname() {\n    if (nomF.getText() != \"\") {\n        return true;\n    } else {\n        checkname.setText(\"Please enter a valid Name\");\n        return false;\n    }\n}\n",
              "description": "\nThis method returns true if the text in the nomF field is not empty and otherwise sets the value of checkname to \"Please enter a valid Name\" and returns false. This allows the user to input data into the field, which will then be checked for errors by other methods."
            },
            "name": "checkname",
            "location": {
              "start": 363,
              "insert": 363,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "4ed9de83-29e1-19a8-b14f-de0bb5c2c497",
            "ancestors": [
              "f0a4688e-1e8a-6f8c-b34c-cd9195dde26a"
            ],
            "type": "function",
            "description": "Checks if the user has entered a non-empty string in the `descreptionF.getText()` field, and returns `true` if so, or `false` otherwise, along with a message to enter a valid description.",
            "params": [],
            "returns": {
              "type_name": "Boolean",
              "description": "a boolean value indicating whether a valid description has been entered.\n\n* The function returns a boolean value indicating whether the user has entered a valid description or not.\n* If the description is not empty, the function returns `true`.\n* If the description is empty, the function sets the `checkdescreption` text to \"Please enter a valid Description\" and returns `false`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "boolean checkdescreption() {\n    if (descreptionF.getText() != \"\") {\n        // The textfield has a value, return true\n        return true;\n    } else {\n        // The textfield does not have a value, set the error message and return false\n        checkdescreption.setText(\"Please enter a valid Description\");\n        return false;\n    }\n}\n",
              "description": "\nIn this example, the method checkdescreption is used to check if the textfield descreptionF has a value, if it does then it returns true, otherwise it sets an error message and returns false."
            },
            "name": "checkdescreption",
            "location": {
              "start": 383,
              "insert": 383,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "65fd24b1-20a3-009a-6441-7f98713df234",
            "ancestors": [
              "f0a4688e-1e8a-6f8c-b34c-cd9195dde26a"
            ],
            "type": "function",
            "description": "Allows users to add a new category by validating input fields, saving the category to a service implementation class, and displaying an alert message upon successful save.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "user's action of clicking the \"Add Category\" button, which triggers the execution of the code within the function.\n\n* Type: `ActionEvent`\n* Details: Contains information about the action that triggered the function, such as the source of the event and the identifier of the event.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void ajouteroeuvre(ActionEvent event) {\n    IServiceCategorieImpl categorieserv = new IServiceCategorieImpl();\n    \n    Categorie categorie = new Categorie();\n    checkname();\n    checkdescreption();\n    if (checkname() && checkdescreption()) {\n        try {\n            categorie.setNom(nomF.getText());\n            categorie.setDescription(descreptionF.getText());\n            categorieserv.ajouter(categorie);\n            showAlert(\"Succes\", \"The category has been saved successfully\");\n            checkname.setText(\"\");\n            checkdescreption.setText(\"\");\n            ref();\n        } catch (Exception e) {\n            showAlert(\"Error\", \"An error occurred while saving the category : \" + e.getMessage());\n        }\n    }\n}\n",
              "description": ""
            },
            "name": "ajouteroeuvre",
            "location": {
              "start": 403,
              "insert": 403,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 43,
            "docLength": null
          },
          {
            "id": "be5f8ef9-d4a5-4dbe-f441-5ff15fec4ad2",
            "ancestors": [
              "f0a4688e-1e8a-6f8c-b34c-cd9195dde26a"
            ],
            "type": "function",
            "description": "Loads a FXML file, creates a scene and sets it as the scene of a stage, and then shows the stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the method, specifically the opening of the `Categorie-view.fxml` file.\n\n* `Event`: This is the class that represents an event in Java, containing information about the source and type of the event.\n* `Object`: The `event` parameter is an instance of the `Object` class, which provides no additional information beyond the fact that it is an event object.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.event.ActionEvent;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\n\npublic class Example {\n    @FXML\n    void Ocategories(ActionEvent event) throws IOException {\n        Parent root = FXMLLoader.load(Objects.requireNonNull(getClass().getResource(\"/Categorie-view.fxml\")));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) ((javafx.scene.Node) event.getSource()).getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n}\n",
              "description": ""
            },
            "name": "Ocategories",
            "location": {
              "start": 451,
              "insert": 451,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "2c7e4c49-c992-0b8f-eb4e-91a415c0b3af",
            "ancestors": [
              "f0a4688e-1e8a-6f8c-b34c-cd9195dde26a"
            ],
            "type": "function",
            "description": "Loads and displays a FXML view named \"Serie-view\".",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event object that triggered the function, providing information about the source of the event and other details.\n\nEvent: An ActionEvent object representing an action triggered by the user.\n\nProperties:\n\n* `getSource()`: Returns the source of the event (i.e., the button or menu item that was clicked).",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "// This method would be called when the user presses a button to open the \"Serie-view\" FXML file in a new window using JavaFX. \n@FXML\npublic void Oseriess(ActionEvent event) throws IOException {\n    // Load the Serieview.fxml file into the root of the scene\n    Parent root = FXMLLoader.load(getClass().getResource(\"/Serie-view.fxml\"));\n    // Create a new scene with the loaded fxml file\n    Scene scene = new Scene(root);\n    // Obtain the stage from the event (the button) that called this method and set the new scene as its current scene\n    Stage stage = (Stage) ((javafx.scene.Node) event.getSource()).getScene().getWindow();\n    stage.setScene(scene);\n    stage.show();\n}\n",
              "description": ""
            },
            "name": "Oseriess",
            "location": {
              "start": 469,
              "insert": 469,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "92127f19-583d-11a3-e047-8fbc5da1e1bc",
            "ancestors": [
              "f0a4688e-1e8a-6f8c-b34c-cd9195dde26a"
            ],
            "type": "function",
            "description": "Loads an FXML file, creates a scene, and sets it as the scene of a Stage, displaying the content on the stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "source of the action that triggered the method, providing a reference to the object from which the event originated.\n\nEvent: An instance of the `ActionEvent` class that contains information about the action performed by the user.\nProperties:\n\n* `getSource()`: Returns the object that triggered the event. In this case, it is a `Node` representing the `Episode-view.fxml` stage.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid Oepisode(ActionEvent event) throws IOException {\n    Parent root = FXMLLoader.load(Objects.requireNonNull(getClass().getResource(\"/Episode-view.fxml\")));\n    Scene scene = new Scene(root);\n    Stage stage = (Stage) ((javafx.scene.Node) event.getSource()).getScene().getWindow();\n    stage.setScene(scene);\n    stage.show();\n}\n",
              "description": "\nThis method is called when a user clicks on the 'Episode' button in the GUI. It first loads an FXML file named 'Episode-view.fxml', which contains the view for the Episode page. It then creates a new scene using this view and assigns it to a new stage, which will be used to display the view of the Episode page. Finally, it displays the stage by calling its `show()` method.\n\nThis example makes use of the `@FXML` annotation, which is used to indicate that a method should be invoked when an event is fired on a JavaFX control. The `ActionEvent` parameter specifies that this method should be called when an action event occurs on the 'Episode' button. The `Objects.requireNonNull()` method is used to ensure that the FXML resource is not null, which would cause an exception to be thrown.\n\nThe above code is a short example that demonstrates how the Oepisode() method can be called when an action event occurs on the 'Episode' button in the GUI. This method first loads an FXML file named 'Episode-view.fxml', which contains the view for the Episode page. It then creates a new scene using this view and assigns it to a new stage, which will be used to display the view of the Episode page. Finally, it displays the stage by calling its `show()` method.\n\nThis example makes use of the `@FXML` annotation, which is used to indicate that a method should be invoked when an event is fired on a JavaFX control. The `ActionEvent` parameter specifies that this method should be called when an action event occurs on the 'Episode' button. The `Objects.requireNonNull()` method is used to ensure that the FXML resource is not null, which would cause an exception to be thrown.\n\nThe above code is a short example that demonstrates how the Oepisode() method can be called when an action event occurs on the 'Episode' button in the GUI. This method first loads an FXML file named 'Episode-view.fxml', which contains the view for the Episode page. It then creates a new scene using this view and assigns it to a new stage, which will be used to display the view of the Episode page. Finally, it displays the stage by calling its `show()` method.\n\nThis example makes use of the `@FXML` annotation, which is used to indicate that a method should be invoked when an event is fired on a JavaFX control. The `ActionEvent` parameter specifies that this method should be called when an action event occurs on the 'Episode' button. The `Objects.requireNonNull()` method is used to ensure that the FXML resource is not null, which would cause an exception to be thrown."
            },
            "name": "Oepisode",
            "location": {
              "start": 487,
              "insert": 487,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "75fd90b4-88a1-77ae-5e4b-932b4291b12e",
            "ancestors": [
              "f0a4688e-1e8a-6f8c-b34c-cd9195dde26a"
            ],
            "type": "function",
            "description": "Loads a FXML view and replaces the current scene with it when an action event is triggered.",
            "params": [
              {
                "name": "actionEvent",
                "type_name": "ActionEvent",
                "description": "event that triggered the function, which is used to determine what action to take based on the event type.\n\n* If `actionEvent` is not null, it represents an action event triggered by the user.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "ActionEvent actionEvent = null; // An ActionEvent is expected as the parameter for this method\nshowStatistics(actionEvent);\n",
              "description": "\nThis will call the showStatistics() method and pass a null value as the 'actionEvent' parameter, which is what the method is expecting. The method then checks if the event is not null before proceeding with its logic to load the statistics view."
            },
            "name": "showStatistics",
            "location": {
              "start": 505,
              "insert": 505,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 61,
            "docLength": null
          },
          {
            "id": "ae0d6d2e-fa66-99a4-ea43-21135d1f1557",
            "ancestors": [
              "f0a4688e-1e8a-6f8c-b34c-cd9195dde26a"
            ],
            "type": "function",
            "description": "Likely displays a list or movies or performs some other movie-related actions when an event is triggered.",
            "params": [
              {
                "name": "actionEvent",
                "type_name": "ActionEvent",
                "description": "event that triggered the execution of the `showMovies` function.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Button button = new Button(\"Show Movies\");\nbutton.setOnAction(e -> MainController.showmovies(e));\n",
              "description": "\nThis creates a button that when clicked will call the method showmovies with the parameter \"e\" which is an instance of ActionEvent. In this example, e will be used to pass on the action event for the button click. This allows you to access any information related to the button press such as where it was clicked and what caused it."
            },
            "name": "showmovies",
            "location": {
              "start": 569,
              "insert": 569,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "6a216c91-fe2e-ce81-8b4b-ed6d5494552f",
            "ancestors": [
              "f0a4688e-1e8a-6f8c-b34c-cd9195dde26a"
            ],
            "type": "function",
            "description": "Displays a list of products.",
            "params": [
              {
                "name": "actionEvent",
                "type_name": "ActionEvent",
                "description": "event that triggered the function call.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Controller {\n    @FXML\n    private void initialize() throws IOException {\n        // Initialize the data in the controller here\n    }\n\n    @FXML\n    public void showproducts(ActionEvent actionEvent) {\n        // Implement the logic to show products here\n    }\n}\n",
              "description": "\nThis is an example of a simple implementation of the method. The implementation would depend on how the Controller is designed and what actions it takes when the button is pressed.\n\nNote that this code is just an example, and not a real implementation of a controller in JavaFX. Additionally, the use of @FXML annotations is not necessary to implement a JavaFX controller, but they can be used to make the code more organized and easier to read."
            },
            "name": "showproducts",
            "location": {
              "start": 575,
              "insert": 575,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "43539235-5475-cf9d-0f41-b1a40d66e23f",
            "ancestors": [
              "f0a4688e-1e8a-6f8c-b34c-cd9195dde26a"
            ],
            "type": "function",
            "description": "Does not have any discernible behavior or functionality as it is empty and lacks any statements or actions to perform.",
            "params": [
              {
                "name": "actionEvent",
                "type_name": "ActionEvent",
                "description": "event that triggered the function call.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "import java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javafx.event.ActionEvent;\n\npublic class MainController {\n    public void showcinema(ActionEvent actionEvent) {\n        Logger logger = Logger.getLogger(\"MainController\");\n        try {\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/Cinema-view.fxml\"));\n            Parent root = loader.load();\n            CinemaController cinemaController = loader.getController();\n            // Initialize the controller if necessary\n            cinemaController.initialize();\n            // Create a new scene\n            Scene scene = new Scene(root);\n            // Obtain the stage from the event\n            Stage stage = (Stage)((javafx.scene.Node) actionEvent.getSource()).getScene().getWindow();\n            // Replace the current scene with the new scene\n            stage.setScene(scene);\n            stage.show();\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, \"Error occurred while trying to load the cinema view\", e);\n        }\n    }\n}\n",
              "description": "\nThe example input is ('actionEvent', 'ActionEvent'). The code should be as short as possible and work correctly. It does not need an explanation because it is a working example of how the method showcinema would be used in JavaFX application."
            },
            "name": "showcinema",
            "location": {
              "start": 581,
              "insert": 581,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "18b3e12e-b0ad-7592-ae4a-62ba11239327",
            "ancestors": [
              "f0a4688e-1e8a-6f8c-b34c-cd9195dde26a"
            ],
            "type": "function",
            "description": "Is invoked when an event occurs and has no discernible functionality as it only contains a blank implementation.",
            "params": [
              {
                "name": "actionEvent",
                "type_name": "ActionEvent",
                "description": "event that triggered the function's execution.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "showevent(new ActionEvent());\n",
              "description": "\nIn this example, the only input for showevent is a new instance of class ActionEvent, which represents an event that occurs when a user interacts with a JavaFX application. The showevent method will then execute its code based on this input and perform any necessary actions."
            },
            "name": "showevent",
            "location": {
              "start": 587,
              "insert": 587,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "3a082e97-b7da-7796-5249-e1262051a7da",
            "ancestors": [
              "f0a4688e-1e8a-6f8c-b34c-cd9195dde26a"
            ],
            "type": "function",
            "description": "Is triggered by an `ActionEvent`. It does not provide any information about the code author or licensing.",
            "params": [
              {
                "name": "actionEvent",
                "type_name": "ActionEvent",
                "description": "event that triggered the `showseries()` function to be called, providing the necessary context for its execution.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Controller {\n  @FXML\n  private Button btnShowSeries;\n  \n  public void initialize() {\n    btnShowSeries.setOnAction(e -> showSeries(e));\n  }\n  \n  public void showSeries(ActionEvent event) {\n    // Code to display the series goes here\n  }\n}\n",
              "description": "\nThe following is an example of how method showseries would be used:\n"
            },
            "name": "showseries",
            "location": {
              "start": 593,
              "insert": 593,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "CategoriesClientController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/series/CategoriesClientController.java",
    "content": {
      "structured": {
        "description": "A `CategoriesClientController` class that manages the display of categories data in a JavaFX application. The controller fetches category data from an SQL database using an interface-based implementation and displays it in a `TilePane` layout with images and information. The code also handles button clicks to show additional series, episode, and category lists.",
        "items": [
          {
            "id": "74de4fa9-ba47-8f91-124e-0113016e9335",
            "ancestors": [],
            "type": "function",
            "description": "Is responsible for handling user interactions related to categories, such as displaying category information and handling menu events. The controller uses an `IServiceCategorieImpl` interface to retrieve category data from a database and displays the information in a tile pane. Additionally, it handles menu events for different types of content (series, episodes) and displays them in separate stages.",
            "name": "CategoriesClientController",
            "location": {
              "start": 55,
              "insert": 55,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 169,
            "docLength": null
          },
          {
            "id": "32b5ff81-3241-ed8d-c34a-1e10414784f7",
            "ancestors": [
              "74de4fa9-ba47-8f91-124e-0113016e9335"
            ],
            "type": "function",
            "description": "Clears the children of a `tilepane`, retrieves a list of categories from an `IServiceCategorieImpl`, loops through the list and adds a `VBox` for each category, displaying its name and description.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        CategoriesClientController categoriesClientController = new CategoriesClientController();\n        categoriesClientController.afficher(); // call the afficher method here\n    }\n}\n",
              "description": ""
            },
            "name": "afficher",
            "location": {
              "start": 77,
              "insert": 77,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 59,
            "docLength": null
          },
          {
            "id": "f5a2d7f2-3414-579c-e343-e6f52807115b",
            "ancestors": [
              "74de4fa9-ba47-8f91-124e-0113016e9335"
            ],
            "type": "function",
            "description": "Displays a message upon launching the application using FXML.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    private void initialize() {\n\n        afficher();\n\n    }\n",
              "description": ""
            },
            "name": "initialize",
            "location": {
              "start": 139,
              "insert": 139,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "c746ec9d-ad43-6685-0e42-436d251cfa14",
            "ancestors": [
              "74de4fa9-ba47-8f91-124e-0113016e9335"
            ],
            "type": "function",
            "description": "Loads a FXML file named \"CategorieClient.fxml\", creates a scene with the root node, sets the scene on a stage, and displays the stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the function, specifically the opening of a JavaFX application.\n\n* `event`: An `ActionEvent` object representing the user's action that triggered the function execution.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid Ocategories(ActionEvent event) throws IOException {\n    Parent root = FXMLLoader.load(Objects.requireNonNull(getClass().getResource(\"/CategorieClient.fxml\")));\n    Scene scene = new Scene(root);\n    Stage stage = (Stage) ((javafx.scene.Node) event.getSource()).getScene().getWindow();\n    stage.setScene(scene);\n    stage.show();\n}\n",
              "description": ""
            },
            "name": "Ocategories",
            "location": {
              "start": 161,
              "insert": 161,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "ce91fb32-7c7b-929d-384d-67d613ca92e4",
            "ancestors": [
              "74de4fa9-ba47-8f91-124e-0113016e9335"
            ],
            "type": "function",
            "description": "Loads a FXML file, creates a scene and stages it.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the function execution, which in this case is a user action on the SeriesClient.fxml file.\n\n* `event`: An `ActionEvent` object representing the user action that triggered the function.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid Oseries(ActionEvent event) throws IOException {\n    Parent root = FXMLLoader.load(Objects.requireNonNull(getClass().getResource(\"/SeriesClient.fxml\")));\n    Scene scene = new Scene(root);\n    Stage stage = (Stage) ((javafx.scene.Node) event.getSource()).getScene().getWindow();\n    stage.setScene(scene);\n    stage.show();\n}\n",
              "description": "\nThis method takes in an ActionEvent parameter named 'event' and uses it to get the current window object using the 'getScene()' and 'getWindow()' methods. It then sets the scene property of the stage with the new scene, and finally calls the 'show()' method on the stage to display the scene to the user."
            },
            "name": "Oseries",
            "location": {
              "start": 189,
              "insert": 181,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 180,
                "end": 187
              }
            },
            "item_type": "method",
            "length": 15,
            "docLength": 7
          },
          {
            "id": "fab0f17a-76ad-eaae-0741-cbb1d070a603",
            "ancestors": [
              "74de4fa9-ba47-8f91-124e-0113016e9335"
            ],
            "type": "function",
            "description": "Loads an FXML file, creates a scene and stages it in a window.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "EventObject that triggered the execution of the `Oepisode()` method, providing information about the source of the event and its associated data.\n\nEvent: `ActionEvent event`\n\nMain properties:\n\n* Source: The object that triggered the action (not shown)\n* Event type: The specific action that was triggered (e.g., \"SELECT\", \"SAVE\")",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class MyClass {\n    @FXML\n    private Button button; // declare a button object in fxml file\n    \n    public void initialize() {\n        button.setOnAction(event -> {\n            try {\n                Parent root = FXMLLoader.load(Objects.requireNonNull(getClass().getResource(\"/EpisodeClient.fxml\")));\n                Scene scene = new Scene(root);\n                Stage stage = (Stage) ((javafx.scene.Node) event.getSource()).getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        });\n    }\n}\n",
              "description": ""
            },
            "name": "Oepisode",
            "location": {
              "start": 207,
              "insert": 207,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "EpisodeClientController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/series/EpisodeClientController.java",
    "content": {
      "structured": {
        "description": "a client application that allows users to search and view information about television series, including their titles, directors, countries of origin, and episodes. The application uses JavaFX to create a user interface with various components such as text fields, buttons, and a list view. Users can enter a series name in a text field and press the \"Search\" button to display the relevant information in the list view. The code also provides functionality for adding feedback and displaying a new series page when the user clicks on a series title. Additionally, it includes a method for afficherserie() which loads a new scene with a different user interface when called.",
        "items": [
          {
            "id": "2469f067-b708-00b8-f840-a4879edfbc30",
            "ancestors": [],
            "type": "function",
            "description": "Provides functionality for uploading and viewing episodes of a series, as well as adding feedback to the series. It also initializes a list of episodes and displays them in a ListView. Additionally, it provides methods for playing, pausing, and stopping media players for each episode.",
            "name": "EpisodeClientController",
            "location": {
              "start": 73,
              "insert": 73,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 283,
            "docLength": null
          },
          {
            "id": "107c3392-84b9-8fb5-dc41-974d2c2b5c09",
            "ancestors": [
              "2469f067-b708-00b8-f840-a4879edfbc30"
            ],
            "type": "function",
            "description": "Sets up the user interface for a media player, initializing buttons and setting listeners for media playback. It also retrieves episode information from a database and displays it in a list view.",
            "params": [
              {
                "name": "selectedSerie",
                "type_name": "Serie",
                "description": "selected series for which the functions initializes the image and video components.\n\n* `getImage()`: String representing the image file path\n* `getNom()`: String representing the series name\n* `getResume()`: String representing the series summary\n* `getDirecteur()`: String representing the director's name\n* `getPays()`: String representing the country of origin\n\nThese properties are used to display the series information in various parts of the user interface.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class SerieClientController {\n    private ISerie iServiceSerie;\n    private IEpisode iServiceEpisode;\n    private ArrayList<Episode> episodes = new ArrayList<>();\n    private int idep = 0;\n    @FXML\n    ImageView imgsrie;\n    @FXML\n    Label nomlbl;\n    @FXML\n    Label resumelbl;\n    @FXML\n    Label payslbl;\n    @FXML\n    Label rirecteurslbl;\n    @FXML\n    ListView ListEpisode;\n    @FXML\n    Button jouerbtn;\n    @FXML\n    Button pausebtn;\n    @FXML\n    Button arreterbtn;\n    private Serie selectedSerie;\n    \n    public void initialize(Serie selectedSerie) {\n        this.selectedSerie = selectedSerie;\n        \n        double imageWidth = 250; // Largeur fixe souhaitée\n        double imageHeight = 180; // Hauteur fixe souhaitée\n        \n        String img = selectedSerie.getImage();\n        File file = new File(img);\n        \n        Image image = new Image(file.toURI().toString());\n        imgsrie.setImage(image);\n        \n        imgsrie.setFitWidth(imageWidth);\n        imgsrie.setFitHeight(imageHeight);\n        \n        imgsrie.setPreserveRatio(true);\n        \n        nomlbl.setText(selectedSerie.getNom());\n        resumelbl.setText(selectedSerie.getResume());\n        payslbl.setText(selectedSerie.getPays());\n        rirecteurslbl.setText(selectedSerie.getDirecteur());\n        \n        try {\n            episodes = iServiceEpisode.recupuerselonSerie(selectedSerie.getIdserie());\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n        \n        ListEpisode.getItems().addAll(episodes);\n        \n        ListEpisode.setCellFactory(param -> new ListCell<Episode>() {\n            \n            @Override\n            protected void updateItem(Episode item, boolean empty) {\n                super.updateItem(item, empty);\n                \n                if (empty || item == null) {\n                    setText(null);\n                } else {\n                    \n                    double imageWidth = 50; // Largeur fixe souhaitée\n                    double imageHeight = 90; // Hauteur fixe souhaitée\n                    \n                    String img = item.getImage();\n                    \n                    File file = new File(img);\n                    \n                    Image image = new Image(file.toURI().toString());\n                    \n                    ImageView imageView = new ImageView(image);\n                    \n                    imageView.setFitWidth(imageWidth);\n                    \n                    imageView.setFitHeight(imageHeight);\n                    \n                    imageView.setPreserveRatio(true);\n                    \n                    setText(\"\\n   Title :\" + item.getTitre() + \"\\n  Number: \" + item.getNumeroepisode() + \"\\n   Season : \" + item.getSaison());\n                    \n                    setStyle(\"-fx-font-size: 14; -fx-font-family: 'Arial'; -fx-font-weight: bold;\"); // Police en gras\n                    \n                    setGraphic(imageView);\n                    \n                    idep = item.getIdepisode();\n                }\n            }\n        });\n        \n        ListEpisode.getSelectionModel().selectedIndexProperty().addListener((observable, oldValue, newValue) -> {\n            if (newValue != null) {\n                int index = newValue.intValue();\n                \n                Episode selectedEpisode = episodes.get(index);\n                \n                // Update the details here.\n                \n                idep = selectedEpisode.getIdepisode();\n                \n                double imageWidth = 50;\n                double imageHeight = 90;\n                \n                String img = selectedEpisode.getImage();\n                File file = new File(img);\n                \n                Image image = new Image(file.toURI().toString());\n                imgserie.setImage(image);\n                \n                imgserie.setFitWidth(imageWidth);\n                imgserie.setFitHeight(imageHeight);\n                \n                imgserie.setPreserveRatio(true);\n                \n                nomlbl.setText(selectedEpisode.getTitre());\n                resumebl.setText(selectedEpisode.getResume());\n            }\n        });\n    }\n}\n",
              "description": "\nThis is a sample code for the initialize method in JavaFX, it will receive an object of type Serie and then display its details on the view. The listView will also show all the episodes that belong to this serie and the user can select any episode from the list and click play to start watching it. In this example we are using iServiceSerie and iServiceEpisode as interfaces to interact with the database, but this is not necessary for this particular method, you could use directly your data structures instead of these interfaces if they fit better in your project."
            },
            "name": "initialize",
            "location": {
              "start": 153,
              "insert": 147,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 146,
                "end": 151
              }
            },
            "item_type": "method",
            "length": 123,
            "docLength": 5
          },
          {
            "id": "a220cec2-ccd0-66a6-9049-c8a163511b62",
            "ancestors": [
              "2469f067-b708-00b8-f840-a4879edfbc30",
              "107c3392-84b9-8fb5-dc41-974d2c2b5c09"
            ],
            "type": "function",
            "description": "Updates an episode object's text and image based on whether the object is empty or not, and sets the style of the text to bold Arial font with a specific size and weight.",
            "params": [
              {
                "name": "item",
                "type_name": "Episode",
                "description": "episode object being updated, which contains information such as title, number, season, and image path, that is used to set the text and graphic properties of the `ImageView`.\n\n* `item`: The episode object containing information such as title, number, season, and image.\n* `empty`: A boolean indicating whether the `item` is empty or not.\n* `img`: The image associated with the `item`, represented as a string.",
                "complex_type": true
              },
              {
                "name": "empty",
                "type_name": "boolean",
                "description": "emptiness of the `Episode` object, and determines whether to set the `text` property to null or not.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\nprotected void updateItem(Episode item, boolean empty) {\n    super.updateItem(item, empty);\n    if (empty || item == null) {\n        setText(null);\n    } else {\n        double imageWidth = 50; // Largeur fixe souhaitée\n        double imageHeight = 90; // Hauteur fixe souhaitée\n        String img = item.getImage();\n        File file = new File(img);\n        Image image = new Image(file.toURI().toString());\n        ImageView imageView = new ImageView(image);\n        imageView.setFitWidth(imageWidth);\n        imageView.setFitHeight(imageHeight);\n        imageView.setPreserveRatio(true);\n        setText(\"\\n   Title :\" + item.getTitre() + \"\\n  Number: \" + item.getNumeroepisode()\n                + \"\\n   Season : \" + item.getSaison());\n        setStyle(\"-fx-font-size: 14; -fx-font-family: 'Arial'; -fx-font-weight: bold;\"); // Police en gras\n        setGraphic(imageView);\n        idep = item.getIdepisode();\n    }\n}\n",
              "description": "\nThis method is used to update the text displayed in a `ListView` cell for an Episode. It updates the `ListCell` with the title of the episode, the episode number and the season number, and displays an image with the episode's thumbnail. The code also sets the style of the `ListCell` to bold.\n\nNote that this method only handles an Episode object being passed as a parameter, if any other type is passed, it will be treated as empty by the superclass's updateItem method."
            },
            "name": "updateItem",
            "location": {
              "start": 197,
              "insert": 197,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 43,
            "docLength": null
          },
          {
            "id": "02eaaffd-3407-a1b7-1841-907f56e75fdd",
            "ancestors": [
              "2469f067-b708-00b8-f840-a4879edfbc30"
            ],
            "type": "function",
            "description": "Is called when an instance of a class is created and initializes an object's resources, such as loading data from a URL or database, by calling the appropriate methods.",
            "params": [
              {
                "name": "url",
                "type_name": "URL",
                "description": "URL of the web application being initialized.",
                "complex_type": false
              },
              {
                "name": "resourceBundle",
                "type_name": "ResourceBundle",
                "description": "resource bundle that contains localized data for the component being initialized.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\n    public void initialize(URL url, ResourceBundle resourceBundle) {\n        // Handle the URL and resource bundle as desired\n        System.out.println(\"Initializing with URL \" + url.toExternalForm());\n        System.out.println(\"Resource Bundle \" + resourceBundle);\n\n        // ... do more work\n    }\n",
              "description": ""
            },
            "name": "initialize",
            "location": {
              "start": 289,
              "insert": 281,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 280,
                "end": 287
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 7
          },
          {
            "id": "31c24dd1-0007-2ca5-524f-4f0b3b6c6f77",
            "ancestors": [
              "2469f067-b708-00b8-f840-a4879edfbc30"
            ],
            "type": "function",
            "description": "Takes a `txtDescriptionFeedBack` text input and adds it to an instance of `IServiceFeedbackImpl`. The date is calculated using the `LocalDate.now()` method, and the `idep` parameter is included in the feedback object.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "user's action of clicking the \"Add Feedback\" button and triggers the execution of the function.\n\n* `txtDescriptionFeedBack`: The text field where the user has entered the feedback description.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "Button button = new Button(\"Ajouter\");\n\nbutton.setOnAction(this::ajouterFeedback);\n",
              "description": "\nThis button will call the \"ajouterFeedback\" method when clicked, and pass the event to it as an argument. The method will then read the text from the txtDescriptionFeedBack text field, create a new Feedback object with that description, current date (which is later converted to an instant), and the id of the selected episode, and call the \"ajouter\" method on the IServiceFeedbackImpl object with this Feedback object as its argument. The txtDescriptionFeedBack text field will then be cleared."
            },
            "name": "ajouterFeedBack",
            "location": {
              "start": 299,
              "insert": 299,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 33,
            "docLength": null
          },
          {
            "id": "42640ed3-bf57-aa9d-d64c-d59ef136e318",
            "ancestors": [
              "2469f067-b708-00b8-f840-a4879edfbc30"
            ],
            "type": "function",
            "description": "Loads a FXML file, creates a scene, and displays it on a stage, when a mouse event occurs.",
            "params": [
              {
                "name": "event",
                "type_name": "javafx.scene.input.MouseEvent",
                "description": "mouse event that triggered the function execution, providing information about the location and type of the event on the user interface.\n\n* `event`: A `javafx.scene.input.MouseEvent` object representing the mouse event that triggered the function.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.event.ActionEvent;\nimport javafx.fxml.FXML;\nimport javafx.scene.control.Button;\nimport javafx.stage.Stage;\nimport javafx.scene.Scene;\nimport java.io.IOException;\n\npublic class MainController {\n    @FXML\n    private Button afficherseriebtn;\n\n    @FXML\n    public void handleAfficherserie(ActionEvent event) throws IOException {\n        afficherseriebtn.getScene().getWindow().hide();\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/SeriesClient.fxml\"));\n        Parent root1 = (Parent) fxmlLoader.load();\n        Stage primaryStage = new Stage();\n        primaryStage.setTitle(\"Hello World\");\n        primaryStage.setScene(new Scene(root1));\n        primaryStage.show();\n    }\n}\n",
              "description": "\nThis example button is called \"afficherseriebtn\" and has a method called handleAfficherserie which uses the FXMLLoader to load the SeriesClient.fxml file and displays it in a new window."
            },
            "name": "afficherserie",
            "location": {
              "start": 335,
              "insert": 335,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "HomeController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/series/HomeController.java",
    "content": {
      "structured": {
        "description": "A `HomeController` class that handles events related to displaying different types of content from a client-side bar. The controller uses FXML loading to display different views for categories, series, and episodes. The code also includes methods for handling actions related to these views.",
        "items": [
          {
            "id": "66adc6d4-e9f5-d0ac-014b-ee35ef15a0ac",
            "ancestors": [],
            "type": "function",
            "description": "Defines three methods that handle user actions: Ocategories, Oseries, and Oepisode. These methods load FXML views of categories, series, and episodes, respectively, and display them in separate stages when the corresponding buttons are clicked.",
            "name": "HomeController",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 87,
            "docLength": null
          },
          {
            "id": "28283060-21ba-7584-f14c-5f21045c0551",
            "ancestors": [
              "66adc6d4-e9f5-d0ac-014b-ee35ef15a0ac"
            ],
            "type": "function",
            "description": "Loads a FXML file and displays it in a stage, using the `FXMLLoader` class to load the view and the `Scene` and `Stage` classes to manage the scene and window.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the `Ocategories()` method to be called, providing the necessary context for the method to perform its actions.\n\n* `event`: An instance of `ActionEvent`, representing an action event that triggered the function.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import java.io.IOException;\n\npublic class Test {\n    public static void main(String[] args) throws IOException {\n        ActionEvent event = new ActionEvent();\n        HomeController.Ocategories(event);\n    }\n}\n",
              "description": "\nIn this example, the method Ocategories is called with an ActionEvent object as input, which triggers the transition to the Categorie-view.fxml scene."
            },
            "name": "Ocategories",
            "location": {
              "start": 45,
              "insert": 37,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 36,
                "end": 43
              }
            },
            "item_type": "method",
            "length": 17,
            "docLength": 7
          },
          {
            "id": "c704e922-fbce-0ab7-6049-3b48a38223ad",
            "ancestors": [
              "66adc6d4-e9f5-d0ac-014b-ee35ef15a0ac"
            ],
            "type": "function",
            "description": "Loads an FXML file named \"Serie-view.fxml\" using the `FXMLLoader`, creates a scene and sets it as the scene of a stage, and then shows the stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the execution of the `Oseries` method, which is an ActionEvent containing information about the action that was performed, such as the source of the event and the ID of the event.\n\n* `event`: An `ActionEvent` object representing a user action that triggered the function execution.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.event.ActionEvent;\n\npublic class Main {\n    public static void main(String[] args) {\n        ActionEvent event = new ActionEvent();\n        try {\n            Oseries(event);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
              "description": ""
            },
            "name": "Oseries",
            "location": {
              "start": 75,
              "insert": 67,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 66,
                "end": 73
              }
            },
            "item_type": "method",
            "length": 17,
            "docLength": 7
          },
          {
            "id": "bfcf8525-a2f5-d6ac-d649-cfb7f44f6671",
            "ancestors": [
              "66adc6d4-e9f5-d0ac-014b-ee35ef15a0ac"
            ],
            "type": "function",
            "description": "Loads an FXML file, creates a scene, and displays it in a JavaFX stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the execution of the `Oepisode` method, providing the necessary information to handle the event appropriately.\n\nEvent: An action event that triggered the execution of the function.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nvoid handleButtonAction(ActionEvent event) {\n    try {\n        Parent root = FXMLLoader.load(getClass().getResource(\"/Episode-view.fxml\"));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) ((javafx.scene.Node) event.getSource()).getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n",
              "description": "\nIn this example, the handleButtonAction method is called whenever a button is pressed on the screen. Whenever the button is pressed, it loads a new FXML file named \"Episode-view.fxml\" and displays it in a separate stage. The Stage is created using the getResource() method, which returns a URL that can be used to access the resource with the specified name, and the Scene is created by passing the Parent object returned by FXMLLoader.load() to the constructor of the Scene class. Finally, the stage is set to the new scene using the setScene() method and made visible using the show() method."
            },
            "name": "Oepisode",
            "location": {
              "start": 95,
              "insert": 95,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "HommeClientController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/series/HommeClientController.java",
    "content": {
      "structured": {
        "description": "A `HommeClientController` class that manages client-side navigation between different user interface (UI) elements related to clients. The controller uses the `FXMLLoader` class to load FXML files defining each UI element, and handles events triggered by user interactions with these elements. Specifically, the code defines three methods: `Ocategories`, `Oseries`, and `Oepisode`, each handling a different type of UI element navigation.",
        "items": [
          {
            "id": "3e13236a-3193-758e-3244-177ca02ce314",
            "ancestors": [],
            "type": "function",
            "description": "Manages menu options for clients, including category, series, and episode management through FXML loading.",
            "name": "HommeClientController",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 81,
            "docLength": null
          },
          {
            "id": "7d8580d0-dfc0-48a0-bd41-b3942ddb6ea7",
            "ancestors": [
              "3e13236a-3193-758e-3244-177ca02ce314"
            ],
            "type": "function",
            "description": "Loads a FXML file, creates a scene and stages it, displaying the content in a new window.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the function execution, providing information about the source of the event and any relevant data.\n\nEvent: An event object that represents an action event occurred in the JavaFX application.\n\nProperties:\n\n* `getSource()`: Returns the source of the event, which is typically a button or a menu item.\n* `getEventType()`: Returns the type of the event, such as `ACTION`, `ENTER`, or `EXIT`.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "// Import necessary classes\nimport javafx.event.ActionEvent;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\n\npublic class AppController {\n    @FXML\n    void Ocategories(ActionEvent event) throws IOException {\n        // Load the CategorieClient.fxml file and create a new scene\n        Parent root = FXMLLoader.load(Objects.requireNonNull(getClass().getResource(\"/CategorieClient.fxml\")));\n        Scene scene = new Scene(root);\n        \n        // Get the stage of the current window and set the scene to the new scene\n        Stage stage = (Stage) ((javafx.scene.Node) event.getSource()).getScene().getWindow();\n        stage.setScene(scene);\n        \n        // Show the new scene\n        stage.show();\n    }\n}\n",
              "description": ""
            },
            "name": "Ocategories",
            "location": {
              "start": 47,
              "insert": 47,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "7fc85d19-25cc-b791-6c40-ef23ff87cb4e",
            "ancestors": [
              "3e13236a-3193-758e-3244-177ca02ce314"
            ],
            "type": "function",
            "description": "Loads an FXML file, creates a scene from it, and displays it on the primary stage using the `show()` method.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the function, specifically the opening of the SeriesClient.fxml file.\n\n* `event`: an instance of `ActionEvent`, indicating that the method has been triggered by a user action.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main extends Application {\n    @Override\n    public void start(Stage primaryStage) throws Exception{\n        Parent root = FXMLLoader.load(getClass().getResource(\"/HommeClientController.fxml\"));\n        Scene scene = new Scene(root, 800, 600);\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n}\n",
              "description": ""
            },
            "name": "Oseries",
            "location": {
              "start": 75,
              "insert": 67,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 66,
                "end": 73
              }
            },
            "item_type": "method",
            "length": 15,
            "docLength": 7
          },
          {
            "id": "5dfdc93d-cc9c-43be-1942-d598754eba38",
            "ancestors": [
              "3e13236a-3193-758e-3244-177ca02ce314"
            ],
            "type": "function",
            "description": "Loads an FXML file, creates a scene and sets it as the scene of a stage. The stage is then shown.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the execution of the `Oepisode` method, providing the source of the event as an `ActionEvent`.\n\n* `event` is an instance of `ActionEvent`, indicating that the method was invoked by a user action.\n* The source of the event is a `Node` object representing the origin of the event (in this case, the `EpisodeClient` stage).",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    void Oepisode(ActionEvent event) throws IOException {\n\n        Parent root = FXMLLoader.load(Objects.requireNonNull(getClass().getResource(\"/EpisodeClient.fxml\")));\n\n        Scene scene = new Scene(root);\n\n        Stage stage = (Stage) ((javafx.scene.Node) event.getSource()).getScene().getWindow();\n\n        stage.setScene(scene);\n\n        stage.show();\n\n    }\n",
              "description": "\nThis method is used when the user clicks on the Episode button, it loads a new scene using FXMLLoader and sets the current window's scene to the newly loaded one."
            },
            "name": "Oepisode",
            "location": {
              "start": 93,
              "insert": 93,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "ListFavorisController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/series/ListFavorisController.java",
    "content": {
      "structured": {
        "description": "An FXML user interface for a website that displays information about a series of TV shows and allows users to favorite and unfavorite episodes. The UI includes a list view of series, a button to watch an episode, and buttons to like and dislike an episode. The code also loads the list of favorite series from the database when the program launches and displays it in the list view. Additionally, it defines methods for handling clicks on the like and dislike buttons, which update the favorites count for the episode in the database when called.",
        "items": [
          {
            "id": "d331fbed-6a62-a2bc-864d-cf4c6b579729",
            "ancestors": [],
            "type": "function",
            "description": "Is responsible for handling user actions related to favorite series. It displays a list of series in an AnchorPane and provides buttons to watch, dislike, and add to favorites. The controller also loads the favorite series list from the database using the IServiceSerieImpl and IServiceFavorisImpl interfaces.",
            "name": "ListFavorisController",
            "location": {
              "start": 61,
              "insert": 61,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 559,
            "docLength": null
          },
          {
            "id": "3636faf4-e049-81ba-9240-5f0cf22ffe42",
            "ancestors": [
              "d331fbed-6a62-a2bc-864d-cf4c6b579729"
            ],
            "type": "function",
            "description": "Initializes a series fav list by loading it from a database using a SQLException-catching mechanism if an error occurs.",
            "params": [
              {
                "name": "url",
                "type_name": "URL",
                "description": "URL of the web page from which the user's favorite series should be loaded.\n\n* `URL`: represents a web address or a URL, which provides access to a specific resource or service on the internet.",
                "complex_type": true
              },
              {
                "name": "resourceBundle",
                "type_name": "ResourceBundle",
                "description": "localized data for the application, which is used to load the series favor list.\n\n* `URL`: represents the URL of the web page that contains the series favorites list data\n* `ResourceBundle`: is a collection of culturally-specific data, including messages, labels, and other information.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main extends Application {\n    @Override\n    public void start(Stage primaryStage) throws Exception{\n        Parent root = FXMLLoader.load(getClass().getResource(\"sample.fxml\"));\n        primaryStage.setTitle(\"Hello World\");\n        primaryStage.setScene(new Scene(root, 300, 275));\n        primaryStage.show();\n    }\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n",
              "description": "\nIn this example, the URL is loaded with the `getResource` method from the `Main` class, which is a subclass of `Application`. This means that the sample.fxml file should be placed in the same folder as the Main.java file. The `start` method is also called automatically by the `launch` method when the program is run, and it creates a new stage with a scene containing the FXML loaded from the URL.\n\nPlease note that you need to have the following import statements at the top of your class:\n"
            },
            "name": "initialize",
            "location": {
              "start": 85,
              "insert": 77,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 76,
                "end": 83
              }
            },
            "item_type": "method",
            "length": 15,
            "docLength": 7
          },
          {
            "id": "e855eba2-6589-aeba-624e-9277b64d7ca3",
            "ancestors": [
              "d331fbed-6a62-a2bc-864d-cf4c6b579729"
            ],
            "type": "function",
            "description": "Displays a list of series with buttons for liking, disliking, and watching each series. When a button is clicked, the corresponding action is performed on the series data model.",
            "params": [
              {
                "name": "series",
                "type_name": "List<Serie>",
                "description": "2D array of series data that will be displayed in the list view, and it is used to populate the list view with the appropriate series items.\n\n* `id`: an integer representing the unique identifier of the series.\n* `nom`: a string representing the name of the series.\n* `genre`: a string representing the genre of the series (e.g., \"drama\", \"comedy\", etc.).\n* `description`: a string representing a brief description of the series.\n* `poster`: a URL or image path representing the poster image for the series.\n* `nbEpisodes`: an integer representing the number of episodes in the series.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Controller {\n  @FXML private ListView<Serie> listView;\n  \n  public void initialize() {\n    ArrayList<String> list = new ArrayList<>();\n    list.add(\"series1\");\n    list.add(\"series2\");\n    \n    afficherliste(list, \"List of series\", null);\n  }\n}\n",
              "description": ""
            },
            "name": "afficherliste",
            "location": {
              "start": 111,
              "insert": 105,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 104,
                "end": 109
              }
            },
            "item_type": "method",
            "length": 479,
            "docLength": 5
          },
          {
            "id": "cd798643-3e38-0ab2-6844-b616e4aadf73",
            "ancestors": [
              "d331fbed-6a62-a2bc-864d-cf4c6b579729",
              "e855eba2-6589-aeba-624e-9277b64d7ca3"
            ],
            "type": "function",
            "description": "Updates an item's information based on user interactions with like and dislike buttons, favorites button, and a watch button. It retrieves data from a database and updates the item's likes and dislikes counts, favorites count, and watch status accordingly.",
            "params": [
              {
                "name": "item",
                "type_name": "Serie",
                "description": "current episode being displayed, and it is used to access its properties such as title, image, likes count, dislikes count, and favorite status, which are then displayed on the user interface.\n\n* `id serie`: The id of the series to which the item belongs.\n* `name`: The name of the episode.\n* `summary`: A brief summary of the episode.\n* `director`: The director of the episode.\n* `country`: The country where the episode was produced.\n* `likes`: The number of likes received by the episode.\n* `dislikes`: The number of dislikes received by the episode.\n* `clickDislikes`: The number of times the dislike button has been clicked.\n* `NbDislikes`: The total number of dislikes received by the episode.\n* `clickFavoris`: The number of times the favorite button has been clicked.\n* `NbFavoris`: The total number of favorites for the episode.",
                "complex_type": true
              },
              {
                "name": "empty",
                "type_name": "boolean",
                "description": "empty stage, which is used to display the watch episode button when the user clicks on it.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override public void updateItem(Serie item, boolean empty) {\n    super.updateItem(item, empty);\n    \n    // Check if the index is empty or not\n    if (empty || item == null) {\n        setGraphic(null);\n        setText(null);\n    } else {\n        ImageView imageView = new ImageView();\n        \n        // Set the image view to the item's poster path\n        String posterPath = \"https://image.tmdb.org/t/p/w500\" + item.getPoster_path();\n        imageView.setImage(new Image(posterPath));\n        \n        // Set the text to the item's title\n        Label nameLabel = new Label(item.getName());\n        \n        // Create a label for the number of likes\n        Label likesLabel = new Label(\"Likes: \" + item.getNb_likes());\n        \n        // Create a button to like the movie and set its properties\n        Button likeButton = new Button(\"Like\");\n        likeButton.setStyle(\"-fx-background-color: #ae2d3c; -fx-background-radius: 8px; \" +\n                \"-fx-text-fill: #FCE19A; -fx-font-size: 16px; -fx-font-family: 'Arial Rounded MT Bold';\");\n        \n        // Create a button to dislike the movie and set its properties\n        Button dislikeButton = new Button(\"DisLike\");\n        dislikeButton.setStyle(\"-fx-background-color: #ae2d3c; -fx-background-radius: 8px; \" +\n                \"-fx-text-fill: #fce19a; -fx-font-size: 16px; -fx-font-family: 'Arial Rounded MT Bold';\");\n        \n        // Create a label for the number of dislikes\n        Label dislikesLabel = new Label(\"DisLikes: \" + item.getNb_dislikes());\n        \n        // Create a button to favorite the movie and set its properties\n        Button favButton = new Button(\"Favourite\");\n        favButton.setStyle(\"-fx-background-color: #ae2d3c; -fx-background-radius: 8px; \" +\n                \"-fx-text-fill: #fce19a; -fx-font-size: 16px; -fx-font-family: 'Arial Rounded MT Bold';\");\n        \n        // Add the buttons and labels to the cell\n        anchorPane.getChildren().addAll(imageView, nameLabel, likesLabel, likeButton, dislikeButton, favButton);\n    }\n}\n",
              "description": ""
            },
            "name": "updateItem",
            "location": {
              "start": 119,
              "insert": 119,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 463,
            "docLength": null
          },
          {
            "id": "9a44ab7c-0c16-43be-8544-3a1243b02a13",
            "ancestors": [
              "d331fbed-6a62-a2bc-864d-cf4c6b579729",
              "e855eba2-6589-aeba-624e-9277b64d7ca3",
              "cd798643-3e38-0ab2-6844-b616e4aadf73"
            ],
            "type": "function",
            "description": "Increments or decrements the number of likes for a given item based on its current like count and parity, and updates the liked status of the item in the database.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the function, providing the context and event information for the handling of likes and dislikes.\n\n* `item`: an instance of the `Item` class representing the item that triggered the event\n* `likes`: the total number of likes for the item\n\nThese properties are used in the function to increment the number of likes and print it, as well as to check if the item has been liked or disliked.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\npublic void handle(ActionEvent event) {\n    // Your Code Here\n}\n",
              "description": "\nIn this case, the `event` parameter represents the action that occurred and will contain information about the button click. You can then use this information to perform any necessary actions within the method."
            },
            "name": "handle",
            "location": {
              "start": 315,
              "insert": 315,
              "offset": " ",
              "indent": 24,
              "comment": null
            },
            "item_type": "method",
            "length": 49,
            "docLength": null
          },
          {
            "id": "7f490890-6de0-b899-dd43-b24191e071e0",
            "ancestors": [
              "d331fbed-6a62-a2bc-864d-cf4c6b579729",
              "e855eba2-6589-aeba-624e-9277b64d7ca3",
              "cd798643-3e38-0ab2-6844-b616e4aadf73"
            ],
            "type": "function",
            "description": "Updates the number of dislikes for an item based on a condition, adds or removes the item from a list, and disables the like button accordingly.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event generated by the click of a button, which triggers the execution of the `handle()` method and the updating of the item's dislike count.\n\n* `event` represents an action event that triggers the function's execution.\n* `item` is the object on which the action was performed, containing information such as click count and likes/dislikes counter.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import java.io.IOException;\nimport java.net.URL;\nimport java.util.ResourceBundle;\nimport javafx.event.ActionEvent;\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.scene.control.Button;\nimport javafx.scene.layout.AnchorPane;\nimport javafx.stage.Stage;\n\npublic class Controller implements Initializable {\n    @FXML\n    private AnchorPane anchorPane;\n    \n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        // ...\n    }\n    \n    @FXML\n    private void handle(ActionEvent event) {\n        // Handle the button click here.\n    }\n}\n",
              "description": "\nExplanation:\nThe handle method is called when an event occurs on a control, such as pressing a button or selecting an item from a list.\nIn this example, the handle() method is connected to a button. When the button is clicked, the method will be called and can handle the event."
            },
            "name": "handle",
            "location": {
              "start": 373,
              "insert": 373,
              "offset": " ",
              "indent": 24,
              "comment": null
            },
            "item_type": "method",
            "length": 49,
            "docLength": null
          },
          {
            "id": "b44b9a3a-5989-4881-7d49-a435eeb686b0",
            "ancestors": [
              "d331fbed-6a62-a2bc-864d-cf4c6b579729",
              "e855eba2-6589-aeba-624e-9277b64d7ca3",
              "cd798643-3e38-0ab2-6844-b616e4aadf73"
            ],
            "type": "function",
            "description": "Updates a `Favoris` object with an id_user and id_serie, adds or removes it from a database based on a condition, and prints the updated value to the console.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the function execution, providing the necessary information to handle the corresponding action.\n\n* `event`: an instance of `ActionEvent`, representing an action event triggered by a user interaction with the application.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\npublic void handle(ActionEvent event) {\n    // TODO Auto-generated method stub\n}\n",
              "description": "\nIn this case, the ActionEvent parameter is optional because we don't use it inside the method. However, if we did need to use the ActionEvent object, it would be passed as a parameter to the method like so:\n"
            },
            "name": "handle",
            "location": {
              "start": 431,
              "insert": 431,
              "offset": " ",
              "indent": 24,
              "comment": null
            },
            "item_type": "method",
            "length": 39,
            "docLength": null
          },
          {
            "id": "a4b4c583-e871-b5a2-554a-8a1093df245c",
            "ancestors": [
              "d331fbed-6a62-a2bc-864d-cf4c6b579729"
            ],
            "type": "function",
            "description": "Retrieves a list of series from a database based on the current session ID, and then loops through the list of favorite series to retrieve the corresponding series object from a separate service implementation, finally displaying the combined list of series in the UI.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class ExampleController {\n    @FXML\n    private void handleButtonAction(ActionEvent e) {\n        try {\n            loadSeriesFavList();\n        } catch (SQLException ex) {\n            System.out.println(\"Error while loading favorite series list\");\n        }\n    }\n}\n",
              "description": "\nThis code would call the method loadSeriesFavList when the button is clicked, and handle any SQL exceptions that may occur during execution."
            },
            "name": "loadSeriesFavList",
            "location": {
              "start": 593,
              "insert": 593,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "SerieClientController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/series/SerieClientController.java",
    "content": {
      "structured": {
        "description": "An application that displays a list of series in a JavaFX ListView. It utilizes SQL databases and FXML loading to manage the series data display. The code also includes functions for handling menu items, series searches, and episode displays. Additionally, it provides a separate stage for each type of series (categories, episodes, and series) when a user selects an item from the menu or clicks on a series in the ListView.",
        "items": [
          {
            "id": "421503e2-e778-52a7-6144-671ede6093d0",
            "ancestors": [],
            "type": "function",
            "description": "Is a controller for a series client application. It manages the display of a list of series in a JavaFX ListView and provides functionalities such as loading the series list, filtering the list based on user input, and displaying additional information about each series. The class also handles menu events for categories, episodes, and series.",
            "name": "SerieClientController",
            "location": {
              "start": 73,
              "insert": 73,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 1065,
            "docLength": null
          },
          {
            "id": "7453e4be-b445-688f-f540-c36366a77d64",
            "ancestors": [
              "421503e2-e778-52a7-6144-671ede6093d0"
            ],
            "type": "function",
            "description": "Searches for Series in a list based on a specified search term and returns a list of matching Series.",
            "params": [
              {
                "name": "liste",
                "type_name": "List<Serie>",
                "description": "list of series that is searched for matches in the `recherche` string.\n\n* `liste` is a list of `Serie` objects.",
                "complex_type": true
              },
              {
                "name": "recherche",
                "type_name": "String",
                "description": "search query, which is used to filter the list of series and return only the matches.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ListSerie",
              "description": "a list of `Serie` objects that match the given search query.\n\n* The output is a list of `Serie` objects, which represents the list of series that match the search query.\n* Each element in the list contains the `Nom` attribute, which contains the name of the series.\n* If the `Nom` attribute matches the search query, the element is included in the output list.",
              "complex_type": true
            },
            "name": "rechercher",
            "location": {
              "start": 219,
              "insert": 219,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "c40111f3-b67d-57b4-e54b-8051cc5151ad",
            "ancestors": [
              "421503e2-e778-52a7-6144-671ede6093d0"
            ],
            "type": "function",
            "description": "Loads an FXML file, `EpisodeClient.fxml`, and creates a new stage with its scene.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the function, specifically an action event related to the `watchEpisode` button.\n\nEvent: ActionEvent\n\n* Target: The object that triggered the event (not shown)",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n    void onWatch(ActionEvent event) throws IOException {\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/EpisodeClient.fxml\"));\n        Parent root = loader.load();\n        Stage stage = (Stage) watchEpisode.getScene().getWindow();\n        stage.setScene(new Scene(root));\n    }\n",
              "description": "\nExplanation:\nThe onWatch method is called when the \"watch\" button is pressed, and this will load a new FXML file (\"/EpisodeClient.fxml\"). This method will also take an action event as input. The action event is not used in this example, but it must be included because the method is annotated with \"@FXML\".\n\nThe method then uses a FXMLLoader to load the fxml file and gets the parent root node from the loaded fxml file. It then uses the scene property of the stage to set a new Scene with the same root node, which will display the new EpisodeClient controller.\n\nNote: This example is not a complete example on how to use the onWatch method, but rather an example on how to use it in conjunction with other code."
            },
            "name": "onWatch",
            "location": {
              "start": 253,
              "insert": 245,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 244,
                "end": 251
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 7
          },
          {
            "id": "7ab43511-6c3b-d8ab-584e-70367a5fff31",
            "ancestors": [
              "421503e2-e778-52a7-6144-671ede6093d0"
            ],
            "type": "function",
            "description": "Creates a Box object with a layout that displays an image and text information for a series. It takes a serie object as input, generates a VBox object with appropriate spacing, alignment, and padding, and adds three children to it: an ImageView with the series' image, a Label with the series' name, and another Label with the number of likes. The function then styles the Box and returns it.",
            "params": [
              {
                "name": "serie",
                "type_name": "Serie",
                "description": "data structure containing information about a specific series, which is used to create a graphical representation of the series within the `VBox`.\n\n* `nom`: The name of the series.\n* `image`: The path to the image associated with the series.\n* `nbLikes`: The number of likes for the series.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "javafxsceneNode",
              "description": "a vertical box container with a centered label, an image view, and a label displaying the number of likes.\n\n1. `vbox`: A `VBox` object that contains the series information and image.\n2. `spacing`: The spacing between the children in the `VBox`.\n3. `alignment`: The alignment of the children in the `VBox`.\n4. `padding`: The padding around the children in the `VBox`.\n5. `minSize`: The minimum size of the `VBox`.\n6. `children`: A list of `Node` objects, including a `Label`, an `ImageView`, and another `Label`, which contain the series information and image.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "import javafx.geometry.*;\nimport javafx.scene.image.Image;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.layout.*;\nimport javafx.scene.paint.Color;\nimport javafx.stage.Stage;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            Stage stage = new Stage();\n            VBox vbox = createSeriesVBox(new Serie(\"Serie\", \"image.jpg\", 0));\n            ImageView imageView = (ImageView)vbox.getChildren().get(1);\n            Image image = imageView.getImage();\n            System.out.println(image.toString());\n            // Print the URL of the image loaded in the VBox\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    private static VBox createSeriesVBox(Serie serie) throws IOException {\n        VBox vbox = new VBox();\n        vbox.setSpacing(8);\n        vbox.setAlignment(Pos.CENTER);\n        vbox.setPadding(new Insets(10));\n        vbox.setMinSize(250, 210);\n        // Créez d'abord le Label avec le nom\n        Label titleLabel = new Label(serie.getNom());\n        titleLabel.setStyle(\"-fx-font-family: 'Helvetica'; -fx-font-size: 18.0px; -fx-font-weight: bold; -fx-text-fill: #FCE19A\");\n        titleLabel.setAlignment(Pos.CENTER);\n        // Ensuite, ajoutez l'ImageView avec l'image\n        ImageView imageView = new ImageView();\n        imageView.setFitWidth(240);\n        imageView.setFitHeight(140);\n        // Chargez l'image depuis le fichier\n        File file = new File(serie.getImage());\n        Image image = new Image(file.toURI().toString());\n        imageView.setImage(image);\n        // Créer le Label pour afficher le nombre de likes\n        Label likesLabel = new Label(\"Likes: \" + serie.getNbLikes());\n        likesLabel.setStyle(\"-fx-font-family: 'Helvetica'; -fx-font-size: 14.0px; -fx-text-fill: #FCE19A\");\n        likesLabel.setAlignment(Pos.CENTER);\n        // Ajoutez d'abord le Label, puis l'ImageView à la liste des enfants\n        vbox.getChildren().addAll(titleLabel, imageView, likesLabel);\n        vbox.setStyle(\"-fx-background-color: linear-gradient(to top right, #ae2d3c, black)\");\n        return vbox;\n    }\n}\n",
              "description": ""
            },
            "name": "createSeriesVBox",
            "location": {
              "start": 269,
              "insert": 269,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 65,
            "docLength": null
          },
          {
            "id": "252fbff3-5d45-7282-4d45-a6f9e1401cb0",
            "ancestors": [
              "421503e2-e778-52a7-6144-671ede6093d0"
            ],
            "type": "function",
            "description": "Retrieves a list of categories from an implementation of the `IServiceCategorieImpl` interface.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public void afficher() throws SQLException {\n    IServiceCategorieImpl iServiceCategorie = new IServiceCategorieImpl();\n    categorieList = iServiceCategorie.recuperer();\n}\n",
              "description": "\nThis example is using a method called `afficher` and it is trying to retrieve the list of categories from the `IServiceCategorieImpl`. However, this method is not returning any value as it is just calling the `iServiceCategorie.recuperer()` which does not return anything. The correct way would be to use the return type of the method and store the returned value in a variable like so:\n"
            },
            "name": "afficher",
            "location": {
              "start": 337,
              "insert": 337,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "1494e3ab-ae80-e68e-254a-6b06e0e3e0c5",
            "ancestors": [
              "421503e2-e778-52a7-6144-671ede6093d0"
            ],
            "type": "function",
            "description": "Sorts a list of `Serie` objects based on their `nom` attribute, using a custom comparison method that ignores case and returns an integer value indicating the result of the comparison.",
            "params": [
              {
                "name": "series",
                "type_name": "List<Serie>",
                "description": "list of series to be sorted, which is passed through the `Collections.sort()` method using a custom comparison algorithm based on the nomenclature of each series.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "import java.util.Collections;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Serie> series = new ArrayList<>();\n\n        // Initialize the list with some sample data\n        Series serie1 = new Serie(\"Game of Thrones\", \"Genre1\", 2011, 65, 100);\n        Series serie2 = new Serie(\"The Big Bang Theory\", \"Genre2\", 2007, 85, 100);\n        Series serie3 = new Serie(\"Friends\", \"Genre3\", 1994, 76, 100);\n        series.add(serie1);\n        series.add(serie2);\n        series.add(serie3);\n\n        // Sort the list of series by name\n        trierParNom(series);\n\n        // Print out the sorted list\n        for (Serie serie : series) {\n            System.out.println(seriename());\n        }\n    }\n\n    private static void trierParNom(List<Serie> series) {\n        Collections.sort(series, (serie1, serie2) -> serie1.getName().compareToIgnoreCase(serie2.getName()));\n    }\n}\n",
              "description": ""
            },
            "name": "trierParNom",
            "location": {
              "start": 347,
              "insert": 347,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "b421bf41-aab9-c18d-a34b-4c26e2d94116",
            "ancestors": [
              "421503e2-e778-52a7-6144-671ede6093d0"
            ],
            "type": "function",
            "description": "Displays a list of series from an API, along with buttons to watch or dislike each series, and a separator line after every element except the last one.",
            "params": [
              {
                "name": "series",
                "type_name": "List<Serie>",
                "description": "list of series that will be displayed in the client's profile, and it is used to populate the `listeSerie` observable list which is then passed as an argument to the `FXMLLoader` constructor to load the FXML file.\n\n* `id_serie`: an integer representing the ID of the series.\n* `name`: a string representing the name of the series.\n* `description`: a string representing the description of the series.\n* `director`: a string representing the director of the series.\n* `country`: a string representing the country where the series is from.\n* `year`: an integer representing the year the series was released.\n* `poster_path`: a string representing the path to the poster image of the series.\n* `clicks`: an integer representing the number of clicks on the series.\n* `favoris`: an integer representing the number of favorites for the series.\n* `nb_dislikes`: an integer representing the number of dislikes for the series.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "List<Serie> series = new ArrayList<>();\nseries.add(new Serie(\"Game of Thrones\", 2011, \"Westeros\", 95, true));\nSeriesTableView controller = new SeriesTableView();\ncontroller.afficherliste(series);\n",
              "description": "\nThis code will set the list of series to be displayed on the table view. The method will first clear any previously displayed data and then add the new data to the table view."
            },
            "name": "afficherliste",
            "location": {
              "start": 355,
              "insert": 355,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 533,
            "docLength": null
          },
          {
            "id": "af831ddf-abe1-31a1-0d4f-0123605e8396",
            "ancestors": [
              "421503e2-e778-52a7-6144-671ede6093d0",
              "b421bf41-aab9-c18d-a34b-4c26e2d94116"
            ],
            "type": "function",
            "description": "Updates the UI components displaying information about a movie, including its image, name, director, country, likes, and dislikes. It also adds a \"Watch\" button to watch the movie and a \"Dislike\" button to remove it from the favorite list.",
            "params": [
              {
                "name": "item",
                "type_name": "Serie",
                "description": "`Episode` object that will be used to display its details and likes/dislikes count on the stage, and it is passed as a parameter to the `initView()` method to facilitate the retrieval of the necessary data from the `EpisodeClientController` controller.\n\n* `id`: the unique identifier for the episode\n* `name`: the name of the episode\n* `director`: the director of the episode\n* `country`: the country where the episode was produced\n* `likes`: the number of likes for the episode\n* `dislikes`: the number of dislikes for the episode\n* `HeartImageView`: an image view displaying a heart for liked episodes\n* `likeButton`: a button to like the episode\n* `dislikeButton`: a button to dislike the episode\n* `favButton`: a button to add the episode to the user's favorites\n* `watchButton`: a button to watch the episode.",
                "complex_type": true
              },
              {
                "name": "empty",
                "type_name": "boolean",
                "description": "AnchorPanes' graphic element, which is set to an empty `AnchorPane` when the function is called with no arguments, causing the `likeButton`, `dislikeButton`, and `watchButton` to be displayed without any content.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "// item is the object from the observable list that is being displayed in a table cell\n\n// item is the object from the observable list that is being displayed in a table cell\n@Override\npublic void updateItem(Serie item, boolean empty) {\n    super.updateItem(item, empty);\n    \n    if (empty || item == null) {\n        setGraphic(null);\n        return;\n    }\n\n    ImageView imageView = new ImageView();\n    // Set the width and height of the thumbnail to 100x100 pixels\n    imageView.setFitWidth(100);\n    imageView.setFitHeight(100);\n    // Set the image to be displayed for this table cell\n    imageView.setImage(item.getImage());\n    \n    AnchorPane anchorPane = new AnchorPane();\n    anchorPane.getChildren().add(imageView);\n    \n    Label nameLabel = new Label(\"Name: \" + item.getName());\n    nameLabel.setStyle(\"-fx-font-family: 'Helvetica'; -fx-font-size: 14.0px; -fx-font-weight: normal; -fx-text-fill: #666666\");\n    anchorPane.getChildren().add(nameLabel);\n    \n    Label summaryLabel = new Label(\"Summary: \" + item.getSummary());\n    summaryLabel.setStyle(\"-fx-font-family: 'Helvetica'; -fx-font-size: 14.0px; -fx-font-weight: normal; -fx-text-fill: #666\");\n    anchorPane.getChildren().add(summaryLabel);\n    \n    Label directorLabel = new Label(\"Director: \" + item.getDirector());\n    directorLabel.setStyle(\"-fx-font-family: 'Helvetica'; -fx-font-size: 14px; -fx-font-weight: normal; -fx-text-fill: #666666\");\n    anchorPane.getChildren().add(directorLabel);\n    \n    Label countryLabel = new Label(\"Country: \" + item.getCountry());\n    countryLabel.setStyle(\"-fx-font-family: 'Helvetica'; -fx-font-size: 14px; -fx-font-weight: normal; -fx-text-fill: #666666\");\n    anchorPane.getChildren().add(countryLabel);\n    \n    Label likesLabel = new Label(\"Likes: \" + item.getLikes());\n    likesLabel.setStyle(\"-fx-font-family: 'Helvetica'; -fx-font-size: 14px; -fx-font-weight: normal; -fx-text-fill: #666666\");\n    anchorPane.getChildren().add(likesLabel);\n    \n    ImageView HeartImageView = new ImageView();\n    // Set the width and height of the thumbnail to 100x100 pixels\n    HeartImageView.setFitWidth(100);\n    HeartImageView.setFitHeight(100);\n    // Set the image to be displayed for this table cell\n    HeartImageView.setImage(item.getHeart());\n    \n    Button likeButton = new Button(\"Like\");\n    likeButton.setStyle(\"-fx-font-family: 'Helvetica'; -fx-font-size: 14px; -fx-font-weight: normal; -fx-text-fill: #666666\");\n    likeButton.setOnAction(event -> item.increaseLikes());\n    \n    Button dislikeButton = new Button(\"Dislike\");\n    dislikeButton.setStyle(\"-fx-font-family: 'Helvetica'; -fx-font-size: 14px; -fx-font-weight: normal; -fx-text-fill: #666666\");\n    dislikeButton.setOnAction(event -> item.decreaseLikes());\n    \n    Button favButton = new Button(\"Favourite\");\n    favButton.setStyle(\"-fx-font-family: 'Helvetica'; -fx-font-size: 14px; -fx-font-weight: normal; -fx-text-fill: #666666\");\n    favButton.setOnAction(event -> item.addToFavourites());\n    \n    Button watchButton = new Button(\"Watch\");\n    watchButton.setStyle(\"-fx-font-family: 'Helvetica'; -fx-font-size: 14px; -fx-font-weight: normal; -fx-text-fill: #666666\");\n    watchButton.setOnAction(event -> item.addToWatchList());\n    \n    anchorPane.getChildren().addAll(imageView, nameLabel, directorLabel, countryLabel, likesLabel, HeartImageView, likeButton, dislikeButton, favButton, watchButton);\n    setGraphic(anchorPane);\n}\n",
              "description": "\nIn the example above, updateItem is used to customize the way an item in a table view is displayed. This method is called by JavaFX every time it needs to refresh the display of one of the items in the observable list. In this example, I've customized how a serie (item) is displayed.\nThe first thing that we do is call super.updateItem(item, empty), which makes sure that the item in the table cell is updated with the latest information from the observable list. We then check if the item is null or the list is empty, if so we just return an empty anchor pane. If not, then we proceed to customize how it is displayed.\nThe first step is creating a new image view and setting its width and height to 100x100 pixels. We do this because the images in our app are quite large, but we want to keep them looking good by scaling them down. After that, we create an anchor pane and set it as the graphic of the cell.\nNext, we add a new image view that will hold the heart image. The width and height of this one is also set to 100x100 pixels and its style set so that it looks nice in the table cell. After this, we create three buttons: like, dislike and favourite. We then set their style so that they look nice in the table cell as well.\nAfterwards, we add event handlers to these buttons so that when the user presses them, the likes of the item gets updated, the user is notified (with a pop up) or the item is added to the favourite list or watch list respectively. Finally, we just add all of these components to the anchor pane and set it as the graphic of the cell.\nThat's how updateItem works in JavaFX"
            },
            "name": "updateItem",
            "location": {
              "start": 363,
              "insert": 363,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 517,
            "docLength": null
          },
          {
            "id": "8ae62397-25d7-f3a1-4f41-384057066bd7",
            "ancestors": [
              "421503e2-e778-52a7-6144-671ede6093d0",
              "b421bf41-aab9-c18d-a34b-4c26e2d94116",
              "af831ddf-abe1-31a1-0d4f-0123605e8396"
            ],
            "type": "function",
            "description": "Updates the number of likes for an item, adds or removes a like from the item's liked status, and enables or disables the dislike button based on the item's liked status.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "action event triggered by a user's click on the like button, and it is passed to the function as an argument to enable the updating of the item's likes count.\n\n* `item`: the current item being processed.\n* `clickLikes`: the number of clicks on the item.\n* `NbLikes`: the total number of likes for the item.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\npublic void handle(ActionEvent event) {\n    // Assuming \"item\" is a valid object for this event to act upon\n    item.setClickLikes(item.getClickLikes() + 1);\n    System.out.println(item.getClickLikes());\n}\n",
              "description": "\nIn this example, we are simply incrementing the number of likes by one whenever the handle method is called. We're also printing out the new value to show it has been updated. In a real-world application, you would likely have a database or other external resource where you could store this information and update the object accordingly.\n\nIn general, the event handling methods are called when certain events occur within your code. For example, if you had a button that was linked to a method, clicking on the button would call the handle() method and pass in an ActionEvent object as its parameter. You could then use this object to determine which button was clicked and take appropriate action based on that information.\n\nIn the case of the code provided, we are not doing anything with the ActionEvent object passed into the handle() method. However, if you had other elements linked to this same method, each element would pass its own unique event as a parameter when it calls the handle() method. For example, if you had multiple buttons and wanted to know which one was clicked, you could use an if-else statement to check the type of event that was passed in and take appropriate action based on what that event is."
            },
            "name": "handle",
            "location": {
              "start": 599,
              "insert": 599,
              "offset": " ",
              "indent": 24,
              "comment": null
            },
            "item_type": "method",
            "length": 49,
            "docLength": null
          },
          {
            "id": "5910123f-a1e9-04a4-0d4a-05e222e4f405",
            "ancestors": [
              "421503e2-e778-52a7-6144-671ede6093d0",
              "b421bf41-aab9-c18d-a34b-4c26e2d94116",
              "af831ddf-abe1-31a1-0d4f-0123605e8396"
            ],
            "type": "function",
            "description": "Increments the number of dislikes for an item when the like button is clicked, and updates the item's liked status accordingly. It also calls a service method to add or remove a dislike from the item in the database.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the function, and it is used to increment the number of clicks on an item and print its current click dislike count.\n\n* `item`: The current item being processed, which contains information such as its ID and click dislikes count.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\npublic void handle(ActionEvent event) {\n    // Assuming that the item being liked or disliked is held in a private variable called item.\n    if (item.getClickDislikes() % 2 == 0) {\n        item.setNbDislikes(item.getNbDislikes() + 1);\n        // Assuming that there's an IServiceSerieImpl service and a method called ajouterDislike to add a dislike to the database.\n        try {\n            ss.ajouterDislike(item);\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n    } else if (item.getClickDislikes() == 0) {\n        item.setNbDislikes(item.getNbDislikes() - 1);\n        try {\n            ss.removeDislike(item);\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n    } else {\n        item.setClickDislikes(item.getClickDislikes() + 1);\n    }\n}\n",
              "description": ""
            },
            "name": "handle",
            "location": {
              "start": 657,
              "insert": 657,
              "offset": " ",
              "indent": 24,
              "comment": null
            },
            "item_type": "method",
            "length": 49,
            "docLength": null
          },
          {
            "id": "1bb52459-9613-4384-2e42-9d726b12f08d",
            "ancestors": [
              "421503e2-e778-52a7-6144-671ede6093d0",
              "b421bf41-aab9-c18d-a34b-4c26e2d94116",
              "af831ddf-abe1-31a1-0d4f-0123605e8396"
            ],
            "type": "function",
            "description": "Is an implementation of an action listener for a favorites button. It retrieves the client and series ID from the button's user data, creates a new or updates an existing favorite, and adds it to a service implementing the `IServiceFavoris` interface. The function also handles the favorite count and prints it to the console.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "ActionEvent object that triggered the handling of the method.\n\n* `favButton`: The button that triggered the event, which represents a client.\n* `item`: The object passed as an argument to the function, containing information about the favorite.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Example {\n    private final StringProperty name = new SimpleStringProperty(\"\");\n    private final IntegerProperty age = new SimpleIntegerProperty(0);\n    private final BooleanProperty male = new SimpleBooleanProperty(false);\n\n    public void setName(String name) {\n        this.name.set(name);\n    }\n\n    public String getName() {\n        return name.get();\n    }\n\n    public void setAge(int age) {\n        this.age.set(age);\n    }\n\n    public int getAge() {\n        return age.get();\n    }\n\n    public void setMale(boolean male) {\n        this.male.set(male);\n    }\n\n    public boolean isMale() {\n        return male.get();\n    }\n}\n",
              "description": "\nNow, let's say we want to use the method handle in a button that will allow us to change the value of the name property:\n"
            },
            "name": "handle",
            "location": {
              "start": 715,
              "insert": 715,
              "offset": " ",
              "indent": 24,
              "comment": null
            },
            "item_type": "method",
            "length": 39,
            "docLength": null
          },
          {
            "id": "ba78b2c1-eb10-7faf-7149-cc334564d77e",
            "ancestors": [
              "421503e2-e778-52a7-6144-671ede6093d0"
            ],
            "type": "function",
            "description": "Loads a FXML file named `ListFavoris.fxml`, creates a new stage with the loaded scene, and displays it in the stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event of the button click that triggered the function execution.\n\n* Event type: `ActionEvent`\n* Target object: none (the function is called directly without any target object)",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    void AfficherFavList(ActionEvent event) {\n\n        // Create a new FXMLLoader using the resource file specified in the @FXML annotation\n\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/ListFavoris.fxml\"));\n\n        // Create a new stage object to create a new window\n\n        Stage stage = new Stage();\n\n        try {\n\n            // Load the FXML file specified in the @FXML annotation\n\n            Parent root = fxmlLoader.load();\n\n            Scene scene = new Scene(root);\n\n            stage.setScene(scene);\n\n            stage.show();\n\n        } catch (IOException e) {\n\n            throw new RuntimeException(e);\n\n        }\n\n    }\n",
              "description": "\nNote: This example uses the FXML file specified in the @FXML annotation in the method declaration, which is a resource file with the same name as the method and located in the same package. The FXMLLoader loads this resource file."
            },
            "name": "AfficherFavList",
            "location": {
              "start": 891,
              "insert": 891,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 29,
            "docLength": null
          },
          {
            "id": "7a2c78ae-97fb-c781-5f49-a09f985f0c26",
            "ancestors": [
              "421503e2-e778-52a7-6144-671ede6093d0"
            ],
            "type": "function",
            "description": "Loads a list of series, sets an observable list of category names, and implements an OnAction event to retrieve and display a specific series when the category is selected from the dropdown menu. It also adds a listener to the text field for searching series by name.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void initialize() {\n    // Code to load the series list and display it in the JavaFX ListView goes here\n    IServiceSerie<Serie> serieService = new IServiceSerieImpl();\n    List<Serie> series = serieService.recuperers();\n    afficherliste(series); // Utilisez votre méthode d'affichage pour la ListView\n}\n",
              "description": "\nThe code above shows how the method initialize would be used to load the series list and display it in a JavaFX ListView."
            },
            "name": "initialize",
            "location": {
              "start": 923,
              "insert": 923,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 117,
            "docLength": null
          },
          {
            "id": "c7796c37-feca-668f-8549-918efd48f3b2",
            "ancestors": [
              "421503e2-e778-52a7-6144-671ede6093d0"
            ],
            "type": "function",
            "description": "Loads and displays a FXML file named \"CategorieClient.fxml\" using the `FXMLLoader` class.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the function execution, which in this case is a button click event.\n\n* `event`: An `ActionEvent` object representing a user action that triggered the function to execute.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    private void loadSeriesList() throws SQLException {\n\n        IServiceSerie<Serie> serieService = new IServiceSerieImpl();\n\n        List<Serie> series = serieService.recuperers();\n\n        afficherliste(series); // Utilisez votre méthode d'affichage pour la ListView\n\n        IServiceSerieImpl ss = new IServiceSerieImpl();\n\n\n\n        hboxTop3.setSpacing(20); // Set the spacing between VBox instances\n\n        hboxTop3.setPadding(new Insets(10));\n\n        List<Serie> listeTop3 = ss.findMostLiked();\n\n\n        for (Serie serie : listeTop3) {\n\n            VBox vbox = createSeriesVBox(serie);\n\n            hboxTop3.getChildren().add(vbox);\n\n        }\n\n    }\n",
              "description": "\nHere, the method Ocategories is called within the loadSeriesList() method. It throws an IOException because it loads another scene to display the CategorieClient scene."
            },
            "name": "Ocategories",
            "location": {
              "start": 1045,
              "insert": 1045,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "966503e6-5e25-5388-9448-1f6337003c6a",
            "ancestors": [
              "421503e2-e778-52a7-6144-671ede6093d0"
            ],
            "type": "function",
            "description": "Loads a FXML file, creates a scene and sets it as the scene of a stage, showing the stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the function execution, which in this case is a button click.\n\n* `event` represents an action event generated by the user's interaction with the application.\n* `getSource()` returns the source of the event, which is typically a button or other control in the user interface.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void handleButtonAction(ActionEvent event) {\n    // Handle the action here\n    Oseries(event);\n}\n",
              "description": "\nThis is a very basic example, and there are many ways to use this function. In this example, we have an action event that occurs when a button is pressed, so this event is used as input to call the Oseries method. This would open the SeriesClient.fxml file."
            },
            "name": "Oseries",
            "location": {
              "start": 1063,
              "insert": 1063,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "3feeca0b-e125-e5b6-ac4f-5ae1dcdc9ba2",
            "ancestors": [
              "421503e2-e778-52a7-6144-671ede6093d0"
            ],
            "type": "function",
            "description": "Loads an FXML file, creates a scene, sets it as the scene of a stage, and displays the stage.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "event that triggered the execution of the `Oepisode` method, providing the necessary information for the method to perform its intended action.\n\nEvent: An instance of the `ActionEvent` class, representing an action event generated by the user through mouse clicks or keyboard inputs.\n\nProperties:\n\n* `getSource()`: Returns the source of the event, which is usually a button or a menu item that was clicked/selected.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    void handleButtonAction(ActionEvent event) {\n\n        // this method will be executed by the button with fx:id=\"button\" when clicked\n\n        Object source = event.getSource();\n\n        if (source == button) {\n\n            Oepisode(event);\n\n        } else {\n\n            throw new RuntimeException(\"Something went wrong. The given source is not the expected instance.\");\n\n        }\n\n    }\n",
              "description": ""
            },
            "name": "Oepisode",
            "location": {
              "start": 1081,
              "insert": 1081,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "8c6455b8-47c8-19a6-3947-e00b50301183",
            "ancestors": [
              "421503e2-e778-52a7-6144-671ede6093d0"
            ],
            "type": "function",
            "description": "Retrieves a list of series from a database using an implementation of `IServiceSerie`, then displays the list in a `ListView`. It also calls another method, `findMostLiked`, on the same implementation to retrieve a list of top-rated series and adds them to the `ListView`.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "// ...\n\n        IServiceSerie<Serie> serieService = new IServiceSerieImpl();\n\n        List<Serie> series = serieService.recuperers();\n\n        afficherliste(series); // Utilisez votre méthode d'affichage pour la ListView\n\n// ...\n",
              "description": "\nExplanation:\n\nThe method loadSeriesList is used to display a list of series in the JavaFX ListView hboxTop3. The method takes no arguments and returns nothing. It first retrieves a list of all series from the service IServiceSerieImpl. After that, it uses its own method afficherliste (which displays a list of series in the JavaFX ListView) to display them. Finally, the method retrieves the most liked series from the service using the findMostLiked() method and creates a VBox instance for each one using its createSeriesVBox method. The resulting VBox instances are then added to the hboxTop3 JavaFX HBox.\n\nNote that this is just an example of how the loadSeriesList method could be used, and it may not work correctly in your code."
            },
            "name": "loadSeriesList",
            "location": {
              "start": 1099,
              "insert": 1099,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 31,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "StatistiqueController.java",
    "path": "rakcha-desktop/src/main/java/com/esprit/controllers/series/StatistiqueController.java",
    "content": {
      "structured": {
        "description": "A user interface for a data visualization application using JavaFX. It provides a pie chart display with tooltips and an option to switch to a bar chart display. The application retrieves statistical data from a service layer, processes it, and displays it in the graphical user interface. When the user clicks on a slice of the pie chart, an action event is triggered, which updates the value of the second slice by 10% and recreates the tooltips for display.",
        "items": [
          {
            "id": "25c5f1c4-d149-2985-2b4d-373d06bf640c",
            "ancestors": [],
            "type": "function",
            "description": "Manages user interaction with the FXML file \"StatistiqueView.fxml\". It initializes and populates a BarChart, PieChart, or BorderPane depending on the selected category from the ComboBox. The controller also handles events such as closing the application and updating the PieChart data. Additionally, it provides methods for showing the BarChart and PieChart graphs.",
            "name": "StatistiqueController",
            "location": {
              "start": 53,
              "insert": 53,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 449,
            "docLength": null
          },
          {
            "id": "4957e4ad-d924-10be-e845-6fa81b193e0d",
            "ancestors": [
              "25c5f1c4-d149-2985-2b4d-373d06bf640c"
            ],
            "type": "function",
            "description": "Creates a bar chart based on category-related data, limiting the number of categories displayed to a specified value. It generates XY chart data series and installs tooltips for each data point.",
            "params": [
              {
                "name": "statistics",
                "type_name": "Map<Categorie, Long>",
                "description": "map of categories and their corresponding number of occurrences, which is used to generate the data series for the bar chart.\n\n* `statistics`: a map containing category-wise statistical data, where each key is a category and the value is the number of occurrences of that category.",
                "complex_type": true
              },
              {
                "name": "limit",
                "type_name": "int",
                "description": "maximum number of categories to be plotted on the graph, and it is used to control the amount of data added to the chart through the `XYChart.Data` array.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "BarChartString",
              "description": "a Bar Chart representing the number of categories in a given set of statistics, with each category represented by a bar.\n\n* `BarChart<String, Number> barChart`: A chart object that represents a bar chart with two axes - a category axis and a numerical axis.\n* `XYChart.Series<String, Number> dataSeries`: A series of data points represented as bars on the chart, where each point is associated with a category name and a corresponding number value.\n* `int count`: The number of data points added to the chart, which represents the number of categories that have been classified.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Map<Categorie, Long> statistics = new IServiceCategorieImpl().getCategoriesStatistics();\nint limit = 5;\nbarChart = createBarChart(statistics, limit);\nborderPane.setCenter(barChart);\n",
              "description": "\nExplanation:\nThe method createBarChart takes in two arguments, a Map<Categorie, Long> statistics and an int limit, where the first argument contains the data to be displayed as bar chart, and the second one determines how many categories are to be displayed. The method creates a new CategoryAxis and NumberAxis for the x-axis and y-axis respectively. Then it creates a new BarChart instance using those two axis instances and assigns them to the variable barChart.\nNext, we create a new XYChart.Series dataSeries object, which is an empty collection of data that will be used in the chart. We then iterate through each entry in the statistics map and check if the counter (count) has not reached the limit yet. If it hasn't, we add the category name and number of categories to the series, increment the count variable and proceed with adding the next category. Otherwise, we break out of the loop since no more categories are needed.\nFinally, we add the dataSeries object to the chart using barChart.getData().add(dataSeries) method and set it as the center component in the borderPane by setting it's center property with the borderPane.setCenter() method."
            },
            "name": "createBarChart",
            "location": {
              "start": 83,
              "insert": 83,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 79,
            "docLength": null
          },
          {
            "id": "1de8a264-516b-1c9d-2a4d-689db4994a5f",
            "ancestors": [
              "25c5f1c4-d149-2985-2b4d-373d06bf640c"
            ],
            "type": "function",
            "description": "Creates a bar chart from a map of category-related data, limiting the number of categories displayed based on an input parameter. It adds data points to the chart and displays tooltips for each point.",
            "params": [
              {
                "name": "statistics",
                "type_name": "Map<Categorie, Long>",
                "description": "Map containing statistics of categories, where each key is a category and value is the number of occurrences of that category.\n\n* `Map<Categorie, Long> statistics`: A map containing categories as keys and their corresponding number of occurrences as values.",
                "complex_type": true
              },
              {
                "name": "limit",
                "type_name": "int",
                "description": "maximum number of categories to be displayed on the bar chart, and it is used to control the number of data points added to the graph during the loop.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "import java.util.*;\nimport javafx.scene.chart.XYChart;\n\npublic class App extends Application {\n    private BorderPane borderPane = new BorderPane();\n\n    public void start(Stage stage) {\n        Map<Categorie, Long> statistics = new IServiceCategorieImpl().getCategoriesStatistics();\n        showBarChart(statistics, 5);\n        Scene scene = new Scene(borderPane, 800, 600);\n        stage.setTitle(\"Pie Chart\");\n        stage.setScene(scene);\n        stage.show();\n    }\n\n    private void showBarChart(Map<Categorie, Long> statistics, int limit) {\n        CategoryAxis xAxis = new CategoryAxis();\n        xAxis.setLabel(\"Categories\");\n\n        NumberAxis yAxis = new NumberAxis();\n        yAxis.setLabel(\"Classification of categories\");\n\n        BarChart<String, Number> barChart = new BarChart<>(xAxis, yAxis);\n\n        XYChart.Series<String, Number> dataSeries = new XYChart.Series<>();\n\n        int count = 0;\n        for (Map.Entry<Categorie, Long> entry : statistics.entrySet()) {\n            Categorie categorie = entry.getKey();\n            String categoryName = String.valueOf(categorie.getNom()); // Extraire le nom de la catégorie\n            Long numberOfCategories = entry.getValue();\n\n            if (count < limit) {\n                dataSeries.getData().add(new XYChart.Data<>(categoryName, numberOfCategories));\n\n                // Ajouter une infobulle aux données\n                XYChart.Data<String, Number> data = dataSeries.getData().get(dataSeries.getData().size() - 1);\n                Tooltip tooltip = new Tooltip(data.getXValue() + \": \" + data.getYValue());\n                Tooltip.install(data.getNode(), tooltip);\n\n                count++;\n            } else {\n                break; // Interrompre la boucle si la limite est atteinte\n            }\n        }\n\n        barChart.getData().add(dataSeries);\n\n        borderPane.setCenter(barChart);\n    }\n}\n",
              "description": ""
            },
            "name": "showBarChart",
            "location": {
              "start": 177,
              "insert": 177,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 73,
            "docLength": null
          },
          {
            "id": "7b81be04-977f-2e8e-8f4a-ef61d4e4e835",
            "ancestors": [
              "25c5f1c4-d149-2985-2b4d-373d06bf640c"
            ],
            "type": "function",
            "description": "Initializes a ComboBox with category options, sets the selected option to \"Statistiques of categorie\", and retrieves and maps category statistics from an service implementation to display in a bar chart with a limit of 20 categories.",
            "params": [
              {
                "name": "url",
                "type_name": "URL",
                "description": "URL of a resource that provides the statistics data to be displayed in the graphical user interface.\n\n* Type: URL representing a web page with category statistics data.",
                "complex_type": true
              },
              {
                "name": "resourceBundle",
                "type_name": "ResourceBundle",
                "description": "application's resource bundle, which contains key-value pairs of localized messages and resources that can be used to display text and other data to the user.\n\n* `resourceBundle`: A ResourceBundle object containing key-value pairs representing category names and their corresponding statistics.\n\nNote: The `resourceBundle` is not explicitly mentioned in the code snippet provided, but it is implied based on the context of the function.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main extends Application {\n    private BorderPane borderPane;\n    private ComboBox<String> statisticsComboBox;\n\n    @Override\n    public void start(Stage primaryStage) throws Exception{\n        URL resource = getClass().getResource(\"/application/statistics.fxml\");\n        Parent root = FXMLLoader.load(resource);\n        Scene scene = new Scene(root, 300, 275);\n        primaryStage.setTitle(\"Statistics\");\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n\n    public void initialize(URL url, ResourceBundle resourceBundle) {\n        // Initialiser le ComboBox ici\n        statisticsComboBox = (ComboBox<String>) borderPane.lookup(\"#statisticsComboBox\");\n\n        ObservableList<String> statisticsOptions = FXCollections.observableArrayList(\"Statistiques of categorie\");\n        statisticsComboBox.setItems(statisticsOptions);\n        statisticsComboBox.setValue(\"Statistiques of categorie\");\n\n        IServiceCategorieImpl serviceCategorie = new IServiceCategorieImpl();\n\n        // S'assurer que les statistiques ne sont pas nulles avant de les utiliser\n        Map<Categorie, Long> statistiques = serviceCategorie.getCategoriesStatistics();\n        if (statistiques != null) {\n            statistics = new HashMap<>(statistiques.size());\n            for (Map.Entry<Categorie, Long> entry : statistiques.entrySet()) {\n                statistics.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        // Initialiser le graphique en barres avec une limite de 20 catégories\n        BarChart<String, Number> barChart = createBarChart(statistiques, 20);\n        borderPane.setCenter(barChart);\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n",
              "description": ""
            },
            "name": "initialize",
            "location": {
              "start": 253,
              "insert": 253,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 41,
            "docLength": null
          },
          {
            "id": "af0c1665-8c15-a1ae-374f-7169cc09e794",
            "ancestors": [
              "25c5f1c4-d149-2985-2b4d-373d06bf640c"
            ],
            "type": "function",
            "description": "Handles the display of category statistics when the user selects \"Statistiques de catégorie\" from the combo box. It retrieves the category statistics from an implementation of an interface `IServiceCategorieImpl`, maps them to a bar chart, and displays the chart in the center of the border pane.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML\n\n    private void handleShowStatistics() {\n\n        // Afficher les statistiques de catégorie\n\n        if (\"Categories\".equals(statisticsComboBox.getValue())) {\n\n            Map<Categorie, Long> statistics = new IServiceCategorieImpl().getCategoriesStatistics();\n\n            borderPane.setCenter(createBarChart(statistiques, 20));\n\n        }\n\n    }\n",
              "description": "\nIn this example, the method handleShowStatistics is called when the user selects \"Categories\" from the statisticsComboBox. When called, it checks whether the selected value matches the string \"Categories\". If so, it creates a map of categories and their corresponding counts using the IServiceCategorieImpl implementation. Then, it calls the createBarChart method with the created map and an integer argument of 20 to display the bar chart in the borderPane center.\nThe example code should be as short as possible. The code is expected to work correctly without needing any additional explanation."
            },
            "name": "handleShowStatistics",
            "location": {
              "start": 297,
              "insert": 297,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "9e6f58ce-8a4b-9284-9142-ee50f2fcbb4e",
            "ancestors": [
              "25c5f1c4-d149-2985-2b4d-373d06bf640c"
            ],
            "type": "function",
            "description": "Displays a bar chart for statistics passed as an argument and with a specified limit of 20.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@FXML\nprivate void handleShowBarChart() {\n    showBarChart(statistics, 20);\n}\n",
              "description": "\nIn this example, the handleShowBarChart method is called when a button is pressed. This method first uses the statistics variable (which is already defined and populated) to retrieve information on the number of books in each category. It then passes these values and the number of categories to the showBarChart method. The showBarChart method takes two parameters: 1) the statistics map, which contains the data it needs to create the bar chart, and 2) an integer that specifies the maximum number of categories to display on the chart.\n\nThe handleShowBarChart method is only one example of how this method might be used. It could also be called from another method or event handler in order to update the bar chart with new data after it has already been created. The key is that the statistics variable contains information that can be used to create a bar chart, and the handleShowBarChart method is able to pass that information to the showBarChart method in order to update the chart."
            },
            "name": "handleShowBarChart",
            "location": {
              "start": 315,
              "insert": 315,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "ba00459b-e96b-a783-ba49-39ea0249246c",
            "ancestors": [
              "25c5f1c4-d149-2985-2b4d-373d06bf640c"
            ],
            "type": "function",
            "description": "1) retrieves category statistics from an implementation class, 2) prints the statistics to the console, and 3) creates and displays a pie chart representing the data using the `showPieChart()` method.",
            "params": [
              {
                "name": "event",
                "type_name": "ActionEvent",
                "description": "occurrence of a button press event that triggers the execution of the function.\n\n* Event type: `ActionEvent`\n* Target object: Undefined (as `event` is not referenced directly in the function body)",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import java.util.*;\n\nimport javafx.event.ActionEvent;\n\nimport javafx.fxml.FXML;\n\nimport javafx.scene.Node;\n\nimport javafx.scene.control.ContextMenu;\n\nimport javafx.scene.control.MenuItem;\n\nimport javafx.scene.control.Tooltip;\n\nimport javafx.scene.input.MouseButton;\n\nimport javafx.scene.input.MouseEvent;\n\nimport javafx.scene.layout.BorderPane;\n\nimport javafx.scene.paint.Color;\n\npublic class MainController {\n\n    @FXML private BorderPane borderPane;\n\n\n\n    // Méthode pour afficher le graphique en secteurs\n\n    private void showPieChart(Map<Categorie, Long> statistics) {\n\n        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();\n\n\n\n        for (Map.Entry<Categorie, Long> entry : statistics.entrySet()) {\n\n            Categorie categorie = entry.getKey();\n\n            String categoryName = String.valueOf(categorie.getNom()); // Extraire le nom de la catégorie\n\n            Long numberOfCategories = entry.getValue();\n\n            pieChartData.add(new PieChart.Data(categoryName, numberOfCategories));\n\n        }\n\n\n\n        PieChart pieChart = new PieChart(pieChartData);\n\n        createToolTips(pieChart);\n\n\n\n        pieChart.setTitle(\"Statistiques of  categories\");\n\n        pieChart.setClockwise(true);\n\n        pieChart.setLabelLineLength(50);\n\n        pieChart.setLabelsVisible(true);\n\n        pieChart.setLegendVisible(false);\n\n        pieChart.setStartAngle(180);\n\n\n\n        pieChartData.forEach(data ->\n\n                data.nameProperty().bind(Bindings.concat(data.getName(), \" \", data.pieValueProperty(), \" \")\n\n                ));\n\n\n\n        ContextMenu contextMenu = new ContextMenu();\n\n        MenuItem miSwitchToBarChart = new MenuItem(\"Switch to Bar Chart\");\n\n        contextMenu.getItems().add(miSwitchToBarChart);\n\n\n\n        pieChart.addEventHandler(MouseEvent.MOUSE_CLICKED, event -> {\n\n            if (event.getButton() == MouseButton.SECONDARY) {\n\n                contextMenu.show(pieChart, event.getScreenX(), event.getScreenY());\n\n            }\n\n        });\n\n\n\n        miSwitchToBarChart.setOnAction(event -> showBarChart(statistics));\n\n\n\n        borderPane.setCenter(pieChart);\n\n    }\n\n\n\n    // Méthode pour afficher le graphique en barres\n\n    private void showBarChart(Map<Categorie, Long> statistics) {\n\n    }\n\n\n\n    private void createToolTips(PieChart pc) {\n\n        for (PieChart.Data data : pc.getData()) {\n\n            String msg = Double.toString(data.getPieValue());\n\n            Tooltip tp = new Tooltip(msg);\n\n            tp.setShowDelay(Duration.seconds(0));\n\n\n\n            Tooltip.install(data.getNode(), tp);\n\n\n\n            data.pieValueProperty().addListener((observable, oldValue, newValue) ->\n\n            {\n                tp.setText(Double.toString(newValue));\n\n            }\n\n        );\n\n        ContextMenu contextMenu = new ContextMenu();\n\n        MenuItem menuItem = new MenuItem(\"Show Tooltip\");\n\n        menuItem.setOnAction((event) -> {\n\n                tp.show(data.getNode(), event.getScreenX(), event.getScreenY());\n\n            });\n\n        contextMenu.getItems().add(menuItem);\n\n        data.getNode().setOnContextMenuRequested(event -> {\n\n                contextMenu.show(event.getScreenX(), event.getScreenY());\n\n            });\n\n        }\n\n    }\n\n}\n",
              "description": "\nThe code is a JavaFX application, and the method handleShowPieChart will display the Pie Chart for the given input.  The method showBarChart is not implemented yet as the exercise only requires the implementation of handleShowPieChart."
            },
            "name": "handleShowPieChart",
            "location": {
              "start": 329,
              "insert": 329,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "33b6c5e5-5f1c-929f-634f-c487d8514e9a",
            "ancestors": [
              "25c5f1c4-d149-2985-2b4d-373d06bf640c"
            ],
            "type": "function",
            "description": "Generates a pie chart based on map data, adds tooltips and menu items to the chart, and displays it in the center of a BorderPane.",
            "params": [
              {
                "name": "statistics",
                "type_name": "Map<Categorie, Long>",
                "description": "map of categories and their corresponding counts, which is used to populate the data list for the pie chart.\n\n* `Map<Categorie, Long> statistics`: A map that associates a category with its count. The categories are identified by `Categorie`, and the count is represented by a long value.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "// Récupérer les statistiques des catégories\n\nMap<Categorie, Long> statistics = new IServiceCategorieImpl().getCategoriesStatistics();\n\n// Ajouter un log pour vérifier les statistiques\n\nSystem.out.println(\"Statistiques : \" + statistiques);\n\n// Créer et afficher le graphique en secteurs\n\nshowPieChart(statistiques);\n",
              "description": "\nIn this example, a map called `statistics` is retrieved from an implementation of the interface IServiceCategorieImpl. This method returns a map containing all categories and their respective number of occurrences in the database. The log statement is then used to check that the values returned are correct.\nThe next step is to create and display the pie chart using the `showPieChart` method, which takes a map of categories and their counts as an input. This method creates a new ObservableList, iterates over each category in the statistics map, extracts its name and number of occurrences, adds a PieChart.Data object to the ObservableList with the name and count as inputs, and finally sets up a tooltip for each slice of the chart.\nIt also sets various properties on the pie chart such as clockwise orientation, line length of labels, visibility of labels, legend visibility, start angle and attaches a context menu to it that allows the user to switch between the pie chart and a bar chart if they want. The context menu includes one item called `Switch to Bar Chart`.\nFinally, it sets the center node of the border pane to the pie chart."
            },
            "name": "showPieChart",
            "location": {
              "start": 355,
              "insert": 355,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 75,
            "docLength": null
          },
          {
            "id": "1e206877-4ea3-fc84-b74a-ecf2d37c3065",
            "ancestors": [
              "25c5f1c4-d149-2985-2b4d-373d06bf640c"
            ],
            "type": "function",
            "description": "Takes a map of category-specific count data and displays it as a bar chart.",
            "params": [
              {
                "name": "statistics",
                "type_name": "Map<Categorie, Long>",
                "description": "map of category-specific long values that will be displayed as bars on the bar chart.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        Map<Categorie, Long> statistics = new IServiceCategorieImpl().getCategoriesStatistics();\n        \n        // Create and display a bar chart of the statistics\n        showBarChart(statistics);\n    }\n    \n    public static void showBarChart(Map<Categorie, Long> statistics) {\n        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();\n        \n        for (Map.Entry<Categorie, Long> entry : statistics.entrySet()) {\n            Categorie categorie = entry.getKey();\n            String categoryName = String.valueOf(categorie.getNom()); // Extraire le nom de la catégorie\n            Long numberOfCategories = entry.getValue();\n            pieChartData.add(new PieChart.Data(categoryName, numberOfCategories));\n        }\n        \n        PieChart pieChart = new PieChart(pieChartData);\n        createToolTips(pieChart);\n        \n        pieChart.setTitle(\"Statistiques of  categories\");\n        pieChart.setClockwise(true);\n        pieChart.setLabelLineLength(50);\n        pieChart.setLabelsVisible(true);\n        pieChart.setLegendVisible(false);\n        pieChart.setStartAngle(180);\n        \n        pieChartData.forEach(data ->\n                data.nameProperty().bind(Bindings.concat(data.getName(), \" \", data.pieValueProperty(), \" \")\n                ));\n        \n        ContextMenu contextMenu = new ContextMenu();\n        MenuItem miSwitchToBarChart = new MenuItem(\"Switch to Bar Chart\");\n        contextMenu.getItems().add(miSwitchToBarChart);\n        \n        pieChart.addEventHandler(MouseEvent.MOUSE_CLICKED, event -> {\n            if (event.getButton() == MouseButton.SECONDARY) {\n                contextMenu.show(pieChart, event.getScreenX(), event.getScreenY());\n            }\n        });\n        \n        miSwitchToBarChart.setOnAction(event -> showBarChart(statistics));\n        \n        borderPane.setCenter(pieChart);\n    }\n    \n    private void createToolTips(PieChart pc) {\n        for (PieChart.Data data : pc.getData()) {\n            String msg = Double.toString(data.getPieValue());\n            Tooltip tp = new Tooltip(msg);\n            tp.setShowDelay(Duration.seconds(0));\n            \n            Tooltip.install(data.getNode(), tp);\n            \n            data.pieValueProperty().addListener((observable, oldValue, newValue) -> {\n                tp.setText(newValue.toString());\n            });\n        }\n    }\n}\n",
              "description": ""
            },
            "name": "showBarChart",
            "location": {
              "start": 433,
              "insert": 433,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "0e7e54d2-d10e-3abe-c24a-4dbd799f90fc",
            "ancestors": [
              "25c5f1c4-d149-2985-2b4d-373d06bf640c"
            ],
            "type": "function",
            "description": "Generates and installs tooltips for each data point in a pie chart, updating the text within the tooltip whenever the pie value changes.",
            "params": [
              {
                "name": "pc",
                "type_name": "PieChart",
                "description": "PieChart object that the function operates on, providing the data and nodes to create tooltips for.\n\n* `PieChart`: Represents a pie chart component\n* `getData()`: Returns a list of data points for the pie chart\n* `pieValueProperty()`: A property that holds the value of each data point as a double value.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.animation.*;\nimport javafx.application.Application;\nimport javafx.geometry.*;\nimport javafx.scene.Scene;\nimport javafx.scene.chart.*;\nimport javafx.scene.control.*;\nimport javafx.scene.layout.*;\nimport javafx.stage.*;\n\npublic class Main extends Application {\n    private PieChart pc;\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n        createScene();\n        primaryStage.setTitle(\"Pie Chart\");\n        primaryStage.setScene(new Scene(pc, 400, 300));\n        primaryStage.show();\n    }\n\n    private void createScene() {\n        pc = new PieChart(8, 6, 2);\n        createToolTips(pc);\n    }\n\n    private void createToolTips(PieChart pc) {\n        for (int i = 0; i < pc.getData().size(); i++) {\n            PieChart.Data data = pc.getData().get(i);\n            String msg = Double.toString(data.getPieValue());\n            Tooltip tp = new Tooltip(msg);\n            tp.setShowDelay(Duration.seconds(0));\n            Tooltip.install(data.getNode(), tp);\n        }\n    }\n}\n",
              "description": "\nIn this example, we have a method createScene that creates a PieChart with 8 slices and 6 sections, and then we call the method createToolTips to add tooltips to each slice. We have created an instance of a PieChart variable pc and passed it as a parameter to the method createToolTips, which adds a tooltip to every data node in the chart's data list. The tooltips display the value of the corresponding slice.\n\nThis example is short enough to be run directly in the IDE with the FX launcher. It will create a window with a PieChart and tooltips on each slice. You can adjust the numbers passed to the PieChart constructor as needed to change the size and number of slices in the chart."
            },
            "name": "createToolTips",
            "location": {
              "start": 439,
              "insert": 439,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 27,
            "docLength": null
          },
          {
            "id": "8b6d53e8-5788-1eb8-da49-5c2e74ef7621",
            "ancestors": [
              "25c5f1c4-d149-2985-2b4d-373d06bf640c"
            ],
            "type": "function",
            "description": "Terminates the application by calling `System.exit(0)`.",
            "params": [
              {
                "name": "actionEvent",
                "type_name": "ActionEvent",
                "description": "event that triggered the `handleClose()` function to execute, and it is passed as an argument to the function for further processing or handling.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javafx.event.ActionEvent;\n\npublic class Controller {\n    public void handleClose(ActionEvent actionEvent) {\n        System.exit(0);\n    }\n}\n",
              "description": "\nIn the above code, we have a class named \"Controller\" that contains only one method \"handleClose\". The method takes an ActionEvent as its parameter and calls the system exit method with an exit value of 0. When the user clicks on a button with this method set as its event handler, the program will call the handleClose method and close itself."
            },
            "name": "handleClose",
            "location": {
              "start": 469,
              "insert": 469,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "d8bb5f57-da3c-b480-c842-91871a5cd795",
            "ancestors": [
              "25c5f1c4-d149-2985-2b4d-373d06bf640c"
            ],
            "type": "function",
            "description": "Updates the value of a pie chart by multiplying its current value by 1.10 and setting it back to the chart. Additionally, it creates tooltips for the chart.",
            "params": [
              {
                "name": "actionEvent",
                "type_name": "ActionEvent",
                "description": "event that triggered the `handleUpdatePieData()` method to be executed.\n\n* `actionEvent` represents an event related to a user interaction with the application.\n* It is an instance of the `ActionEvent` class in Java.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Controller {\n    @FXML\n    private void handleUpdatePieData(ActionEvent event) {\n        Node node = borderPane.getCenter();\n        \n        if (node instanceof PieChart pc) {\n            double value = pc.getData().get(2).getPieValue();\n            pc.getData().get(2).setPieValue(value * 1.10);\n            createToolTips(pc);\n        }\n    }\n}\n",
              "description": ""
            },
            "name": "handleUpdatePieData",
            "location": {
              "start": 477,
              "insert": 477,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "53a636b9-84e1-b4b1-964e-4d6a88f0eb76",
            "ancestors": [
              "25c5f1c4-d149-2985-2b4d-373d06bf640c"
            ],
            "type": "function",
            "description": "Initializes an unspecified object or system.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class Main extends Application {\n    private final Stage stage;\n\n    public Main() {\n        this.stage = new Stage();\n    }\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(\"sample.fxml\"));\n        primaryStage.setTitle(\"Hello World\");\n        primaryStage.setScene(new Scene(root, 300, 275));\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n",
              "description": "\nThe above code creates an instance of the `FXMLLoader` class and calls its `load()` method, passing in the resource location to load as a String.  The resulting parent node is then assigned to the stage's scene using the `Scene()` constructor, and then the stage is displayed on screen.\n"
            },
            "name": "initialize",
            "location": {
              "start": 497,
              "insert": 497,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  }
]